<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PixTudio Documentation on PixTudio</title><link>https://divhub.github.io/pixtudio-website/docs/</link><description>Recent content in PixTudio Documentation on PixTudio</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://divhub.github.io/pixtudio-website/docs/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://divhub.github.io/pixtudio-website/docs/compiling_visual_studio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/compiling_visual_studio/</guid><description>Build instructions Install Visual Studio Community 2015 with C++ development tools. Install CMake. Install NASM Choose the 64 of 32 bit version, depending on your system (both should work fine). Open a command prompt at the PixTudio source code folder and ensure that CMake &amp;amp; NASM are available in your path. ##Compile zlib: cd 3rdparty/zlib-1.2.8 md build cd build cmake -G&amp;rdquo;Visual Studio 14 2015&amp;rdquo; -DCMAKE_INSTALL_PREFIX=%cd%/../dist .. cmake &amp;ndash;build .</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/abs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/abs/</guid><description>Definition FLOAT abs ( &amp;lt;FLOAT value&amp;gt; )
Returns the absolute value of value.
Parameters FLOAT value - The value.
Returns FLOAT : The absolute value of value.
Example Global float value1; int value2; End Process Main() Begin write_float(0,0, 0,0,&amp;amp;value1); write_int(0,0,10,0,&amp;amp;value2); value1 = abs(3); value2 = abs(-4); Repeat frame; Until(key(_ESC)) End Used in example: write_float(), write_int(), abs(), key()
Category:functions Category:math Category:mod_math</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/acos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/acos/</guid><description>Syntax FLOAT acos ( &amp;lt;FLOAT value&amp;gt; )
Description Returns the arccosine of a certain value.
This function performs an arccosine calculation on a certain value and returns an angle between and including 0 and 180000 (0-180º).
Parameters FLOAT value - The value to be performed an arccosine calculation on.
Returns FLOAT : The arccosine result of the specified value, an angle between and including 0 and 180000 (0-180º).
Notes The angle value returned by this function is in thousandths of degrees, as most angles within Bennu are.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/add_a_project/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/add_a_project/</guid><description>Projects
How to add To add a project to the list, simply create a page in the Project namespace (create an article with name: Project:&amp;lt;projectname&amp;gt;) and add it to the category Projects. That&amp;rsquo;s all the work to add a project, but if you should want multiple pages, it might be a good idea to add all pages created for this project to the categories Projects and Project&amp;lt;projectname&amp;gt; by putting the following lines in the article:</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/advance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/advance/</guid><description>Definition INT advance ( &amp;lt;INT distance&amp;gt; )
Moves the calling process forward by distance units in the direction of the process&amp;rsquo; angle.
This function is influenced by the local variables angle and resolution.
Parameters INT distance - Distance to advance in units.
Returns INT : Returns true if successful and false if failed.
Example import &amp;quot;mod_grproc&amp;quot; import &amp;quot;mod_map&amp;quot; import &amp;quot;mod_wm&amp;quot; // for exit_status import &amp;quot;mod_key&amp;quot; // for key() import &amp;quot;mod_proc&amp;quot; Process Main() Private int my_proc; Begin proc(); //create a new process proc2(); //create a new process Repeat frame; Until(key(_ESC) || exit_status) OnExit signal(my_proc,S_KILL); End Process proc() Begin // Create a cyan square and assign it to &#39;graph&#39; graph = map_new(100,100,8); map_clear(0,graph,rgb(0,255,255)); // Set starting position x = 50; y = 50; // This loop makes this process advance 3 pixels every frame Loop advance(3); // advance 3 pixels frame; End End Process proc2() Begin // Set resolution to 100 resolution = 100; // Create a cyan square and assign it to &#39;graph&#39; graph = map_new(100,100,8); map_clear(0,graph,rgb(0,255,255)); // Set starting position x = 50*resolution; y = 150*resolution; // This loop makes this process advance 3/100 pixels every frame Loop advance(3); // advance 3/100 pixels frame; End OnExit map_unload(0,graph); End Used in example: key(), signal(), map_new(), map_clear(), rgb(), advance(), map_unload(), exit_status, graph, x, y, resolution</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/alignment_modes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/alignment_modes/</guid><description>Description Alignment modes are modes which indicate how a graphic or text will be aligned relative to its center.
List Constant - Value ALIGN_TOP_LEFT - 0 ALIGN_TOP - 1 ALIGN_TOP_RIGHT - 2 ALIGN_CENTER_LEFT - 3 ALIGN_CENTER - 4 ALIGN_CENTER_RIGHT - 5 ALIGN_BOTTOM_LEFT - 6 ALIGN_BOTTOM - 7 ALIGN_BOTTOM_RIGHT - 8
Category:constantcategories</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/alloc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/alloc/</guid><description>Syntax VOID POINTER alloc ( &amp;lt;INT size&amp;gt; )
Description Allocates a block of memory of a certain size. Returns a pointer to the newly allocating memory block, or NULL on failure.
Also called mem_alloc().
Parameters INT size - The size of the to be allocated memory in bytes.
Returns VOID POINTER : Pointer to the first element of the allocated memory block.
NULL - There was are an error allocating the memory, like insufficient memory available.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/allpages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/allpages/</guid><description>OLD: From namespaces other than the general one, including redirects: &amp;lt;dpl&amp;gt; notnamespace= titlematch=% redirects = include format = ,,, resultsheader = %PAGES%\n &amp;lt;/dpl&amp;gt; From the general namespace, without redirects: &amp;lt;dpl&amp;gt; namespace= titlematch=% format = ,,, resultsheader = %PAGES%\n &amp;lt;/dpl&amp;gt; From the general namespace, the redirects: &amp;lt;dpl&amp;gt; namespace= titlematch=% redirects = only format = ,,, resultsheader = %PAGES%\n &amp;lt;/dpl&amp;gt; ========== &amp;lt;dpl&amp;gt; notnamespace= titlematch=% redirects = include format = ,,\n\n[[%PAGE%]], &amp;lt;/dpl&amp;gt; &amp;lt;dpl&amp;gt; namespace= titlematch=% format = ,,\n\n[[%PAGE%]], &amp;lt;/dpl&amp;gt; &amp;lt;dpl&amp;gt; namespace= titlematch=% redirects = only format = ,,\n\n[[%PAGE%]], &amp;lt;/dpl&amp;gt; All, A-C: titleregexp=\^[A-C].</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/angle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/angle/</guid><description>category:variables category:predefined category:local variables category:librender
Up to Local Variables
Definition INT angle = 0
Angle is a predefined local variable which holds the angle (measured in 1&amp;frasl;1000 of a degree) at which the graphic of that process (assigned by the local variable graph) will be drawn. It also influences the result of the function advance().
An angle of 0 means to the right, 90000 means up, 180000 means left and 270000 and -90000 mean down.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/argc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/argc/</guid><description>category:variables category:predefined category:global variables category:internal
Up to Global Variables Up to Internal
Definition INT argc
Argc is a global variable, holding the number of arguments passed when calling BGDI, including the bytecode file. The arguments can be found in the global variable argv.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/argument/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/argument/</guid><description> Definition An argument is the value passed on when calling a function or process. The variable and its value inside the definition of a function or process is called a parameter.
Example Function int my_proc( int parameter ) Begin //statements return 0; End Process Main() Private int argument = 3; Begin my_proc( argument ); my_proc( 4); End See also Parameter</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/argv/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/argv/</guid><description>category:variables category:predefined category:global variables category:internal
Up to Global Variables Up to Internal
Definition STRING[32] argv
Argv is a global variable, holding the arguments with which BGDI was called, including the bytecode file.
argv[0] - The bytecode file (possibly without extension). argv[1] - First argument. argv[2] - Second argument. argv[n] - *n*th argument.
If an argument was not given, the corresponding string will be &amp;quot;&amp;quot; (empty string). The number of arguments passed can be found with argc.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/array/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/array/</guid><description>Definition &amp;lt;datatype&amp;gt; &amp;lt;array name&amp;gt;[&amp;lt;upperlimit&amp;gt;] [= &amp;lt;values&amp;gt;]
Arrays are datatypes, consisting of a range of variables of the same type. The range is 0..upperlimit, meaning there are upperlimit+1 elements in the array.
The initializing values start at the first (0th) element and go up from there.
Example Mutliple ints int lottery[9]; // an array of 10 ints Use them like:
lottery[0] = 1; lottery[5] = 35; lottery[1] = lottery[5]; Multiple types Consider, using Type:</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/asc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/asc/</guid><description>Definition BYTE asc ( &amp;lt;STRING character&amp;gt; )
Returns the ASCII value of the first character of the string character.
Parameters STRING character - The string of which the ASCII value of the first character will be returned.
Returns BYTE : The ASCII value of the first character of the string character.
Example Program asciis; Begin write(0,0, 0,0,asc(&amp;quot;A&amp;quot;)); write(0,0,10,0,asc(&amp;quot;CAT&amp;quot;)); Repeat frame; Until(key(_esc)) End Used in example: write(), key()
Category:functions Category:strings Category:mod_string</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/ascii/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/ascii/</guid><description>category:variables category:predefined category:global variables category:mod_key
Up to Global Variables
Definition INT ascii
Ascii is defined in the module mod_key and, in contrast to scan_code, it contains the last character typed on the keyboard instead of the last key. That means “A” and “a” will have the same scan_code, but different ascii value.
Example import &amp;quot;mod_text&amp;quot; import &amp;quot;mod_key&amp;quot; import &amp;quot;mod_video&amp;quot; process main() begin set_mode(640,320); write( 0, 60, 10, 0, &amp;quot;Use lower and upper case characters to see the difference&amp;quot;); write( 0, 60, 20, 0, &amp;quot;between ascii and scan_code.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/asin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/asin/</guid><description>Syntax FLOAT asin ( &amp;lt;FLOAT value&amp;gt; )
Description Returns the arcsine of a certain value.
This function performs an arcsine calculation on a certain value and returns an angle between and including -90000 and 90000 (-90-90º).
Parameters FLOAT value - The value to be performed an arcsine calculation on.
Returns FLOAT : The arcsine result of the specified value, an angle between and including -90000 and 90000 (-90-90º).
Notes The angle value returned by this function is in thousandths of degrees, as most angles within Bennu are.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/atan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/atan/</guid><description>Syntax FLOAT atan ( &amp;lt;FLOAT value&amp;gt; )
Description Returns the arctangent of a certain value.
This function performs an arctangent calculation on a certain value and returns an angle between but not including -90000 and 90000 (-90-90º).
Parameters FLOAT value - The value to be performed an arctangent calculation on.
Returns FLOAT : The arctangent result of the specified value, an angle between but not including -90000 and 90000 (-90-90º).</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/atan2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/atan2/</guid><description>Syntax FLOAT atan2 ( &amp;lt;FLOAT y&amp;gt; , &amp;lt;FLOAT x&amp;gt;)
Description Returns the arctangent of a certain value. It is computed as the arc tangent of y/x. The signs of the arguments are used to perform the calculation.
This function performs an arctangent calculation on a certain value and returns an angle between but not including -180000 and 180000 (-180-180º).
Parameters FLOAT y - The Y value to be performed an arctangent calculation on.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/atof/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/atof/</guid><description>Definition FLOAT atof ( &amp;lt;STRING str&amp;gt; )
Returns the float value of the number specified in a certain string.
Parameters STRING str - The string specifying a number of which the float value will be returned.
Returns FLOAT : The float value of the number specified by the specified string.
Category:functions Category:strings Category:mod_string</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/atoi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/atoi/</guid><description>Definition INT atoi ( &amp;lt;STRING str&amp;gt; )
Returns the int value of the number specified in a certain string.
Parameters STRING str - The string specifying a number of which the int value will be returned.
Returns INT : The int value of the number specified by the specified string.
Category:functions Category:strings Category:mod_string</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/background/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/background/</guid><description> Description The background is a graphic, in the system file (fileID of 0) with a graphID equal to BACKGROUND.
Examples in use:
[[map_clear]](0,[[BACKGROUND]]);, to clear the background to black (same as screen_clear). [[drawing_map]](0,[[BACKGROUND]]);, to set drawing to the background.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/basic_statements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/basic_statements/</guid><description>category:general
Below are explained the basic statements of Program and Process and where to declare all the types of variables. For prototyping see Declare.
A list of basic statements:
Program Process Function Declare Begin OnExit End Private Public Local Global Const Basic statements Program example; Global // Start a global variables part of the program End Const // Start a constants part of the program End Local // Start a global variables part of the program End Private // Start a private variables part of the main process End Begin // Start the main code part of the main process proc1(); // create new instance of proc1 Loop frame; End OnExit // Start the exit code part of the main process End Global // Start a global variables part of the program End Const // Start a constants part of the program End Local // Start a global variables part of the program End Process proc1() Public // Start the public variables part of the process Private // Start the private variables part of the process Begin // Start the main code part of the process Loop frame; End OnExit // Start the exit code part of the process End Function int func1() Public // Start the public variables part of the function Private // Start the private variables part of the function Begin // Start the main code part of the function return 0; OnExit // Start the exit code part of the function End Used in example: basic statements, loop, return, frame</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/bdf_load/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/bdf_load/</guid><description>Definition INT bdf_load ( &amp;lt;STRING filename&amp;gt;, [ &amp;lt;POINTER id&amp;gt;] )
Loads a BDF font file into memory as a font.
The previous name load_bdf() is deprecated.
Parameters STRING filename - The filename of the bdf file that you wish to load (including extension and possible path). POINTER id - Optional parameter, for loading a font in the background.
Returns INT : graphID
-2 - Waiting for the file to be loaded, see notes.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/begin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/begin/</guid><description>category:reserved category:language category:basic statement
Up to Basic Statements
Syntax Begin
:[ ]
[ OnExit
:[ ]
] End
Description Begin is a reserved word to indicate the start of the code part of a program, process or function. The end is indicated by End. The OnExit statement can be used in between.
Example Process Main Begin // Start the main code part of the main process proc1(); // create new instance of proc1 End Process proc1() Begin // Start the main code part of the process End Function int func1() Begin // Start the main code part of the function return 0; End Used in example: end, process, function</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/bennu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/bennu/</guid><description>Introduction BennuGD, a Fenix fork from Fenix 0.93, is an interpreted programming language aimed at making games. It is designed in such a way, the graphical, sound and threading systems are easier to use, which makes Bennu a powerful language, not only for beginners, but also for experienced programmers.
The BennuGD core is completely portable, it can be compiled for any platform, given there is a C compiler for it.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/bennu_console/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/bennu_console/</guid><description>The Bennu console is a handy debugging tool. Many commands can be entered in it, like process manipulation or variable manipulation. The current state of Globals, Constants, Locals, Publics, Privates can also be monitored. One can add text to it in the programcode by using the function say().
To use the debugger, you need import the debug module (mod_debug) in your source code, run in debug mode by compiling your program in bgdc.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/bennu_profiler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/bennu_profiler/</guid><description>(We will keep this page as it is right now, as the profiler does not exist in Bennu yet.)
The Bennu profiler is a handy debugging tool. It shows how much power is needed for certain systems of Bennu, most particularly the drawing and the interpreting.
To use the profiler,import the debug module (mod_debug) in your sorce code and compile it in bgdc.exe with the argument &amp;ldquo;-g&amp;rdquo;, and then show it in-program with ALT+P.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/bennu_svn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/bennu_svn/</guid><description>This page contains info on the development (SubVersioN or SVN) versions of Bennu.
Source repository &amp;amp; latest builds SVN repository (checkout from https://bennugd.svn.sourceforge.net/svnroot/bennugd). Official builds are currently Release Candidates (you probably want these), you can download them here. Changelog The Bennu developers usually keep track of their changes in the forums, in a developers diary topic. There are two topics, one in English and one in Spanish. As the main core developer SplinterGU and a big part of the community is Spanish this is the more extensively used topic:</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/bigbro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/bigbro/</guid><description> category:variables category:predefined category:local variables category:internal
Up to Local Variables
Definition INT bigbro
Bigbro is a predefined local variable. Bigbro holds the ProcessID of the process/function that was immediately called before by the father of the current process/function. There are several other local variables which refer to the ProcessID of a related process:
Father Son Smallbro</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/bilge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/bilge/</guid><description>Bilge is an IRC chatroom filled with all sorts of people. Most of them are old and new Fenix/DIV programmers, but others drop by from time to time as well.
Feel free to pop in at #bilge @ irc.blitzed.org.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/bit_flags/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/bit_flags/</guid><description>Definition Bit flags are constants which each denotes a single unique case in one situation and can be combined to form different, unique cases. They are called bit flags, because when bits are used to denote a cases, we observe they are indeed single and unique and can be combined to form different unique combinations.
Bit flags are often used as integers:
Bit pattern - Integer value 0001 - 1 0010 - 2 0100 - 4 1000 - 8</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/blend_operation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/blend_operation/</guid><description>Description A blend operation is the act of executing the blending of a graphic (source) with the pixels the graphic is drawn on (target) using a blend table.
This is done in two ways:
The blendop is performed explicitly using blendop_apply(), modifying the graphic. The blendop is assigned to a graphic and performed implicitly when that graphic is drawn. This method is not available for modes lower than 16bit.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/blit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/blit/</guid><description>Blitting is the operation of drawing one graph onto another, using so-called bit blitting operations (see Wikipedia on bit blitting).
Map functions like put() and map_xputnp() are examples of functions using blit operations.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/blit_flags/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/blit_flags/</guid><description>Definition Blit flags are bit flags which can be passed to some map functions, to specify a certain effect when blitting a graphic. These functions are:
xput() map_xput() map_xputnp() They can also be used to specify a certain effect for the blitting of the graphic of a process, by assigning blit flags to its local variable flags.
List Constant - Value - Description B_HMIRROR - 1 - Blit the graph horizontally mirrored.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/blur/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/blur/</guid><description>Definition INT blur ( &amp;lt;INT fileID&amp;gt; , &amp;lt;INT graphID&amp;gt; , &amp;lt;BYTE mode&amp;gt; )
This will make the specified graphic blurry by using a specified mode. It manipulates the graphic directly.
Only 16bit graphics are supported on 16bit video mode.
Parameters INT fileID - The fileID of the file that holds the graphics. INT graphID - The graphID of the graphic to convert. BYTE mode - The blur mode that is applied to the graphic (see below).</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/blur_modes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/blur_modes/</guid><description>Description Blur modes are used to specify the mode of blurring in the blur().
List Constant - Value - Description BLUR_NORMAL - 0 - single pixel: considers pixels located to the left and above of each pixel. BLUR_3X3 - 1 - 3x3: considers all 8 adjacent pixels. BLUR_5X5 - 2 - 5x5: considers the 24 pixels that surrounds each pixel. BLUR_5X5_MAP - 3 - 5x5 with additional map: Just as the previous one but using a temporary map.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/byte/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/byte/</guid><description>Definition BYTE
Bytes are whole numbers ranging from 0 to 2^8-1 ( 0 to 255 ). This is because a byte uses 8 bits (1 byte) to denote its value. A byte is the smallest datatype directly accessible in nowadays memory.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/c_number/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/c_number/</guid><description>category:variables category:predefined category:local variables category:libscroll category:librender
Up to Local Variables
Definition The cnumber is variable that is used when there&amp;rsquo;s more then one scroll or Mode7 window active, i.e. in a splitscreen configuration with two or more scroll or mode7 windows.
The cnumber indicates in wich window(s) the process is visible. It is only necessary for processes that are intended to visible in a scroll or mode7 window. The default value is 0, wich means that the process is visible in all scroll or mode7 windows.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/call/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/call/</guid><description>Syntax call &amp;lt;label&amp;gt; ;
Description The call command jumps to the given label inside a function or process until it comes across a return statement. When this happens, it jumps back to call statement and resumes after it.
Example import &amp;quot;mod_say&amp;quot; Process Main() Begin say(my_function(1)); End Function my_function(int value) Private int ret; Begin Jmp real_begin; jumping: ret = 300; return; real_begin: ret = 100; if(value == 1) Call jumping; end ret += 200; return ret; End Used in example: process, function, jmp, call, return</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/calloc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/calloc/</guid><description>Syntax VOID POINTER calloc (&amp;lt;INT num&amp;gt; ,&amp;lt;INT size&amp;gt;)
Description Allocates (creates) a block of memory of a certain size. Calloc is slightly different from alloc, as it is more natively suited for creating arrays. It also automatically initialises the data with zeros, so that the use of memset() or memseti() can be omitted. Returns a pointer to the newly allocating memory block, or NULL on failure.
Also called mem_calloc().</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/cd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/cd/</guid><description>Definition STRING cd ( [&amp;lt;STRING folder&amp;gt;] )
Sets the current path of execution if folder was specified and returns it.
Note that it is highly recommended to use chdir() for changing the current path of execution, as cd() will make Bennu crash when a folder is specified and the returned path of execution is used in the Bennu program. Just using cd() without a folder is not a problem.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/center_set/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/center_set/</guid><description>Definition INT center_set ( &amp;lt;INT FileID&amp;gt; , &amp;lt;INT GraphID&amp;gt; , &amp;lt;INT x&amp;gt; , &amp;lt;INT y&amp;gt;)
Allows you to change the center of a graphic.
This function changes a graphic&amp;rsquo;s center pixel, which is the pixel that is located on screen at the graph&amp;rsquo;s x and y coordinates. So changing this will influence the position on the screen.
The previous name set_center() is deprecated.
Parameters INT FileID - The FileID of the file containing the graphic INT GraphID - The GraphID of the graphic to change the center of.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/changelog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/changelog/</guid><description>This page is aimed to contain a gathering of all information about the changes to Bennu in the different releases. Information about what exactly has changed is spread out over several sources making some new features and functions go unnoticed. These features should be in this wiki but as the updates to this wiki are rather sparse it&amp;rsquo;s probably a good idea to have the changes made at least somewhere written down neatly.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/chdir/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/chdir/</guid><description>Definition INT chdir ( &amp;lt;STRING directoryname&amp;gt; )
Sets the current path of execution.
Parameters STRING directoryname - The name of the directory to be entered from the current path of execution or a new path of execution.
Returns INT : Success
0 - Setting of current path of execution succeeded. !0 - Setting of current path of execution failed.
Example import &amp;quot;mod_dir&amp;quot; import &amp;quot;mod_say&amp;quot; import &amp;quot;mod_key&amp;quot; Process Main() Begin say(CD()); ChDir(&amp;quot;.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/chr/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/chr/</guid><description>Definition STRING chr ( &amp;lt;BYTE ASCIIvalue&amp;gt; )
Returns the character associated with ASCIIvalue.
Parameters BYTE ASCIIvalue - The ASCII value of which the character is wanted.
Returns STRING : The character associated with ASCIIvalue.
Example Program chars; Begin write(0,0, 0,0,chr(65)); write(0,0,10,0,chr(67)); Repeat frame; Until(key(_esc)) End Used in example: write(), key()
Category:functions Category:strings Category:mod_string</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/clone/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/clone/</guid><description>Syntax Clone &amp;lt;sentences&amp;gt;
End
Description The clone command creates a copy of the actual process which is called a &amp;ldquo;child process.&amp;rdquo; The original process is then called the &amp;ldquo;parent process&amp;rdquo;.
Only the child process will run the sentences between the keyword CLONE and the keyword END.
Example import &amp;quot;mod_key&amp;quot;; import &amp;quot;mod_map&amp;quot;; import &amp;quot;mod_video&amp;quot;; import &amp;quot;mod_proc&amp;quot;; Process Main() Begin squares(); repeat frame; until(key(_ESC)); let_me_alone(); End Process squares() Private int advance; Begin graph = map_new(5,5,16); map_clear(0,graph,rgb(255,0,255)); advance = 1; clone graph = map_clone( 0, graph ); map_clear(0,graph,rgb(255,255,255)); advance = 2; end loop x += advance; frame; end map_unload(0,graph); End Used in example: key(), map_new(), map_clear(), rgb(), map_unload() This example shows two squares.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/collision/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/collision/</guid><description>Definition INT collision ( &amp;lt;INT processID|processTypeID&amp;gt; )
Checks if a process collided with the process calling Collision().
When a processTypeID is specified, there could be multiple fitting collisions. In this case, collision() returns a processID on each subsequent call, until it returns 0. This can be reset by use of the frame; statement, and in such case, frame(0); can be handy.
Parameters INT processID|processTypeID - The ProcessID of the process or the ProcessTypeID of the type of processes to be checked.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/collision_box/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/collision_box/</guid><description>Definition INT collision_box ( &amp;lt;INT processID|processTypeID&amp;gt; )
Checks if a process collided with the process calling Collision_box().
When a processTypeID is specified, there could be multiple fitting collisions. In this case, collision_box() returns a processID on each subsequent call, until it returns 0. This can be reset by use of the frame; statement, and in such case, frame(0); can be handy.
The diference between collision_box and collision is that collision_box only checks the distance with the edges of the processes, on the other side collision() check pixel by pixel between these processes.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/collision_circle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/collision_circle/</guid><description>Definition INT collision_circle ( &amp;lt;INT processID|processTypeID&amp;gt; )
Checks if a process collided with the process calling Collision_circle().
When a processTypeID is specified, there could be multiple fitting collisions. In this case, collision_cirlce() returns a processID on each subsequent call, until it returns 0. This can be reset by use of the frame; statement, and in such case, frame(0); can be handy.
The diference between collision_circle and collision is that collision_circle only checks the distance with a circle in the edges of the processes, on the other side collision() check pixel by pixel between these processes.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/color/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/color/</guid><description>Description Colors are widely used in Fenix/Bennu. They are used for example in text functions.
In 8 bit color mode, the color corresponds with the palette index (0..255); in 16 bit color mode the color corresponds with an RGB value (0..65535): 5 bits for red, 6 bits for green and 5 bits for blue. In 32bit mode the code is 0xRRGGBBAA, two letters meaning one byte: 8 bits for each component.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/color_depths/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/color_depths/</guid><description>Definition Color depths are used to specify the color depth of the screen, by passing one of them to the function set_mode() as the depth parameter.
See also graph_modes.
List Constant - Value - Description MODE_8BITS - 8 - Use a color depth of 8bit. Also called MODE_8BPP. MODE_16BITS - 16 - Use a color depth of 16bit. Also called MODE_16BPP. MODE_32BITS - 32 - Use a color depth of 32bit.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/color_find/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/color_find/</guid><description>Syntax INT color_find ( &amp;lt;BYTE red&amp;gt; , &amp;lt;BYTE green&amp;gt; , &amp;lt;BYTE blue&amp;gt; )
Description Match an RGB value to a particular palette index. This is usefull in 8 bit mode.
The previous name find_color() is deprecated.
Parameters BYTE red - Level of red in the desired color from 0 to 255. BYTE green - Level of green in the desired color from 0 to 255. BYTE blue - Level of blue in the desired color from 0 to 255.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/color_gamuts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/color_gamuts/</guid><description>BennuGD ignores this 576 set of bytes. But Are 576 bytes to save 16 color gamuts (sutsets of colors) useful to quickly paint. Each color gamuts is composed by the next information
Name Size (Bytes) Description
Number of colours 1 Number of colours that will compose this color gamut. Only support 8,16 and 32 values.
Mode 1 Sais how will be stored the color gamut.
`0 - Direct pixel: You select the first color gamut in the palette, and the next colors gamut will be used sequencialy to this.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/const/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/const/</guid><description>Syntax Const constants End Description Const is a reserved word used to initiate the declaration of constants. Terminating the declaration block with an End is needed when the Const statement is not used in conjunction with the main code of the Program.
When declaring constants inside this construct, it&amp;rsquo;s now allowed to explicitly name the type of the constant, i.e. you only have to assign the constant the value you want.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/constant/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/constant/</guid><description>A constant is a container containing a value. This value cannot be changed apart from initialization, hence the name constant, as opposed to a variable of which the value can vary. A constant can be of any datatype and can contain a value according to its datatype. For example, an integer has whole numbers between -2\^31 (-2147483648) and +2\^31-1 (2147483647) (e.g. 23) , a float has a floating point number (e.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/constantcategories/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/constantcategories/</guid><description>Up to Index
List of Constants
Here&amp;rsquo;s a list of constant categories used in Bennu. When you&amp;rsquo;re using an older version of Bennu and it doesn&amp;rsquo;t recognize the constant, just use the corresponding value, which is listed with the constant. This is not guarenteed to work, because functionality could have been added in a later version than you are using. It is advised to always use the latest version of Bennu.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/constants/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/constants/</guid><description>Up to Index
Constant Categories
List of all constants.
category=constants mode=userformat columns = 4 listseparators = ,\n* %TITLE%,, redirects = include replaceintitle = /\\? /,_</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/control_flow_statements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/control_flow_statements/</guid><description>category:general
Control flow statements are statements which influence the control flow (the order in which statements are executed) of the program.
If, ElseIf, Else, End While, End Repeat, Until For, End From, To, Step, End Loop, End Switch, Case, Default, End</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/controlpoint/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/controlpoint/</guid><description>Definition Native bennu map files have a special propetry, wich is an Array of controlpoints. A controlpoint has an X and Y coordinate, and a number. A map can have up to 1000 controlpoints, ranging from 0 to 999. Controlpoint 0 is always the center of the bitmap by default, but this can be changed with the Center_set() function.
The controlpoints 1-999 are optional and can be created with the Point_set() function, and read with the Point_get() function.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/coordinatenumber_flags/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/coordinatenumber_flags/</guid><description>Definition Coordinatenumber flags are used to set which scroll or mode_7 coordinate system should display a process, by assigning them to the local variable cnumber of that process. This only has influence on scrolls or mode_7 coordinate systems, not on the screen&amp;rsquo;s coordinate system.
How to change the used coordinate system, see ctype and its constants.
List Constant - Value - Description - 0 - Display the process in all scroll/mode_7-views (default) C_0 - 1 - Display the process in the scroll/mode_7-view with ID 0 C_1 - 2 - Display the process in the scroll/mode_7-view with ID 1 C_2 - 4 - Display the process in the scroll/mode_7-view with ID 2 C_3 - 8 - Display the process in the scroll/mode_7-view with ID 3 C_4 - 16 - Display the process in the scroll/mode_7-view with ID 4 C_5 - 32 - Display the process in the scroll/mode_7-view with ID 5 C_6 - 64 - Display the process in the scroll/mode_7-view with ID 6 C_7 - 128 - Display the process in the scroll/mode_7-view with ID 7 C_8 - 256 - Display the process in the scroll/mode_7-view with ID 8 C_9 - 512 - Display the process in the scroll/mode_7-view with ID 9</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/coordinatetype_modes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/coordinatetype_modes/</guid><description>Definition Coordinatetype modes are used to set the type of coordinatesytem to be used, by assigning them to the local variable ctype. Different coordinatesystems have different ways of interpreting the coordinates of a process. There&amp;rsquo;s another local variable which influences the interpretation of a process&amp;rsquo; coordinate, which is resolution.
How to change in which individual scroll or Mode7-view the process is visible, see cnumber and its constants.
List Constant - Value - Relative to C_SCREEN - 0 - The screen&amp;rsquo;s top left corner, coordinate (0,0).</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/cos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/cos/</guid><description>Syntax FLOAT cos ( &amp;lt;FLOAT angle&amp;gt; )
Description Returns the cosine of the specified angle.
This function performs a cosine calculation on a certain angle and returns a value between -1 and 1.
Parameters FLOAT angle - Angle, in thousandths of degrees. i.e. 75000 = 75º
Returns FLOAT : The cosine result of the specified angle.
Notes The angle value used in this function should be in thousandths of degrees, as most angles within Bennu are.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/ctype/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/ctype/</guid><description>category:variables category:predefined category:local variables category:libscroll category:librender
Up to Local Variables
Definition Coordinatetype modes are used to set the type of coordinatesytem to be used, by assigning them to the local variable ctype. Different coordinatesystems have different ways of interpreting the coordinates of a process. There&amp;rsquo;s another local variable which influences the interpretation of a process&amp;rsquo; coordinate, which is Resolution.
How to change in which individual scroll or Mode7-view the process is visible, see C_number and its constants.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/datatypes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/datatypes/</guid><description>Description Datatypes give meaning to data and dictate how a variable acts and reacts. Examples of datatypes are [[int]]s, [[float]]s and [[string]]s. Special cases are voids, arrays, varspaces and structs. User made types can also be defined, by use of the operator Type.
List category = datatypes mode = userformat columns = 1 listseparators = ,\n* %TITLE%,, redirects = include ordermethod = titlewithoutnamespace resultsfooter = \n%PAGES% datatypes</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/debug/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/debug/</guid><description>Syntax Debug ;
Description Debug is a reserved word used to tell PixTudio to go into debug mode, only if the DCB was compiled with debug information (compiler option -g). If the module mod_debug was imported as well, the console is immediately invoked and one can begin tracing from the debug statement.
Here&amp;rsquo;s a handy page about debugging a Bennu program.
Example Function int debug_warning(string warning) Begin say(&amp;quot;Warning: &amp;quot; + warning); debug; return 0; End Used in example: say(), debug</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/debugging/</guid><description>Debugging a Bennu program can be tricky. So here are a few tips to get you on your way.
Debug mode To run a game in debug mode, you have to import the debug module(&amp;ldquo;mod_debug&amp;rdquo;) and to compile the .prg with the -g option (e.g. bgdc.exe -g name.prg). Then when you run the game, it is in debug mode. In this there&amp;rsquo;s a number of shortcuts, with a variety in usefulness.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/declare/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/declare/</guid><description>Syntax Declare [ Function | Process ] [ {returntype} ] {name} ( [ {parameters} ] )
Private {private variables} End Public {public variables} End Description Declare is a reserved word used to declare a process or function before its actual code. This can be useful if the function or process needs to be known before it is actually defined, like when the function returns something other than an int or when the publics of the process need to be accessed before the definition.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/delete_draw/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/delete_draw/</guid><description>Definition INT delete_draw ( &amp;lt;INT DrawID&amp;gt; )
Deletes a certain drawing from the screen.
Parameters INT DrawID - DrawID of the drawing to be deleted.
Returns INT : true
Notes Delete_draw(0) deletes all drawings from the screen.
Category:functions Category:drawing Category:mod_draw</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/delete_text/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/delete_text/</guid><description>Definition INT delete_text ( &amp;lt;INT TextID&amp;gt; )
Deletes a certain text from the screen.
Parameters INT TextID - TextID of the text to be deleted.
Returns INT : true
Notes Delete_text(ALL_TEXT) deletes all text from the screen.
Example Program test; Global my_text; Begin my_text = write(0,320/2,200/2,4,&amp;quot;Press space to delete this.&amp;quot;); Repeat if (key(_space)) if(my_text&amp;gt;0) delete_text(my_text); my_text = 0; end end Frame; Until(key(_esc)) End Used in example: write(), key(), textID</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/dirclose/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/dirclose/</guid><description>Definition INT dirclose ( &amp;lt;INT handleId&amp;gt; )
Close a directory using a given handle id obtained with diropen().
Parameters INT handleId - The handle id of a directory.
Returns INT : The handle of the opened directory.
0 - There was an error. 1 - The directory was closed successfully.
Category:functions Category:files Category:mod_dir</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/diropen/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/diropen/</guid><description>Definition INT diropen ( &amp;lt;STRING folder&amp;gt; )
Open a directory for read it, returns handle id.
Parameters STRING folder - The folder to open for read.
Returns INT : The handle of the opened directory.
0 - There was an error. &amp;gt;0 - The handle of the opened directory.
Category:functions Category:files Category:mod_dir</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/dirread/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/dirread/</guid><description>Definition STRING dirread ( &amp;lt;INT handle&amp;gt; )
Given a path with wildcards (&amp;rsquo;*&amp;rsquo; or &amp;lsquo;?&amp;rsquo; characters), returns the first file that matches and, in every next call, all matching files found until no more files exists. It then returns NIL. Presumebly it&amp;rsquo;s somewhat similair to glob. Also you can read multiple directories with different search criteria. This is usefull for filemanagers and dialogboxes, when you only want to list files of a specific type.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/dlls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/dlls/</guid><description>Up to Index
Read here on how to code your own DLL&amp;rsquo;s for BennuGD.
This is a list of DLLs.
namespace = DLL mode = userformat listseparators = ,\n* %TITLE%,, redirects = include noresultsheader = No DLL&amp;rsquo;s here yet. resultsfooter = \n%PAGES% DLL&amp;rsquo;s replaceintitle = /\\? /,_ replaceintitle = / DLL/,.DLL
Another modules that can be found in the official spanish forum.
List modules:
mod_beep bennu3d bennuvideo en bennupack bedbx en bennupack mod_dctools mod_espeak mod_expand port by GECA Soft expand en BennuPack fgfx en bennupack mod_fire port by GECA Soft fire en BennuPack libfmodex fsock hiper3d en bennupack libimage joylibffb en bennupack lcd Log fenix_mng en bennupack mod_mappy mod_midi mod_notes mpeg en bennupack libnetwork en bennupack net opencv pango mod_svg mod_sqlite3 mod_smpeg sumarlib en bennupack showvarlibs en bennupack mod_tinyxml ttf tscroll en bennupack voxel en BennuPack mod_vse port by DCelso water Work in progress:</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/draw_box/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/draw_box/</guid><description>Definition INT draw_box ( &amp;lt;INT x0&amp;gt; , &amp;lt;INT y0&amp;gt; , &amp;lt;INT x1&amp;gt; , &amp;lt;INT y1&amp;gt; )
Draws a filled rectangle with corners (x0,y0), (x0,y1), (x1,y0) and (x1,y1).
Parameters INT x0 - The x coordinate of one corner of the filled rectangle. INT y0 - The y coordinate of one corner of the filled rectangle. INT x1 - The x coordinate of the diagonally opposite corner of the filled rectangle. INT y1 - The y coordinate of the diagonally opposite corner of the filled rectangle.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/draw_circle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/draw_circle/</guid><description>Definition INT draw_circle ( &amp;lt;INT x&amp;gt; , &amp;lt;INT y&amp;gt; , &amp;lt;INT radius&amp;gt; )
Draws a non-filled circle with center (x0,y0) and radius radius.
Parameters INT x - The x coordinate of one center of the non-filled circle. INT y - The y coordinate of one center of the non-filled circle. INT radius - The radius of the non-filled circle.
Returns INT : DrawID
-1 - Error. 1 - If drawn after drawing_map().</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/draw_curve/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/draw_curve/</guid><description>Definition INT draw_curve ( &amp;lt;INT x0&amp;gt; , &amp;lt;INT y0&amp;gt; , &amp;lt;INT x1&amp;gt; , &amp;lt;INT y1&amp;gt; , &amp;lt;INT x2&amp;gt; , &amp;lt;INT y2&amp;gt; , &amp;lt;INT x3&amp;gt; , &amp;lt;INT y3&amp;gt; , &amp;lt;INT smoothness&amp;gt; )
Draws a curve starting at the point (x0,y0), ending at the point (x3,y3) and influenced by the points (x1,y1) and (x2,y2) with a certain level of smoothness.
Parameters INT x0 - The x coordinate of the starting point of the curve.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/draw_fcircle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/draw_fcircle/</guid><description>Definition INT draw_fcircle ( &amp;lt;INT x&amp;gt; , &amp;lt;INT y&amp;gt; , &amp;lt;INT radius&amp;gt; )
Draws a filled circle with center (x0,y0) and radius radius.
Parameters INT x - The x coordinate of one center of the filled circle. INT y - The y coordinate of one center of the filled circle. INT radius - The radius of the filled circle.
Returns INT : DrawID
-1 - Error. 1 - If drawn after drawing_map().</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/draw_line/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/draw_line/</guid><description>Definition INT draw_line( &amp;lt;INT x0&amp;gt; , &amp;lt;INT y0&amp;gt; , &amp;lt;INT x1&amp;gt; , &amp;lt;INT y1&amp;gt; )
Draws a line from point (x0,y0) to point (x1,y1).
Parameters INT x0 - The x coordinate of one point of the line. INT y0 - The y coordinate of one point of the line. INT x1 - The x coordinate of the other point of the line. INT y1 - The y coordinate of the other point of the line.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/draw_rect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/draw_rect/</guid><description>Definition INT draw_rect ( &amp;lt;INT x0&amp;gt; , &amp;lt;INT y0&amp;gt; , &amp;lt;INT x1&amp;gt; , &amp;lt;INT y1&amp;gt; )
Draws a non-filled rectangle with corners (x0,y0), (x0,y1), (x1,y0) and (x1,y1).
Parameters INT x0 - The x coordinate of one corner of the non-filled rectangle. INT y0 - The y coordinate of one corner of the non-filled rectangle. INT x1 - The x coordinate of the diagonally opposite corner of the non-filled rectangle. INT y1 - The y coordinate of the diagonally opposite corner of the non-filled rectangle.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/drawid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/drawid/</guid><description>Definition DrawID
A DrawID is an identifier associated with a certain drawing. It is returned by draw_xxx() functions. It can be used in other functions, to alter its state.
Notes DrawID &amp;ldquo;0&amp;rdquo; means all drawings.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/drawing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/drawing/</guid><description>Definition A drawing is something drawn on the screen using draw_xxx() functions. This can be a circle, square, line or whatever they can draw. A drawing is associated with a certain DrawID, returned by the function which drew the drawing.
A drawing also has a certain z value, initialized when drawn and at that point equal to the value set using drawing_z(). The drawing will behave like a process with the same z.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/drawing_alpha/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/drawing_alpha/</guid><description>Definition INT drawing_alpha ( &amp;lt;INT alpha&amp;gt; )
Tells Bennu to draw the coming drawings with a certain alpha value
Note: there currently is a &amp;lsquo;bug&amp;rsquo; that makes drawing objects (draw commands with no map as target) have their alpha value altered too. This is to be changed.
Parameters INT alpha - The alpha value to be drawn with.
Returns INT : true
Category:functions Category:drawing Category:mod_draw</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/drawing_color/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/drawing_color/</guid><description>Definition INT drawing_color ( &amp;lt;INT color&amp;gt; )
Tells Bennu to draw the coming drawings in a certain color.
Parameters INT color - The color to be drawn in (see rgb()).
Returns INT : true
Category:functions Category:drawing Category:mod_draw</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/drawing_map/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/drawing_map/</guid><description>Definition INT drawing_map ( &amp;lt;INT fileID&amp;gt; , &amp;lt;INT graphID&amp;gt; )
Tells Bennu to draw the coming drawings on a certain graphic.
In order to draw with a certain z value again, drawing_z() can be used.
Parameters INT fileID - The fileID of the file that holds the graphic. INT graphID - The graphID of the graphic to draw on.
Returns INT : true
Category:functions Category:drawing Category:mod_draw</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/drawing_stipple/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/drawing_stipple/</guid><description>Definition INT drawing_stipple ( &amp;lt;INT stipples&amp;gt; )
Tells Bennu which pixels to draw of the coming drawings.
This is done by passing a 32bit value, each bit representing a pixel. Bit 0 represents the first pixels drawn, bit 1 represents the second, etc. When a 33rd pixel is to be drawn or not, bit 0 is checked and the cycle starts over. This means a value of 0xFFFFFFFF (=2^32-1) means normal operation, meaning all the pixels will be drawn.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/drawing_z/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/drawing_z/</guid><description>Definition INT drawing_z ( &amp;lt;INT z&amp;gt; )
Tells Bennu to draw the coming drawings on a certain z value.
In order to draw on a certain graphic again, drawing_map() can be used.
Parameters INT z - The z value to be drawn on.
Returns INT : true
Category:functions Category:drawing Category:mod_draw</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/dump_modes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/dump_modes/</guid><description>Definition Dump modes are used to define the type of dump, needed to be applied to the screen, by assigning them to the global variable dump_type. This influences when and if graphics of processes are drawn to the screen.
List Constant - Value - Description PARTIAL_DUMP - 0 - Only graphics of updated (changed) processes will be drawn (default). COMPLETE_DUMP - 1 - Graphics of all processes will be drawn, whether they&amp;rsquo;ve changed or not.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/dump_type/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/dump_type/</guid><description>category:variables category:predefined category:global variables category:mod_ category:librender
Up to Global Variables
Definition INT dump_type = PARTIAL_DUMP
Dump_type is a global variable, holding the current dump_mode. The mode can be changed by assigning a different mode to the variable. Default is PARTIAL_DUMP.
See also restore_type.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/dup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/dup/</guid><description>Syntax Dup [ ( {value} ) ] ;
Description The dup(value); return a space data filled with the given value. For example a 10 dup(0) return an array of 10 elements, all with a zero value.
Example 1 import &amp;quot;mod_say&amp;quot;; global array[] = 10 dup(0); begin say ( sizeof(array)/sizeof(array[0]) ); end This example prints 10 because the size of array is ten and the size of the first element is one.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/end/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/end/</guid><description>category:reserved category:language category:basic statement
Up to Basic Statements
Syntax End
Description End is a reserved word used to terminate loads of stuff, such as if-statements, loops, begin-statements, etc&amp;hellip;
Example Process Main() Begin If(something) If(something_else) Loop frame; End //ends the loop End //ends the second if-statement End //ends the first if-statement End //ends the program block (begin keyword) Used in example: process, if, loop, end</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/error/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/error/</guid><description>Definition A Fenix error is an errorbox with some cryptic Spanish error message. When a function has a section Errors, it list what errors the function can cause. In later Fenix versions however (from which version? Later than 0.84b probably), the error isn&amp;rsquo;t displayed in an error dialog, but is printed to stderr.txt and the Fenix program is terminated.
Example Here&amp;rsquo;s an example of an error, in Fenix 0.84a, when it is tried to blit a 16bit graph onto an 8bit one:</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/exec/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/exec/</guid><description>Definition INT exec ( &amp;lt;INT mode&amp;gt; , &amp;lt;STRING executable&amp;gt;, &amp;lt;INT number_of_arguments&amp;gt; , &amp;lt;STRING POINTER arguments&amp;gt; )
Executes the specified executable with the specified arguments in the specified mode.
Parameters INT mode - The mode to call the executable (_P_WAIT/_P_NOWAIT). STRING executable - The executable to start. INT number_of_arguments - The number of arguments given with arguments STRING POINTER arguments - Pointer to an array of strings to be passed; number_of_arguments strings will be passed as arguments.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/exists/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/exists/</guid><description>Definition INT Exists ( &amp;lt;INT processID|processTypeID&amp;gt; )
Checks if a process is alive, using its processID or checks if there is a process alive of a certain processType, using its processTypeID.
Parameters INT processID|processTypeID - The ProcessID of the process or the ProcessTypeID of the type of processes to be checked.
Returns INT : The result of the check
0 (false) - The process with given processID is not alive or there are no processes alive of the given processTypeID.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/exit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/exit/</guid><description>Definition INT exit ( [&amp;lt;STRING message&amp;gt;] , [&amp;lt;INT code&amp;gt;] )
Exits the program. It can optionally pass a message or an error code thing.
Parameters [STRING message] - A message to pass outside the program as it exits. [INT code] - A code to pass outside the program as it exits.
Returns INT : true
Category:functions Category:programinteraction Category:mod_proc</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/exit_status/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/exit_status/</guid><description>category:variables category:predefined category:global variables category:libwm
Up to Global Variables
Definition INT exit_status
exit_status is a predefined global variable, holding whether or not Bennu received a QUIT event this frame. A QUIT event is generated for example by pressing the X button of the window.
Value - Description false - There is no QUIT event. true - There is a QUIT event.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/fade/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/fade/</guid><description>Definition INT fade ( &amp;lt;INT red&amp;gt; , &amp;lt;INT green&amp;gt; , &amp;lt;INT blue&amp;gt; , &amp;lt;INT speed&amp;gt; )
Fades the screen from the current setting to the specified setting (red,green,blue) at the specified speed.
Parameters INT red - Amount of red shown from 0 to 200. 100 is normal. INT green - Amount of red shown from 0 to 200. 100 is normal. INT blue - Amount of red shown from 0 to 200.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/fade_music_in/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/fade_music_in/</guid><description>Definition INT fade_music_in ( &amp;lt;INT songID&amp;gt; , &amp;lt;INT num_loops&amp;gt; , &amp;lt;INT ms&amp;gt; )
Fades the music in, stepping up the volume from silence to the main song volume, i.e. set by the Set_song_volume() function.
Parameters INT songID - The identification code of the song, returned by load_song(). INT num_loops - The number of loops, a value of -1 will be an infinite loop. INT ms - Microseconds of fading (the duration).</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/fade_music_off/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/fade_music_off/</guid><description>Definition INT fade_music_off ( &amp;lt;INT ms&amp;gt; )
Fades off the song, played by Play_song().
Parameters INT ms - Microseconds of fading (the duration).
Returns INT : Error.
-1 - Error: sound inactive.
See also Fade_music_in().
Category:functions Category:sound Category:mod_sound</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/fade_off/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/fade_off/</guid><description>Definition INT fade_off ( )
Fades the screen from the current setting to black out.
This call is equivalent to [[fade]](0,0,0,16).
Returns INT : true
Category:functions Category:palettes Category:mod_map</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/fade_on/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/fade_on/</guid><description>Definition INT fade_on ( )
Fades the screen from the current setting to normal.
This call is equivalent to [[fade]](100,100,100,16).
Returns INT : true
Category:functions Category:palettes Category:mod_map</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/fading/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/fading/</guid><description>category:variables category:predefined category:global variables category:librender
Up to Global Variables
Definition INT fading = false
Fading is a global variable, holding whether the screen is currently fading. This can be caused by the functions fade(), fade_on() or fade_off(). Its value will be true if there is fading going on and false if not.
Example Program faders; Private int text_id; Begin // Write something text_id = write(0,160,100,4,&amp;quot;Look at this fading text!&amp;quot;); // Fade screen on and off fade_off_and_on(); // Wait for ESC key Repeat frame; Until(key(_ESC)) // Kill all other processes and clear up text let_me_alone(); delete_text(text_id); End Process fade_off_and_on() Begin Loop fade(0,0,0,4); // Fade to black while(fading) frame; end // Wait for the fading to finish fade(100,100,100,4); // Fade to normal while(fading) frame; end // Wait for the fading to finish End End Used in example: write(), key(), let_me_alone(), delete_text(), fade()</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/father/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/father/</guid><description>category:variables category:predefined category:local variables category:internal
Up to Local Variables
Definition INT father
Father is a predefined local variable. Father holds the ProcessID of the process/function that called the current process/function. There are several other local variables which refer to the ProcessID of a related process:
Son Bigbro Smallbro Example Program example; Begin first_process(); Loop frame; End End Process first_process() // Declaration of the first process Begin second_process(); // Call the second process Loop frame; // This loop makes &amp;quot;first_process()&amp;quot; a process rather than a function End End Process second_process() //declaration of another process Begin x = father.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/fclose/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/fclose/</guid><description>Definition INT fclose ( &amp;lt;INT filehandle&amp;gt; )
Unloads a file previously loaded with fopen().
Parameters INT filehandle - The FileHandle of the file returned by fopen().
Returns INT: true
Example Process loadthing(STRING loadpath); Private int handle; // handle for the loaded file int druppels; // here&#39;s where the loaded data go Begin handle=fopen(loadpath,O_READ); // opens the file in reading mode fread(handle,druppels); // reads from the file and puts the data in druppels fclose(handle); // zipping up after business is done write(0,0,0,0,druppels); // shows the value of druppels End Used in example: fopen(), fread(), write()</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/feof/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/feof/</guid><description>Definition INT feof ( &amp;lt;INT filehandle&amp;gt; )
Checks if the end of a certain file is reached.
Parameters INT filehandle - The FileHandle of the file returned by fopen().
Returns INT: true/false: Whether the end of the specified file is reached.
Category:functions Category:files Category:mod_file</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/fexists/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/fexists/</guid><description>Syntax INT fexists ( &amp;lt;STRING filename&amp;gt; )
Description Checks if a certain file exists.
Also called file_exists().
Parameters STRING filename - The file to be checked for existence, including a possible path.
Returns INT : true/false: the existence of the file.
true - The specified file exists. false - The specified file doesn&amp;rsquo;t exist.
Example import &amp;quot;mod_file&amp;quot; import &amp;quot;mod_say&amp;quot; Process Main() Begin say(&amp;quot;&amp;gt; C:\Windows\notepad.exe &amp;gt; &amp;quot; + fexists(&amp;quot;C:\Windows\notepad.exe&amp;quot;)); // A filename with // absolute path say(&amp;quot;&amp;gt; SDL.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/fflush/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/fflush/</guid><description>Definition INT fflush ( &amp;lt;INT filehandle&amp;gt; )
Clears internal data buffers for the file associated with the filehandle. The file has to be opened for output with the Readwrite_modes. This function comes from the standard C library, this is a miscellaneous function.
Parameters INT filehandle - The FileHandle of the file returned by fopen().
Returns INT : - the status result of the action.
EOF (-1) - an error was detected, or end of file has been reached.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/fgc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/fgc/</guid><description>Definition Fenix archive file, containing graphics.
See also load_fgc() save_fgc() unload_fgc() Category:filetypes</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/fget_angle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/fget_angle/</guid><description>Definition INT fget_angle ( &amp;lt;INT pointA-X&amp;gt; , &amp;lt;INT pointA-Y&amp;gt; , &amp;lt;INT pointB-X&amp;gt; , &amp;lt;INT pointB-Y&amp;gt; )
Returns the angle between two certain points. The returned angle will be ranging from 0 to 360000 (0-360º).
Parameters INT pointA-X - The X-coordinate of point A. INT pointA-Y - The Y-coordinate of point A. INT pointB-X - The X-coordinate of point B. INT pointB-Y - The Y-coordinate of point B.
Returns INT : The angle between point A and point B.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/fget_dist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/fget_dist/</guid><description>Definition INT fget_dist ( &amp;lt;INT pointA-X&amp;gt; , &amp;lt;INT pointA-Y&amp;gt; , &amp;lt;INT pointB-X&amp;gt; , &amp;lt;INT pointB-Y&amp;gt; )
Returns the distance between two certain points.
Parameters INT pointA-X - The X-coordinate of point A. INT pointA-Y - The Y-coordinate of point A. INT pointB-X - The X-coordinate of point B. INT pointB-Y - The Y-coordinate of point B.
Returns INT : The distance between point A and point B.
Example Program angling; Const screen_width = 320; screen_height = 200; screen_depth = 8; screen_fps = 60; screen_frameskip = 0; Global int distance; int tempID; Begin // Set the screen mode set_mode(screen_width,screen_height,screen_depth); set_fps(screen_fps,screen_frameskip); // Change this to see what happens resolution = 100; // Create mouse graph, assign to mouse.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/fgets/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/fgets/</guid><description>Definition STRING fgets ( &amp;lt;INT filehandle&amp;gt; )
Reads a line from a certain file and returns it. Subsequent calls will return the next line, until the end of the file is reached.
Parameters INT filehandle - The FileHandle of the file returned by fopen().
Returns STRING: The line read.
Notes The returned string normally does not contain the &amp;lsquo;\n&amp;rsquo; or &amp;lsquo;\r&amp;rsquo;,&amp;rsquo;\n&amp;rsquo; charactersets.
When a line ends with the character &amp;lsquo;\&amp;rsquo;, the next line will be joined with the current one, changing the &amp;lsquo;\&amp;rsquo; character to a &amp;lsquo;\n&amp;rsquo; character.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/fh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/fh/</guid><description>Definition Fenix header file, containing code.
See also Include Category:filetypes</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/file/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/file/</guid><description>This is about the filetype. Did you mean the local variable file or the function file()? Up to Filetypes
Description A file is a container for graphics, identified by a non-negative integer (0 or higher). It holds all information about the contained graphics (pixels, width, height, depth, name, etc). Each of these graphics have a unique identifier inside the file (positive int).
A file can be created for example by loading an FPG (Fichero Para Gráficos, meaning &amp;ldquo;file for graphics&amp;rdquo;) into it, by using fpg_load(), which creates a new file with the graphics from the loaded FPG and returns a unique identifier.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/filehandle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/filehandle/</guid><description>Description A FileHandle is an identifier for a file, for use in functions requiring a FileHandle, like fread(), fwrite() and fclose().
Consider the following code:
handle = fopen(&amp;quot;file.txt&amp;quot;,O_READ); The fopen() function will try to open the &amp;ldquo;file.txt&amp;rdquo; for reading. If it fails to open the file for whatever reason (e.g. file not found or insufficient user rights) handle will have the value of 0. If opening the file for reading succeeded, the handle will have a value other than 0.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/fileid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/fileid/</guid><description>Definition FileID
A FileID is an identifier associated with a certain file (FPG). It is returned by load_fpg(), when a file is loaded to memory and can be used in many functions, wanting a FileID, for example map_put() or start_scroll(). A FileID can also be assigned to the local variable file of a process or function, which will make the process in question look in that file (FPG) for the graphic, associated with the GraphID specified by the process&amp;rsquo; graph local variable.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/fileinfo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/fileinfo/</guid><description>category:variables category:predefined category:global variables category:mod_dir
Up to Global Variables
Definition Struct Fileinfo
Fileinfo is a global variable struct, containing information about a file/directory entry, lastly returned by glob().
Members Member name - Description STRING path - The path to the file/directory (without the name of the file/directory). STRING name - The name of the file/directory. INT directory - true/false: whether the file/directory is a directory or not INT hidden - true/false: whether the file is hidden or not INT readonly - true/false: whether the file is read only or not INT size - The size in bytes of the file/directory.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/filetypes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/filetypes/</guid><description>Definition Bennu knows multiple filetypes.
List category = filetypes mode = userformat columns = 1 listseparators = ,\n* %TITLE%,, redirects = include ordermethod = titlewithoutnamespace resultsfooter = \n%PAGES% filetypes
Category:General</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/filter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/filter/</guid><description>Definition INT filter ( &amp;lt;INT fileID&amp;gt; , &amp;lt;INT graphID&amp;gt; , &amp;lt;POINTER filter_table&amp;gt; )
This function allows the colors of a graphic to be filtered with a nummerical range, defined as an array.
Parameters INT fileID - The fileID of the file that holds the graphics. INT graphID - The graphID of the graphic. POINTER fileter_table - Pointer to a table array with values that are applied to the graphic).</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/find/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/find/</guid><description>Definition INT find ( &amp;lt;STRING str&amp;gt; , &amp;lt;STRING searchstring&amp;gt; , [&amp;lt;INT startposition&amp;gt;] )
Returns the position of the firstly found appearance of a searchstring in str or -1 if not found. The starting position can be specified optionally.
Parameters STRING str - The string in which to search. STRING searchstring - The string to search for. [INT startposition] - The position at which to start searching. Default is 0.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/finite/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/finite/</guid><description>Syntax INT Finite ( &amp;lt;FLOAT number&amp;gt; )
Description Checks if a given value is a finite number. This function is the opposite of the Isinf() function. It does not check for Not-A-Numbers. Use the Isnan() function for that.
Parameters FLOAT number - The value to check.
Returns INT FALSE - The value is an infinity. INT TRUE - The value is a finite number.
See also Wikipedia page about the mathematical subject infinity.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/flags/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/flags/</guid><description>category:variables category:predefined category:local variables category:librender
Up to Local Variables
Definition INT flags = 0
Flags is a predefined local variable which is used to manipulate how the graphic of a process, assigned to its local variable graph, is displayed.
To alter the effect, change the value of this local variable by assigning it blit flags. Like most bit flags, constants can be added together to combine effects. A horizontally mirrored translucent graphic would need flags B_TRANSLUCENT (4) and B_HMIRROR (1), so flags = B_TRANSLUCENT|B_HMIRROR (5) will do the trick.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/flength/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/flength/</guid><description>Definition INT flength ( &amp;lt;INT filehandle&amp;gt; )
Gives back the size of a certain file.
Parameters INT filehandle - The FileHandle of the file returned by fopen().
Returns INT: The size of the file in bytes.
Category:functions Category:files Category:mod_file</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/float/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/float/</guid><description>Definition FLOAT
Floats are floating point numbers ranging from about -10^38.53 to about 10^38.53. This is achieved by dividing 32 bits (4 bytes) in a certain way, with a certain precision. A float is used for operations in which both very large and small numbers are used, while rounding is not permitted. Unlike ints or shorts, a float actually has decimal digits. Their accuracy is about 7 decimal digits.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/fmove/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/fmove/</guid><description>Definition INT fmove ( &amp;lt;STRING source_file&amp;gt;, &amp;lt;STRING target_file&amp;gt; )
Renames files, from the bennu source code: files.c.
Parameters STRING source_file - The source file. STRING target_file - The target file.
Returns INT : true/false: the status result of the action.
true - The action was a success. false - The action failed.
Category:functions Category:files Category:mod_file</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/fnt_format/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/fnt_format/</guid><description>Header Name Size (Bytes) Description
Magic 3 character string that must containg &amp;ldquo;fnx&amp;rdquo; MSDOS-END 4 the four bytes 1Ah,0Dh,0Ah,00h Bits Per Pixel 1 Font color depht can be equal to: 1,8,16,32 Colors Palette 768 256 RGB colors using 1 byte for each component where the two first bits are ignored, so a component can be from 0 to 63 value. Color Gamuts 576 16 color gamuts (sutsets of colors) useful to quickly paint.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/fnt_load/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/fnt_load/</guid><description>Definition INT fnt_load ( &amp;lt;STRING filename&amp;gt;, [ &amp;lt;POINTER id&amp;gt;] )
Loads a FNT file into memory as a font. A font is usually with the extension .fnt.
The previous name load_fnt() is deprecated.
Parameters STRING filename - The filename of the FNT file that you wish to load (including extension and possible path). POINTER id - Optional parameter, for loading a font in the background.
Returns INT : graphID</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/fnt_new/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/fnt_new/</guid><description>Definition INT fnt_new ( &amp;lt;INT depth&amp;gt; )
Creates a new font with a certain color depth. There exists three variants of this function:
INT fnt_new ( &amp;lt;INT depth&amp;gt; )
INT fnt_new ( &amp;lt;INT charset&amp;gt; , &amp;lt;INT depth&amp;gt; )
INT fnt_new ( &amp;lt;INT file&amp;gt; , &amp;lt;INT graph&amp;gt;, &amp;lt;INT charset&amp;gt; , &amp;lt;INT width&amp;gt; , &amp;lt;INT height&amp;gt; , &amp;lt;INT first&amp;gt; , &amp;lt;INT last&amp;gt; , &amp;lt;INT flags&amp;gt; )
The first variant is a simple version wich uses the systemfont and the CP850 character set.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/fnt_save/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/fnt_save/</guid><description>Definition INT fnt_save ( &amp;lt;INT fontID&amp;gt; , &amp;lt;STRING filename&amp;gt; )
Saves a font as a file. A font is usually with the extension &amp;ldquo;.fnt&amp;rdquo;.
If the specified filename contains no extension, &amp;ldquo;.fnt&amp;rdquo; is added to it.
The previous name save_fnt() is deprecated.
Parameters INT fontID - The fontID of the font to be saved. STRING filename - The name of the font file to be saved, including a possible path.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/fnt_unload/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/fnt_unload/</guid><description>Definition INT fnt_unload ( &amp;lt;INT fontID&amp;gt; )
Unloads the specified font from memory.
The previous name unload_fnt() is deprecated.
Parameters INT fontID - The fontID of the file to unload.
Returns INT : false
Category:functions Category:Fonts Category:mod_map</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/focus_status/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/focus_status/</guid><description>category:variables category:predefined category:global variables category:libwm
Up to Global Variables
Definition INT focus_status
focus_status is a predefined global variable, holding whether or not the Bennu window has input focus.
Value - Description false - The Bennu window does not have input focus. true - The Bennu window has input focus.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/font/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/font/</guid><description>Definition A font is a way of displaying text. A font is associated with a certain fontID.
Category:general Category:texts</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/fontid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/fontid/</guid><description>Definition FontID
A FontID is an identifier associated with a certain font. It is returned by functions that load fonts, for example load_fnt(). You can use the FontID in functions to specify the font used in the writing of texts like write(), write_int(), write_float(), write_string(), write_var() and write_in_map().
Notes Font &amp;ldquo;0&amp;rdquo; is the built-in font, and can be used in functions as well.
Example import &amp;quot;mod_text&amp;quot; import &amp;quot;mod_key&amp;quot; Global My_font; End Process Main() Begin //Using the built-in font: My_font=0; Write(My_font,320/2,200/2,4,&amp;quot;Game programming is awesome!</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/fopen/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/fopen/</guid><description>Definition INT fopen ( &amp;lt;STRING filename&amp;gt; , &amp;lt;INT mode&amp;gt; )
Opens a file on the hard drive for reading or writing.
Parameters STRING filename - The filename of the file you wish to open (including extension and possible path). INT mode - The mode with which to access the file (see Readwrite_modes).
Returns INT : FileHandle
0 - Could not load. !0 - The identifier of the file now opened for reading/writing.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/format/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/format/</guid><description>Definition STRING format ( &amp;lt;INT number&amp;gt; )
STRING format ( &amp;lt;FLOAT number&amp;gt; )
STRING format ( &amp;lt;FLOAT number&amp;gt;, &amp;lt;INT number&amp;gt;)
Formats nummerical data for use in a string. There are three variants of this function, the first one only formats integers, the second one a floating point number, and the third one uses a fixed number of decimals, as given with the second parameter.
Parameters INT str - The number to format.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/forum/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/forum/</guid><description>good post thx 395 chiladze</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/fpg_add/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/fpg_add/</guid><description>Definition INT fpg_add ( &amp;lt;INT destFileID&amp;gt; , &amp;lt;INT destGraphID&amp;gt; , &amp;lt;INT origFileID&amp;gt; , &amp;lt;INT origGraphID&amp;gt; )
Copies a certain graphic in a certain file to a certain file with a certain graphID.
Parameters INT destFileID - The fileID of the destination file. INT destGraphID - The graphID in the destination file where to add the graphic. INT origFileID - The fileID of the original file where the graphic is located.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/fpg_exists/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/fpg_exists/</guid><description>Definition INT fpg_exists ( &amp;lt;INT FileID&amp;gt; )
Checks if an FPG exists with the specified FileID.
Parameters INT FileID - The FileID of the File to check for existence.
Returns INT : Whether the File exists
false - The specified File does not exist. true - The specified File exists.
Category:functions Category:fpg Category:mod_map</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/fpg_load/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/fpg_load/</guid><description>Definition INT fpg_load ( &amp;lt;STRING filename&amp;gt;, [&amp;lt;INT POINTER&amp;gt; complete&amp;gt;] )
Loads a graphics library into your program.
This function loads the whole contents of an FPG graphics library into your project, enabling the contained graphics to be used in your program as process&amp;rsquo; graphs, screen backgrounds (put_screen()) or other graphics.
The previous name load_fpg() is deprecated.
Parameters STRING filename - The filename of the FPG that you wish to load (including extension and possible path).</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/fpg_new/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/fpg_new/</guid><description>Definition INT fpg_new ( )
Creates and initializes a new file.
To add graphics to the created file, use the returned fileID in the function fpg_add(). The file can be saved with fpg_save(). To free a file, use fpg_unload().
The previous name new_fpg() is deprecated.
Returns INT : fileID
-1 - Too many files or insufficient memory. &amp;gt;=0 - The fileID of the new file.
Errors Insufficient memory - There is insufficient memory available.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/fpg_save/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/fpg_save/</guid><description>Definition INT fpg_save( &amp;lt;INT fileID&amp;gt; , &amp;lt;STRING filename&amp;gt; )
Saves a certain file to disk.
The previous name save_fpg() is deprecated.
Parameters INT fileID - The fileID of the file to save. STRING filename - The name of the file to be saved, including a possible path.
Returns INT : Success
false - Invalid fileID or filename; The errors under Errors. true - Success.
Errors Insufficient memory - There is insufficient memory available.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/fpg_unload/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/fpg_unload/</guid><description>Definition INT fpg_unload ( &amp;lt;INT fileID&amp;gt; )
Unloads a certain file from memory.
Also called fpg_del(). The previous name unload_fpg() is deprecated.
Parameters INT fileID - The fileID of the file to unload.
Returns INT : true
Category:functions Category:fpg Category:mod_map</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/fpgtool/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/fpgtool/</guid><description>category:utilities
Definition FPG Tool created in Fenix by the Fenix Team. 0.84a was used for coding and compiling, so Fenix 0.84a interpreter is included. Also used was GUI.DLL.
Source included.
Download Download here.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/fpl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/fpl/</guid><description>Definition Fenix palette file.
See Also load_fpl() save_fpl() Category:filetypes</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/fps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/fps/</guid><description>category:general category:variables category:predefined category:global variables category:librender
Up to Global Variables
Definition INT fps
The global variable fps holds the current frames per second on which Bennu is running. This means how many times a frame is executed every second and how many times the screen is updated every second.
If a different FPS is needed, the target FPS can be altered by use of set_fps().
If a more accurate FPS is needed, use frame_time to calculate it.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/fputs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/fputs/</guid><description>Definition INT fputs ( &amp;lt;INT filehandle&amp;gt; , &amp;lt;STRING line&amp;gt; )
Writes a line to a certain file.
Parameters INT filehandle - The FileHandle of the file returned by fopen().
Returns INT: Number of bytes written.
0 - There was an error. &amp;gt;0 - Number of bytes written.
Notes The character &amp;lsquo;\&amp;rsquo; will be put in front of every newline character, so that fgets() reads the lines like they were written.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/frame/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/frame/</guid><description>Syntax Frame [ ( &amp;lt;percentage&amp;gt; ) ] ;
Description The frame; command tells the interpreter when a process is done for one game cycle. When the frame; is reached, the screen is updated. If there are several processes running, the screen is updated once every process has reached its frame; statement.
It is commonly used in loops of processes that should do something like moving around by a certain amount of pixels per game cycle (or per frame).</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/frame_time/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/frame_time/</guid><description>category:variables category:predefined category:global variables category:librender
Up to Global Variables
Definition FLOAT frame_time
Frame_time is a global variable, holding the time passed the last frame. In other words: the difference in time between the start of the last frame and the current frame.
Doing a bit of physics, we see that: FPS = 1 / frame_time
Be advised that frame_time is in milliseconds accurate, so it can be 0 at times, so one might prevent such a case from happening: FPS = 1 / ( frame_time + (frame_time==0)*0.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/fread/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/fread/</guid><description>Definition INT fread ( &amp;lt;INT filehandle&amp;gt; , &amp;lt;VARIABLE data&amp;gt; )
INT fread ( &amp;lt;VOID POINTER data_pos&amp;gt; , &amp;lt;INT length&amp;gt; , &amp;lt;INT filehandle&amp;gt; )
Reads the information from a file loaded with fopen() to the variable data.
The second version reads length bytes to the memory pointed to by data_pos.
Parameters INT filehandle - The FileHandle of the file returned by fopen(). VARIABLE data - The data to read from the file (any type of variable).</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/free/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/free/</guid><description>Definition INT free ( &amp;lt;VOID POINTER data&amp;gt; )
Frees a block of memory.
The pointer used must be a pointer to a previously allocated block of memory, else the behavior of free() is undefined.
Also called mem_free().
Parameters VOID POINTER data - Pointer to the block of memory to be freed.
Returns INT : true
Example Program example; Private byte pointer pbyte; word pointer pword; int pointer pint; int elements = 10; int i; Begin // Allocate memory pbyte = alloc(elements); pword = alloc(elements*sizeof(word)); pint = alloc(elements*sizeof(int)); // Reset memory to 0&#39;s memset (pbyte,0,elements); memsetw(pword,0,elements); // same as memset(pword,0,elements*sizeof(word)); // because value-parameter is 0.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/fremove/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/fremove/</guid><description>Definition INT fremove ( &amp;lt;STRING filename&amp;gt; )
Removes (deletes) files, from the bennu source code: files.c.
Parameters STRING filename - The file to remove.
Returns INT : true/false: the status result of the action.
true - The action was a success. false - The action failed.
Category:functions Category:files Category:mod_file</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/frewind/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/frewind/</guid><description>Definition UNDEFINED frewind ( &amp;lt;INT filehandle&amp;gt; )
Sets the byte offset (reading position) to the begin of a certain file. This is similair to using:
fseek(file_id,0,SEEK_SET); Parameters INT filehandle - The FileHandle of the file returned by fopen().
Returns INT
1 - The begin position of the file.
See also fseek()
Category:functions Category:files Category:mod_file</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/fseek/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/fseek/</guid><description>Definition INT fseek ( &amp;lt;INT filehandle&amp;gt; , &amp;lt;INT position&amp;gt; , &amp;lt;INT seek_mode&amp;gt; )
Sets the byte offset (reading position) of a certain file. This means where a function will start reading in that file.
Parameters INT filehandle - The FileHandle of the file returned by fopen(). INT position - Number of bytes from the point indicated by seek_mode. INT seek_mode - Set the offset relative to a certain point (see seek modes).</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/ftell/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/ftell/</guid><description>Definition INT ftell ( &amp;lt;INT filehandle&amp;gt; )
Returns the current reading position of a certain file.
The reading position can be altered by fseek().
Parameters INT filehandle - The FileHandle of the file returned by fopen().
Returns INT: The current reading position of the specified file.
Category:functions Category:files Category:mod_file</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/ftime/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/ftime/</guid><description>Syntax STRING ftime ( &amp;lt;STRING format&amp;gt; , &amp;lt;INT time&amp;gt; )
Description Puts a certain time in a certain format.
It returns the specified string, with certain keywords replaced with their corresponding values, according to the specified time (see Notes). The current time is fetched by use of the function time().
Parameters STRING format - The format wanted. INT time - The time to be put in the formatted string.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/ftoa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/ftoa/</guid><description>Definition STRING ftoa ( &amp;lt;FLOAT value&amp;gt; )
Returns a string containing a certain float value.
Parameters &amp;rdquo;&amp;lsquo;FLOAT &amp;ldquo;&amp;rsquo; value - The value the returned string will contain.
Returns STRING : The string containing the specified value, including sign and decimal point.
Category:functions Category:strings Category:mod_string</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/full_screen/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/full_screen/</guid><description> category:variables category:predefined category:global variables category:libvideo
Up to Global Variables
INT full_screen = false
Description full_screen is a predefined global variable. It defines whether Bennu (libvideo to be more precise) will be rendered in windowed (default) or fullscreen mode.
The value of full_screen can be changed. false for windowed mode and true for fullscreen mode. For the change to have effect, set_mode() needs to be called afterwards.
See also graph_mode scale_mode</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/function/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/function/</guid><description>Syntax Function &amp;lt;returntype&amp;gt; &amp;lt;name&amp;gt; ( [ &amp;lt;parameters&amp;gt; ] ) [ Public [ &amp;lt;public variables&amp;gt; ] End ] [ Private [ &amp;lt;private variables&amp;gt; ] End ] Begin [ &amp;lt;function code&amp;gt; ] [ OnExit [ &amp;lt;exit code&amp;gt; ] ] End Description Function is a reserved word used to start the code of a function.
A function is a subroutine to which one or more of the following apply:
it receives parameters it acts on the parameters it processes data located elsewhere it returns a value The difference between a function and a process is that the calling process or function waits until the function is completed.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/function_example/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/function_example/</guid><description>:Category:functions
Definition INT example_function ( &amp;lt;INT example_int&amp;gt; , &amp;lt;WORD example_word&amp;gt; , [&amp;lt;STRING example_string&amp;gt;] )
Does something.
Here goes a more detailed story about the function.
Parameters INT example_int - Something about this int. WORD example_word - Something about this word. [STRING example_string] - Something about this optional string.
Returns INT : Some int.
Errors List all errors which could be thrown by use of this function.
Notes Here are some notes, which explains some parts in more depth.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/functionlist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/functionlist/</guid><description>category=functions</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/functions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/functions/</guid><description>Up to Index
Function Categories
List of all documented functions regarding Bennu: native, DLL or otherwise.
category=functions notnamespace = Template redirects = include
mode=userformat ordermethod = titlewithoutnamespace
columns = 5 listseparators = ,\n* %TITLE%(),, resultsfooter = \n%PAGES% functions replaceintitle = /\\? /,_</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/fwrite/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/fwrite/</guid><description>Definition INT fwrite ( &amp;lt;INT filehandle&amp;gt; , &amp;lt;VARIABLE data&amp;gt; )
INT fwrite ( &amp;lt;VOID POINTER data_pos&amp;gt; , &amp;lt;INT length&amp;gt; , &amp;lt;INT filehandle&amp;gt;)
Writes the variable data to a file loaded with fopen.
to be extended&amp;hellip;
Parameters INT filehandle - Identifier of the file loaded with fopen. VARIABLE data - The data to write to the file (any type of variable).
Returns INT : The number of bytes written to the file.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/general/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/general/</guid><description>Guide: Porting to your chosen system This is a general guide for getting your Bennu game onto your chosen system.
&amp;rdquo;&amp;rsquo; If you have missed the front page of this Wiki please see Bennu_Wiki or click on the BennuWiki logo on the top left of this page. &amp;ldquo;&amp;rsquo;
these OS or platforms: Windows
Linux
Caanoo (a later GP2X type handheld)
GP2X Wiz
Dingux (Dingoo OS for handheld)</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/get_angle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/get_angle/</guid><description>Definition INT get_angle ( &amp;lt;INT processID&amp;gt; )
Returns the angle between the coordinates of a certain process and the process calling get_angle().
Parameters INT processID - The other process.
Returns INT : The wanted angle.
-1 - An error may have occurred: invalid process. !-1 - The wanted angle.
Example Program angling; import &amp;quot;mod_grproc&amp;quot;//modules import &amp;quot;mod_proc&amp;quot; import &amp;quot;mod_wm&amp;quot; import &amp;quot;mod_key&amp;quot; import &amp;quot;mod_video&amp;quot; import &amp;quot;mod_map&amp;quot; import &amp;quot;mod_draw&amp;quot; import &amp;quot;mod_text&amp;quot; Const screen_width = 320; screen_height = 200; screen_depth = 8; screen_fps = 60; screen_frameskip = 0; Global int distance; int tempID; Begin // Set the screen mode set_mode(screen_width,screen_height,screen_depth); set_fps(screen_fps,screen_frameskip); // Change this to see what happens resolution = 100; // Create mouse graph and start mousepointer x = new_map(20,20,screen_depth); map_clear(0,x,rgb(255,0,0)); mousepointer(0,x); // Create arrow, assign to graph graph = new_map(30,30,screen_depth); drawing_map(0,graph); drawing_color(rgb(0,255,0)); draw_line( 0,29,29,30/2); draw_line( 0, 0,30,30/2); // Set position x = screen_width /2 * resolution; y = screen_height/2 * resolution; // Display distance write(0,0,0,0,&amp;quot;Distance:&amp;quot;); write_int(0,60,0,0,&amp;amp;distance); // Always point to the mouse Repeat // Get the angle and distance between this process&#39; coordinates and those of mousegraph.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/get_base_path/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/get_base_path/</guid><description>Definition STRING get_base_path ( )
Use this function to get the directory where the application was run from. This is where the application data directory is.
In macOS (and iOS), if the application is in a &amp;ldquo;.app&amp;rdquo; bundle, the function will return the path to the app&amp;rsquo;s resources directory (Game.app/Contents/Resources/).
Returns STRING : The path to the directory where the application was run from. If the base path cannot be found, an empty string will be returned.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/get_desktop_size/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/get_desktop_size/</guid><description>Syntax INT get_desktop_size ( &amp;lt;INT POINTER width&amp;gt;, &amp;lt;INT POINTER height&amp;gt; )
Description Get the desktop size.
Parameters INT POINTER width - Pointer to where the desktop width will be written. INT POINTER height - Pointer to where the desktop height will be written.
Returns INT : Successrate
false - Error. true - Ok.
Category:functions Category:programinteraction Category:mod_wm</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/get_dist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/get_dist/</guid><description>Definition INT get_dist ( &amp;lt;INT processID&amp;gt; )
Returns the distance between the coordinates of a certain process and the process calling get_dist(). The distance returned is converted to the resolution of the process calling get_dist().
Parameters INT processID - The other process.
Returns INT : The wanted distance.
-1 - An error occurred: invalid process. !-1 - The wanted distance.
Example Program angling; Const screen_width = 320; screen_height = 200; screen_depth = 8; screen_fps = 60; screen_frameskip = 0; Global int distance; int tempID; Begin // Set the screen mode set_mode(screen_width,screen_height,screen_depth); set_fps(screen_fps,screen_frameskip); // Change this to see what happens resolution = 100; // Create mouse graph and start mousepointer x = new_map(20,20,screen_depth); map_clear(0,x,rgb(255,0,0)); mousepointer(0,x); // Create arrow, assign to graph graph = new_map(30,30,screen_depth); drawing_map(0,graph); drawing_color(rgb(0,255,0)); draw_line( 0,29,29,30/2); draw_line( 0, 0,30,30/2); // Set position x = screen_width /2 * resolution; y = screen_height/2 * resolution; // Display distance write(0,0,0,0,&amp;quot;Distance:&amp;quot;); write_int(0,60,0,0,&amp;amp;distance); // Always point to the mouse Repeat // Get the angle and distance between this process&#39; coordinates and those of mousegraph.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/get_distx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/get_distx/</guid><description>Definition INT get_distx ( &amp;lt;INT angle&amp;gt; , &amp;lt;INT distance&amp;gt; )
Returns the horizontal distance in pixels of a specified displacement.
This is the same as [[cos]](&#39;&#39;angle&#39;&#39;)*&#39;&#39;distance&#39;&#39;.
Parameters INT angle - Angle, in thousandths of degrees (90° = 90000). INT distance - Length (in pixels) to measure.
Returns INT : The horizontal distance, in pixels, of a specified displacement.
Notes This function returns the width of an imaginary rectangle who&amp;rsquo;s opposite corners are the specified distance apart, at the specified angle from each other.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/get_disty/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/get_disty/</guid><description>Definition INT get_disty ( &amp;lt;INT angle&amp;gt; , &amp;lt;INT distance&amp;gt; )
Returns the vertical distance in pixels of a specified displacement.
This is the same as -[[sin]](&#39;&#39;angle&#39;&#39;)*&#39;&#39;distance&#39;&#39;.
Parameters INT angle - Angle, in thousandths of degrees (90° = 90000). INT distance - Length (in pixels) to measure.
Returns INT : The vertical distance, in pixels, of a specified displacement.
Notes This function returns the height of an imaginary rectangle who&amp;rsquo;s opposite corners are the specified distance apart, at the specified angle from each other.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/get_id/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/get_id/</guid><description>Definition INT get_id ( &amp;lt;INT processTypeID&amp;gt; )
Returns a ProcessID of a process of the specified ProcessType. On the next call of get_id() in the same process and in the same frame, the next process will be returned of the given type. After a frame statement, get_id() is reset and will return the first process of the given processType. When there are no more processes of a given type, which have not been returned, it will return 0.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/get_modes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/get_modes/</guid><description>Syntax POINTER get_modes ( &amp;lt;INT depth&amp;gt;, &amp;lt;INT flags&amp;gt; )
Description Returns a pointer to an array of available screen dimensions for the given depth and render flags, sorted largest to smallest.
Returns NULL if there are no dimensions available for a particular format, or -1 if any dimension is okay for the given format.
Parameters INT depth - Color depth of the screen. See color_depths. INT flags - Mode of rendering.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/get_pixel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/get_pixel/</guid><description>Definition INT get_pixel ( &amp;lt;INT x&amp;gt; , &amp;lt;INT y&amp;gt; )
Returns the color of the specified pixel on the background. Is equivalent to map_get_pixel( 0, 0, x, y ).
Parameters INT x - The X-coordinate of the pixel the color is wanted. INT y - The Y-coordinate of the pixel the color is wanted.
Returns INT : The color
Example import &amp;quot;mod_video&amp;quot; import &amp;quot;mod_wm&amp;quot; import &amp;quot;mod_draw&amp;quot; import &amp;quot;mod_map&amp;quot;; import &amp;quot;mod_screen&amp;quot;; import &amp;quot;mod_mouse&amp;quot;; Process Main() Begin set_mode(640,480,16); // Creates a white box as mouse&#39;s cursor mouse.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/get_pref_path/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/get_pref_path/</guid><description>Definition STRING get_pref_path ( &amp;lt;STRING company&amp;gt;, &amp;lt;STRING appname&amp;gt; )
Use this function to get the preferences dir for the described application. This is where the game can store preferences and savegames. If the folder does not exist, it will be created for you.
In android systems, your app must be assigned a single identifier in the form of org.pixtudio.sampleapp. In this case, org.pixtudio should be the value for company and sampleapp the value for appname.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/get_real_point/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/get_real_point/</guid><description>Definition INT get_real_point( &amp;lt;INT controlpoint&amp;gt; , &amp;lt;INT POINTER x&amp;gt; , &amp;lt;INT POINTER y&amp;gt; )
Finds the actual position on the screen of the calling process, given its graphic and the specified controlpoint on this graphic. All process-related variables are taken into account, like x, y, angle, even ctype. These coordinates are then assigned to the variables pointed to by x and y.
Parameters INT controlpoint - The controlpoint on the process&amp;rsquo; graphic of which the actual position is wanted.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/get_status/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/get_status/</guid><description>Definition INT get_status ( &amp;lt;INT processID&amp;gt; )
Get the current status of a ProcessID. With this, you can check if a process is frozen, sleeping, dead, alive or non-existing.
Parameters INT processID - The ProcessID signal was send to.
Returns INT :
false - The specified processID does not exist (return status: 0). 1,2,3 or 4 - The state of the processID.
Return states 0 - The specified process does not exist.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/get_text_color/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/get_text_color/</guid><description>Definition INT get_text_color( [&amp;lt;INT textID&amp;gt;] )
Gets the current text color (the color where texts will be written in).
Parameters INT textID: The identification code of the text (optional parameter, introduced in version rc282).
Returns INT: color the text will be written in, or 0 when there is a problem.
Notes None.
Errors
Example Program test; Global my_text; text_color; Begin set_text_color( rgb(192,112,0) ); text_color = get_text_color(); write (0,320/2 ,200/2,4,&amp;quot;The color of this text is:&amp;quot;); write_int(0,320/2+100,200/2,4,&amp;amp;text_color); Repeat frame; Until(key(_ESC)) End Used in example: set_text_color(), write(), write_int(), key()</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/get_timer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/get_timer/</guid><description>Syntax INT get_timer ( )
Description Returns the time the program has been running in milliseconds.
Returns INT : The time the program has been running in milliseconds.
Category:functions Category:time Category:mod_time</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/get_window_pos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/get_window_pos/</guid><description>Syntax INT get_window_pos ( &amp;lt;INT POINTER x&amp;gt;, &amp;lt;INT POINTER y&amp;gt;)
Description Get the X and Y position of the window.
Parameters INT POINTER x - Pointer to where the X-coordinate of the window will be written. INT POINTER y - Pointer to where the Y-coordinate of the window will be written.
Returns INT : Successrate
false - The system is in fullscreen. true - Success ok.
Category:functions Category:programinteraction Category:mod_wm</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/get_window_size/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/get_window_size/</guid><description>Syntax INT get_window_size ( &amp;lt;INT POINTER window_width&amp;gt; , &amp;lt;INT POINTER window_height&amp;gt; , &amp;lt;INT POINTER client_width&amp;gt; , &amp;lt;INT POINTER client_height&amp;gt; )
Description Get the window and client size.
Parameters INT POINTER window_width - Pointer to where the window width will be written. INT POINTER window_height - Pointer to where the window height will be written. INT POINTER client_width - Pointer to where the client width of window will be written. INT POINTER client_height - Pointer to where the client height of window will be written.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/getenv/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/getenv/</guid><description>Definition STRING getenv ( &amp;lt;STRING variablename&amp;gt; )
Returns the value of an environment variable (like PATH).
Parameters STRING variablename - The name of the variable to get the value of.
Returns STRING : The value of the variable.
&amp;rdquo;&amp;rdquo; - The variable is invalid or empty. !&amp;ldquo;&amp;rdquo; - The value of the variable.
Category:functions Category:programinteraction Category:mod_sys</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/glob/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/glob/</guid><description>Definition STRING glob ( &amp;lt;STRING criteria&amp;gt; )
Gets a single filename or directoryname matching the criteria. If the same criteria is specified, it keeps returning new items on subsequent calls until it can&amp;rsquo;t find any more, in which case it returns &amp;ldquo;&amp;rdquo;. When different criteria are specified, the search is &amp;lsquo;reset&amp;rsquo;. To reset the search without returning an item, use &amp;quot;&amp;quot; as criteria.
After a call to glob(), the global struct fileinfo is filled with information about the last file/directory entry returned.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/global/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/global/</guid><description> Syntax Global {global variables} End Description Global is a reserved word used to initiate the declaration of global variables. Terminating the declaration block with an End is needed when the Global is not used in conjunction with the main code of the Program.
For a list of predefined global variables, see this page.
Example Global // Declare global variables here End Process Main() Begin End Global // Declare global variables here End</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/global_signals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/global_signals/</guid><description>This article, originally made by SplinterGU, tries to explain how to do a signal to all process and how to recover the initial state of all affected processes.
Here there are the code of the two functions needed to do it.
import &amp;quot;mod_proc&amp;quot;; /* ---------------------------------- */ #define S_FORCE 50 #define S_TREE 100 /* ---------------------------------- */ local saved_status ; end /* ---------------------------------- */ function save_state_and_signal( int pid, int sig ) begin if ( sig &amp;gt;= S_TREE ) sig -= S_TREE; end if ( sig &amp;gt;= S_FORCE ) sig -= S_FORCE; end if ( !</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/global_variable/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/global_variable/</guid><description>category:general
Definition A global variable is a variable that is accessible from anywhere in the code; it is shared by the whole code.
There&amp;rsquo;s also a number of predefined local variables.
To start the declaration of global variables, use Global.
Category:variablecategories</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/global_variables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/global_variables/</guid><description>category:variablecategories category:predefinedvariablecategories
Up to Variable Categories
A list of predefined global variables.
category = global variables mode = userformat columns = 2 listseparators = ,\n* %TITLE%,, redirects = include ordermethod = titlewithoutnamespace noresultsheader = No global variables here yet. resultsfooter = \n%PAGES% global variables replaceintitle = /\\? /,_</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/glyph_get/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/glyph_get/</guid><description>Definition INT get_glyph ( &amp;lt;INT fontID&amp;gt; , &amp;lt;INT glyphID&amp;gt; )
Creates a new graphic containing the specified glyph of the specified font.
The previous name get_glyph() is deprecated.
Parameters INT fontID - The fontID of the font the glyph is wanted. INT glyphID - The glyphID of the glyph in the specified font.
Returns INT : GraphID
0 - Invalid font; Invalid glyph; could not create graphic; &amp;gt;0 - The graphID of the graphic containing the glyph.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/glyph_set/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/glyph_set/</guid><description>Definition INT glyph_set ( &amp;lt;INT fontID&amp;gt; , &amp;lt;INT glyphID&amp;gt; , &amp;lt;INT fileID&amp;gt; , &amp;lt;INT graphID&amp;gt; )
Sets the specified glyph of the specified font. The new glyph will be a copy of the specified graphic and thus it may be freed after the call.
The previous name set_glyph() is deprecated.
Parameters INT fontID - The fontID of the font the glyph is to be set. INT glyphID - The glyphID of the glyph in the specified font.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/goto/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/goto/</guid><description>Equals to Jmp</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/graph/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/graph/</guid><description>category:variables category:predefined
Up to Local Variables
Definition INT graph = 0
Graph is a predefined local variable which holds the GraphID of the process. A graphic can be assigned to the process by assigning the GraphID of that graphic to graph. Assign 0 to the local variable graph to have the process display no graph. Keep in mind that this doesn&amp;rsquo;t free the memory used by the graphic; to free it, use unload_map().</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/graph_mode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/graph_mode/</guid><description> category:variables category:predefined category:global variables category:libvideo
Up to Global Variables
Definition INT graph_mode
Graph_mode is a global variable, holding the current graph mode. The mode can be changed by assigning a different mode to the variable. Default is 0 and after a call to set_mode() it reflects the set graph mode.
See also sound_mode scale_mode full_screen</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/graph_modes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/graph_modes/</guid><description>Definition Graph modes are used to specify the color depth of the screen and the mode of rendering, by assigning them to the global variable graph_mode. This is also achieved by passing them to the parameters depth and flags in the function set_mode(), which is a pretty tidy solution.
List Color depths constants:
Constant - Value - Description MODE_8BITS - 8 - Use a color depth of 8bit. Also called MODE_8BPP.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/graphic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/graphic/</guid><description>Definition A graphic (graph or map) is a bitmap with certain properties, like width, height, depth and of course the pixel data. It is used to give the program a graphical look. One can load graphics from files with for example load_png() or use Image.DLL. They can also be obtained from within FPG&amp;rsquo;s or FGC&amp;rsquo;s files, which are graphic collection files. To create one on the fly, the function new_map() can be used.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/graphic_info/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/graphic_info/</guid><description>Definition INT graphic_info ( &amp;lt;INT fileID&amp;gt; , &amp;lt;INT graphID&amp;gt; , &amp;lt;INT infotype&amp;gt; )
Gets some information about the graph specified. This function is also known as Map_info() and Map_info_get().
Parameters INT fileID - The file that holds the graph. INT graphID - The graph to get information from. INT infotype - What type of information you want.
Returns INT : Returns the information you want.
If the specified graph was invalid it returns 0.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/graphic_set/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/graphic_set/</guid><description>Definition INT Graphic_set ( &amp;lt;INT fileID&amp;gt; , &amp;lt;INT graphID&amp;gt; , &amp;lt;INT info_type&amp;gt; , &amp;lt;INT value&amp;gt; )
Changes the x or y coordinate of the center pixel (controlpoint 0). This function is also known as Map_info_set().
Parameters INT fileID - The file that holds the graph. INT graphID - The graph to get information from. INT info_type - What type of information you want to change, see note. INT value - The new x or y coordinate of the center pixel.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/graphical_infotypes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/graphical_infotypes/</guid><description>Definition Graphical infotypes are used in graphic_info(), to specify what information about a graph is wanted.
List Constant - Value - Description G_WIDTH - 0 - Width in pixels. G_WIDE is equivalent, but deprecated. G_HEIGHT - 1 - Height in pixels. G_X_CENTER - 2 - X-axis center. Also called G_CENTER_X G_Y_CENTER - 3 - Y-axis center. Also called G_CENTER_Y G_PITCH - 4 - Width in bytes. G_DEPTH - 5 - Color depth in bits per pixel.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/graphid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/graphid/</guid><description>Definition GraphID
A GraphID is an identifier associated with a certain graphic in the file (FPG) specified by a FileID.
GraphID&amp;rsquo;s can be used to point to certain graphics in certain files (FPGs), for displaying them onscreen, or manipulating them in another way, like put() or map_put(). They can also be used to specify the graphic of a process or function, by assigning the GraphID to the local variable graph.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/grayscale/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/grayscale/</guid><description>Definition INT grayscale ( &amp;lt;INT fileID&amp;gt; , &amp;lt;INT graphID&amp;gt; , &amp;lt;BYTE method&amp;gt; )
This function will convert the specified graphic by using the specified method; see notes for the details.
Parameters INT fileID - The fileID of the file that holds the graphics. INT graphID - The graphID of the graphic to convert. BYTE method - The method used (see notes).
Returns INT
-1 - Invalid graphic. 1 - Success.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/grayscale_modes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/grayscale_modes/</guid><description>Description Greyscale modes are used to specify the mode of color scaling in the Grayscale().
Grayscale modes Constant - Value - Description GSCALE_RGB - 0 - changes the graphic to monochrome. GSCALE_R - 1 - changes the graphic to RED scale. GSCALE_G - 2 - changes the graphic to GREEN scale. GSCALE_B - 3 - changes the graphic to BLUE scale. GSCALE_RG - 4 - changes the graphic to YELLOW scale.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/height/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/height/</guid><description>category:variables category:predefined category:local variables category:libscroll category:librender
Up to Local Variables
Definition The predefined local variable height is used in Mode7 windows, and it is assigned to each process. It is therefore only relevant in the coordinate system of mode7 (Ctype=C_M7). It is used to define the height of the process graphics in relation to the semi-3d field. This is not to be confused with the local variable Z, as that is used to control the depth of the graphical layers.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/hello_world/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/hello_world/</guid><description>The Bennu Hello World! Example.
import &amp;quot;mod_say&amp;quot; // import the module to output text to console, using say() Process Main() // start the definition of the main process Begin // start the code say(&amp;quot;Hello World!&amp;quot;); End // end the definition of the main process Used in example: import, Process, Begin, End, say()
This will import the module &amp;ldquo;mod_say&amp;rdquo; which contains the definition of the &amp;ldquo;say()&amp;rdquo; function. The function will echo the argument &amp;ldquo;Hello World&amp;rdquo; to the screen.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/id/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/id/</guid><description>category:variables category:predefined category:local variables category:internal
Up to Local Variables
Definition INT id
id is a predefined local variable. It contains the process&amp;lsquo; processID.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/if/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/if/</guid><description>Syntax IF ( &amp;lt;condition&amp;gt; ) [ &amp;lt;code&amp;gt; ] ( ELSEIF ( &amp;lt;condition&amp;gt; ) [ &amp;lt;code&amp;gt; ] ) [ ELSE [ &amp;lt;code&amp;gt; ] ] END Description if statements are used to control the flow of your program by means of checking conditions.
if( &amp;lt;condition1&amp;gt; ) // code1 elseif( &amp;lt;condition2&amp;gt; ) // code2 elseif( &amp;lt;condition3&amp;gt; ) // code3 else // code4 end // code5 The action that will be performed depends on the *condition*s: - If at the time the program reaches this if codeblock condition1 evaluates as true, then code1 will be executed and then code5.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/import/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/import/</guid><description> Syntax import &amp;quot;{module name}&amp;quot; Description Imports a PixTudio module named module name into the program, which allows the usage of additional functionality in a PixTudio program.
Example import &amp;quot;mod_say&amp;quot; import &amp;quot;my_dll&amp;quot;; Process Main() Begin End</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/inc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/inc/</guid><description>Definition Bennu include file, containing code.
See also Include Category:filetypes</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/include/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/include/</guid><description>Syntax include &amp;quot;{filename}&amp;quot; Description When the compiler reaches an include statement, it continues compilation at the included file and when it&amp;rsquo;s done resumes compiling from the statement right after the include. In other words, these files contain code that gets inserted at the place of inclusion.
This is very handy for breaking up your code into pieces. The handling of video in one include file, audio in another, game logic in another, etc.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/</guid><description>Functions:
List of functions List of function categories Variables:
List of variables List of variable categories Constants:
List of constants List of constant categories General/language/syntax:
List of general pages List of language pages Tutorials:
List of tutorials DLL&amp;rsquo;s:
List of DLL&amp;rsquo;s Projects:
List of Projects</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/index.php/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/index.php/</guid><description>Protected page, so buzz off, spammers.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/int/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/int/</guid><description>Definition INT
Ints (short for integer, meaning wholes), are whole numbers ranging from -2^31 to 2^31-1 ( -2147483648 to 2147483647 ). This is because an integer uses 32bits (4 bytes) to denote its value using the Two&amp;rsquo;s complement system.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/internal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/internal/</guid><description>Up to Modules
Internal default data.
Usage Category:modules Category:internal</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/is_playing_song/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/is_playing_song/</guid><description>Definition INT is_playing_song ( )
Checks to see if Bennu is playing a song file, started with play_song().
Returns INT : Whether Bennu is playing a song at the moment of calling.
true - Bennu is playing a song. false - Bennu is not playing a song.
Example program music_example; global my_song; playing; paused; faded_in; v; begin set_mode(640,480,16); my_song=load_song(&amp;quot;beat.ogg&amp;quot;); write(0,320,30,4,&amp;quot;Use the keyboard to control the music playback.&amp;quot;); write(0,320,50,4,&amp;quot;Key [ENTER] starts / stops the song.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/is_playing_wav/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/is_playing_wav/</guid><description>Definition INT is_playing_wav ( INT )
Checks to see if Bennu is playing a wave file on the indicated Sound_channel, started with play_wav().
Parameters INT channel: The Sound_channel
Returns INT : Whether Bennu is playing a song at the moment of calling.
true - Bennu is playing a song. false - Bennu is not playing a song.
Example Used in example:
Category:functions Category:sound Category:mod_sound</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/isinf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/isinf/</guid><description>Syntax INT isinf ( &amp;lt;FLOAT number&amp;gt; )
Description Checks if a given value is an infinity. It does not check for Not-A-Numbers. Use the Isnan() function for that.
Parameters FLOAT number - The value to check.
Returns INT FALSE - The value is a not an infinity. INT TRUE - The value is a positive or negative infinity.
See also Wikipedia page about the mathematical subject infinity.
Category:functions Category:math Category:mod_math</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/isnan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/isnan/</guid><description>Syntax INT isnan ( &amp;lt;FLOAT number&amp;gt; )
Description Checks if a given value is a number. It does not check for infinties. Use the Isinf() function for that.
Parameters FLOAT number - The value to check.
Returns INT FALSE - The value is a number. INT TRUE - The value is NOT a number.
Category:functions Category:math Category:mod_math</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/itoa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/itoa/</guid><description>Definition STRING itoa ( &amp;lt;INT value&amp;gt; )
Returns a string containing a certain int value.
Parameters INT value - The value the returned string will contain.
Returns STRING : The string containing the specified value, including sign.
Category:functions Category:strings Category:mod_string</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/jmp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/jmp/</guid><description>Syntax jmp &amp;lt;label&amp;gt; ;
Description The jmp command jumps to the given label inside a function. Unlike the call command, there is nothing more to it.
Example import &amp;quot;mod_say&amp;quot; Process Main() Begin say(my_function(1)); End Function my_function(int value) Private int ret; Begin Jmp real_begin; jumping: ret = 300; return; real_begin: ret = 100; if(value == 1) Call jumping; end ret += 200; return ret; End Used in example: process, function, jmp, call, return</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/join/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/join/</guid><description>Syntax STRING join ( &amp;lt;STRING separator&amp;gt; , &amp;lt;POINTER array&amp;gt; , &amp;lt;INT array_size&amp;gt; )
Description Joins an array of strings, given a separator. Returns the resulting string. The function is the opposite of Split(). It is usefull for generating comma seperated value lists, i.e. for use in spreadsheets or text based file formats.
The function concatinates individual strings from an array, and adds a separator between them, the first piece will be copied from array[0], the second from array[1], and so forth, until either there are no more pieces left or max_number pieces are copied from the array.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/joy_getaxis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/joy_getaxis/</guid><description>Syntax INT joy_getaxis ( [ &amp;lt;INT joy&amp;gt;], &amp;lt;INT axis&amp;gt; )
Description Returns the selected joystick state for the given axis.
The JoyID is optional, if it is not present, the function uses the selected joystick. You can change the selected joystick with joy_select().
Also called joy_getposition(). The previous name get_joy_position() is deprecated.
Parameters [INT JoyID] - The JoyID of the joystick. INT axis - The axis of the joystick.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/joy_getball/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/joy_getball/</guid><description>Syntax INT joy_getball ( [ &amp;lt;INT JoyID&amp;gt; ] , &amp;lt;POINTER dx&amp;gt; , &amp;lt;POINTER dy&amp;gt;)
Description Returns the state of the specfied ball on the current selected joystick.
The JoyID is optional, if it is not present, the function uses the selected joystick. You can change the selected joystick with joy_select().
Parameters [INT JoyID] - The JoyID of the joystick. POINTER dx - A pointer to the variable X of the ball.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/joy_getbutton/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/joy_getbutton/</guid><description>Syntax INT joy_getbutton ( [ &amp;lt;INT joy&amp;gt;], &amp;lt;INT button&amp;gt; )
Description Returns the selected joystick state for the given button.
The JoyID is optional, if it is not present, the function uses the selected joystick. You can change the selected joystick with joy_select().
The previous name get_joy_button() is deprecated.
Parameters [INT JoyID] - The JoyID of the joystick. INT button - The button on the joystick.
Returns INT : state for the given button.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/joy_gethat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/joy_gethat/</guid><description>Syntax INT joy_gethat ( [ &amp;lt;INT JoyID&amp;gt; ] , &amp;lt;INT hat&amp;gt; )
Description Returns the current position of the digital POV hat of the controller pad selected.
The return values are:
Constant - Value - Description JOY_HAT_CENTERED - 0 - The hat is centered. JOY_HAT_UP - 1 - The hat is moved up. JOY_HAT_RIGHT - 2 - The hat is moved right. JOY_HAT_DOWN - 4 - The hat is moved down.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/joy_name/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/joy_name/</guid><description>Syntax STRING joy_name ( &amp;lt;INT JoyID&amp;gt; )
Description Returns the name of the specified joystick. This is a string describing the specified joystick, mostly used for the brand and model of the joystick.
Parameters INT JoyID - The JoyID of the joystick.
Returns STRING : The name of the joystick.
Category:functions Category:Joystick Category:Mod_joy</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/joy_numaxes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/joy_numaxes/</guid><description>Syntax INT joy_numaxes ( [ &amp;lt;INT JoyID&amp;gt; ] )
Description Returns the number of axes on the specified joystick. If no joystick is specified, the number of axes on the currently selected joystick will be returned.
The JoyID is optional, if it is not present, the function uses the selected joystick. You can change the selected joystick with joy_select().
Also called joy_axes().
Parameters [INT JoyID] - The JoyID of the joystick.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/joy_numballs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/joy_numballs/</guid><description>Syntax INT joy_numballs ( [ &amp;lt;INT JoyID&amp;gt; ] )
Description Returns the number of balls on the specified joystick. If no joystick is specified, the number of balls on the currently selected joystick will be returned.
The JoyID is optional, if it is not present, the function uses the selected joystick. You can change the selected joystick with joy_select().
Parameters [INT JoyID] - The JoyID of the joystick.
Returns INT : The number of balls.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/joy_number/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/joy_number/</guid><description>Syntax INT joy_number ( )
Description Returns the number of joysticks present in the system.
Also called joy_numjoysticks(). The previous name number_joy() is deprecated.
Returns INT : The number of joysticks present in the system.
Category:functions Category:Joystick Category:Mod_joy</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/joy_numbuttons/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/joy_numbuttons/</guid><description>Syntax INT joy_numbuttons ( [ &amp;lt;INT JoyID&amp;gt; ] )
Description Returns the number of buttons on the specified joystick. If no joystick is specified, the number of buttons on the currently selected joystick will be returned.
The JoyID is optional, if it is not present, the function uses the selected joystick. You can change the selected joystick with joy_select().
Also called joy_buttons().
Parameters [INT JoyID] - The JoyID of the joystick.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/joy_numhats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/joy_numhats/</guid><description>Syntax INT joy_numhats ( [ &amp;lt;INT JoyID&amp;gt; ] )
Description Returns the number of hats on the specified joystick. If no joystick is specified, the number of hats on the currently selected joystick will be returned.
The JoyID is optional, if it is not present, the function uses the selected joystick. You can change the selected joystick with joy_select().
Parameters [INT JoyID] - The JoyID of the joystick.
Returns INT : The number of hats.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/joy_select/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/joy_select/</guid><description>Syntax INT joy_select ( &amp;lt;INT JoyID&amp;gt; )
Description Select the joystick with id equals to JoyID. The old name select_joy() is deprecated.
Parameters INT JoyID - The JoyID of the joystick.
Returns INT : The ID of the selected joystick number.
Category:functions Category:Joystick Category:Mod_joy</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/joystick/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/joystick/</guid><description>Description A joystick is a general term for not just actual joysticks. Joysticks can be, but are not limited to:
(actual) joysticks steering wheels gamepads controllers on consols GP2X main controls A joystick provides different controls for different purposes.
Input Axis An axis is an analogue input, used for input that should be precise or sensitive. Examples are the flight stick control of the joystick (an actual joystick), the steer of a steering wheel and the analogue control on a gamepad.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/joystick_constants/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/joystick_constants/</guid><description>Definition Joystick constants are constants used with joysticks.
List Constant - Value - Description JOY_HAT_CENTERED - 0 - The hat is centered. JOY_HAT_UP - 1 - The hat is moved up. JOY_HAT_RIGHT - 2 - The hat is moved right. JOY_HAT_DOWN - 4 - The hat is moved down. JOY_HAT_LEFT - 8 - The hat is moved left. JOY_HAT_RIGHTUP - 3 - The hat is moved right and up. JOY_HAT_RIGHTDOWN - 6 - The hat is moved right and down.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/key/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/key/</guid><description>Definition INT key( &amp;lt;INT scancode&amp;gt; )
Checks if a certain key is being pressed.
Parameters INT scancode - The scancode of the key to be checked.
Returns INT : true/false: Whether the key is being pressed.
Notes Take a look at the scancodes for a complete list.
Example Program input_test; Begin While( !key(_esc) ) delete_text(ALL_TEXT); if( key(_left) &amp;amp;&amp;amp; !key(_right) ) write(0,160,120,4, &amp;quot;LEFT&amp;quot;); end; if( key(_right) &amp;amp;&amp;amp; !key(_left) ) write(0,160,120,4, &amp;quot;RIGHT&amp;quot;); end; frame; End; exit(); End Used in example: delete_text(), write(), exit(), ALL_TEXT</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/keywords/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/keywords/</guid><description> Keywords are reserved words for a special purpose. For example the word &amp;lsquo;function&amp;rsquo; is reserved to declare a function, and cannot be used for any other purpose. Thus you the following declaration will be invalid:
Invalid Example 1 Function Function( ) Begin return; End Invalid Example 2 int function; float debug;</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/ksort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/ksort/</guid><description>Definition INT ksort ( &amp;lt;VARSPACE array&amp;gt; , &amp;lt;VARSPACE sort-variable&amp;gt; , [&amp;lt;INT datacount&amp;gt;] )
Sorts a certain array according to a sort-variable within the elements and by sorting a certain number of elements. By default the whole array is sorted.
If the array elements contain only one variable each or the first one is the sort-variable, sort() can be used. For more advanced sorting, look at quicksort().
Parameters VARSPACE array - The array to be sorted.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/language/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/language/</guid><description>List of pages about the PixTudio language.
The pages listed here are mostly about the syntax of the language. In the &amp;lsquo;general&amp;rsquo; category are pages describing how the language works, with all its different aspects.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/lcase/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/lcase/</guid><description>Definition STRING lcase ( &amp;lt;STRING str&amp;gt; )
Returns a string identical to a certain string, with the exception that all uppercase characters are replaced by their lowercase counterparts.
Parameters STRING str - The string in &amp;ldquo;normal&amp;rdquo;-form.
Returns STRING : The string in &amp;ldquo;lowercase&amp;rdquo;-form.
Category:functions Category:strings Category:mod_string</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/len/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/len/</guid><description>Definition INT len ( &amp;lt;STRING str&amp;gt; )
Returns the length, the number of characters, of a certain string.
Also called Strlen().
Parameters STRING str - The string of which the length will be returned.
Returns INT : The length of the specified string.
Category:functions Category:strings Category:mod_string</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/let_me_alone/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/let_me_alone/</guid><description>Definition INT let_me_alone ( )
Kills all processes except the calling one.
To kill only one process, use signal().
Returns INT : true
Example Const screen_width = 320; screen_height = 200; screen_depth = 8; End /** * Description * Generates an error. Puts the error in the console and stdout.txt and shows it onscreen * for certain time. Immediately kills all other processes and quits the program after a * certain time.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/libblit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/libblit/</guid><description>Up to Modules
Internal library for blitting.
Usage Category:modules Category:internal</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/libdraw/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/libdraw/</guid><description>Up to Modules
Internal library for drawing.
Usage Category:modules Category:internal</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/libfont/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/libfont/</guid><description>Up to Modules
Internal library for fonts.
Usage Category:modules Category:internal Category:libgrbase</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/libgrbase/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/libgrbase/</guid><description>Up to Modules
Internal library for certain graphical functionality.
Usage Category:modules Category:internal</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/libjoy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/libjoy/</guid><description>Up to Modules
Internal library for joystick support.
Usage Category:modules Category:internal Category:libsdlhandler</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/libkey/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/libkey/</guid><description>Up to Modules
Internal library for keyboard.
Usage Category:modules Category:internal Category:libsdlhandler</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/libmouse/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/libmouse/</guid><description>Up to Modules
Internal library for mouse.
Usage Category:modules Category:internal Category:libsdlhandler Category:libgrbase Category:libvideo Category:libblit</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/librender/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/librender/</guid><description>Up to Modules
Internal library for rendering.
Usage Category:modules Category:internal Category:libsdlhandler Category:libgrbase Category:libblit</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/libscroll/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/libscroll/</guid><description>Up to Modules
Internal library for scrolls.
Usage Category:modules Category:internal Category:libgrbase Category:libblit Category:librender Category:libvideo</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/libsdlhandler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/libsdlhandler/</guid><description>Up to Modules
Internal library for SDL events.
Usage Category:modules Category:internal</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/libtext/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/libtext/</guid><description>Up to Modules
Internal library for texts.
Usage Category:modules Category:internal Category:libgrbase Category:libblit Category:librender Category:libfont</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/libvideo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/libvideo/</guid><description>Up to Modules
Internal library for video.
Usage Category:modules Category:internal Category:libgrbase</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/libwm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/libwm/</guid><description>Up to Modules
Internal library for managing the window.
Usage Category:modules Category:internal Category:libsdlhandler</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/ln/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/ln/</guid><description>Up to Log.dll functions
Definition FLOAT ln ( &amp;lt;FLOAT n&amp;gt; )
Returns the natural logarithm of number n (logarithm with base ε (Euler)).
Parameters FLOAT n - The number that will be used for the logarithm.
Returns FLOAT : The natural logarithm of n.
Example Import &amp;quot;log.dll&amp;quot;; Global float logarithm=0.0; End Process main() Begin write_float(0,160,100,4,&amp;amp;logarithm); While(not(key(_ESC))) If (key(_1)) logarithm=ln(13.37); End Frame; End End Used in example: import, write_float(), key(), ln()</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/load/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/load/</guid><description>Definition INT load ( &amp;lt;STRING filename&amp;gt; , &amp;lt;VARSPACE data&amp;gt; )
Loads the data read from the specified file into the specified variable.
Parameters STRING filename - The name of the file to be loaded. VARSPACE data - The variable (of any datatype) in which the data read from the file will be loaded.
Returns INT : The number of bytes read from the file.
Notes To check whether a file exists before it is loaded, file_exists() can be used.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/load_song/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/load_song/</guid><description>Definition INT load_song ( &amp;lt;STRING filename&amp;gt;, [ &amp;lt;POINTER id&amp;gt;] )
Loads a song for later use with play_song().
There are multiple filetypes you can load using this function. Included are:
OGG Vorbis (.ogg). Good quality for songs and doesn&amp;rsquo;t take too much space (it&amp;rsquo;s similar to *.mp3). MIDI (.mid). Takes very low space, but it&amp;rsquo;s limited to samples of the soundcard. Modules (.xm, .it, .s3m, .mod). Like MIDI, but Modules also contain the samples themselves.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/load_wav/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/load_wav/</guid><description>Definition INT load_wav ( &amp;lt;STRING filename&amp;gt;, [ &amp;lt;POINTER id&amp;gt;] )
Loads a sound effect in the WAV format for later use with play_wav().
Parameters STRING filename - The WAV file to be loaded, including a possible path. POINTER id - Optional parameter, for loading a wav in the background.
Returns INT : WaveID
-2 - Waiting for the file to be loaded, see notes. -1 - There was an error loading the file.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/local/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/local/</guid><description> Syntax Local {local variables} End Description Local is a reserved word used to initiate the declaration of local variables. Terminating the declaration block with an End is needed when the Local is not used in conjunction with the main code of the Program.
For a list of predefined local variables, see this page.
Example Local // Declare local variables here End Process Main() Begin End Local // Declare local variables here End</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/local_variable/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/local_variable/</guid><description>category:general
Definition A local variable is a variable that is specific to a process in the same way as a public variable: they are both accessible from other places in the code than the process/function itself. However, unlike a public variable, when a local variable is declared, all following processes will have that local.
There&amp;rsquo;s also a number of predefined local variables.
To start the declaration of local variables, use Local.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/local_variables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/local_variables/</guid><description>category:variablecategories category:predefinedvariablecategories
Up to Variable Categories
A list of predefined local variables.
category=local variables mode=userformat columns=1 listseparators = ,\n* %TITLE%,, redirects = include ordermethod = titlewithoutnamespace noresultsheader = No local variables here yet. resultsfooter = \n%PAGES% local variables replaceintitle = /\\? /,_</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/log/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/log/</guid><description>Up to Log.dll functions
Definition FLOAT log ( &amp;lt;FLOAT n&amp;gt; , [&amp;lt;FLOAT b&amp;gt;] )
Returns a logarithm of number n with base b. If b is not specified, the number 10 will be used as base.
Parameters FLOAT n - The number that will be used for the logarithm. FLOAT base - The base that will be used for the logarithm.
Returns FLOAT : The logarithm of n.
Example Import &amp;quot;log.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/log2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/log2/</guid><description>Up to Log.dll functions
Definition FLOAT log2 ( &amp;lt;FLOAT n&amp;gt; )
Returns a logarithm of number n with base 2.
Parameters FLOAT n - The number that will be used for the logarithm.
Returns FLOAT : The logarithm of n with base 2.
Example Import &amp;quot;log.dll&amp;quot;; Global float logarithm=0.0; End Process main() Begin write_float(0,160,100,4,&amp;amp;logarithm); While(not(key(_esc))) If (key(_1)) logarithm=log2(1024); End Frame; End End Used in example: import, write_float(), key(), log2()</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/loops/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/loops/</guid><description>category:general
Loops LOOP-END, WHILE-END, REPEAT-UNTIL, FOR-END, FROM-END
Loops are used to create iterations in your code. The statements between these words will get repeated depending on a condition. There are several types of loops:
Loop &amp;hellip; End Loop // Statements End The statements will be repeated indefinitely. While &amp;hellip; End While(&amp;lt;condition&amp;gt;) // Statements End The statements will be repeated while condition is fulfilled. Repeat &amp;hellip; Until Repeat // Statements Until(&amp;lt;condition&amp;gt;) The statements will be repeated until condition is fulfilled.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/lpad/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/lpad/</guid><description>Definition STRING lpad( &amp;lt;STRING str&amp;gt; , &amp;lt;INT length&amp;gt; )
Returns the string str, padding (adding spaces to) the front of the string if needed to make str of length length. The original string will remain unchanged.
If length is smaller or equal to the length of str, the returned string is str.
Parameters STRING str - The string to pad (add spaces to). INT length - The minimal length of the returned string.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/main_page/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/main_page/</guid><description/></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/main_program/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/main_program/</guid><description>Definition Main program code is the code between Begin-End belonging to the program.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/making_dlls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/making_dlls/</guid><description>Setting up Source Before we start coding, download the latest Fenix Source here and the file fenixdll.def. Put the source somewhere appropriate, like *Fenix\Fenix 0.92a Source\*. Search for all *.c and *.h in that folder and put it into a new folder like *Fenix\Fenix 0.92a Includes\*, together with fenixdll.def.
MVC++ So we got MVC++ eh, let&amp;rsquo;s do this then.
Tools -&amp;gt; Options -&amp;gt; TAB: Directories. Show directories for: Include files.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/map/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/map/</guid><description>Definition Bennu bitmap file. A MAP file contains a simple and rectangular graphic of 1, 8, 16 or 32bpp. These files can be loaded and generated by using load_map and save_map functions respectively.
The main advantage of using MAP files instead of regular PNG files (or other more extended formats) is that the former stores not only bitmap data but also other information, e.g. Control Points data, which may be useful when programming with Bennu.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/map_block_copy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/map_block_copy/</guid><description>Definition INT map_block_copy ( &amp;lt;INT fileID&amp;gt; , &amp;lt;INT destinationGraphID&amp;gt; , &amp;lt;INT destinationX&amp;gt; , &amp;lt;INT destinationY&amp;gt; , &amp;lt;INT originGraphID&amp;gt; , &amp;lt;INT x&amp;gt; , &amp;lt;INT y&amp;gt; , &amp;lt;INT width&amp;gt; , &amp;lt;INT height&amp;gt;, &amp;lt;INT blitflags&amp;gt; )
Draws (blits) a rectangular block from one graphic onto another graphic.
If the entire graphic is to be blitted, map_put() or map_xput() can be used.
Parameters INT fileID - The fileID of the file that holds the destination and origin graphics.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/map_buffer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/map_buffer/</guid><description>Definition POINTER map_buffer ( &amp;lt;INT fileID&amp;gt; , &amp;lt;INT graphID&amp;gt; )
Get access to the memory buffer of the map. This function is usefull in combination with Memset(). This way you can manipulate the actual bytes of the map.
Parameters INT fileID - The file that holds the graph. INT graphID - The graph to get information from.
Returns POINTER : Pointer to the memory contents of the map.
Example In this example I&amp;rsquo;m going to demonstrate how you can manipulate the pixel buffer of the map.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/map_clear/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/map_clear/</guid><description>Definition INT map_clear ( &amp;lt;INT fileID&amp;gt; , &amp;lt;INT graphID&amp;gt; , &amp;lt;WORD color&amp;gt; )
Clears a certain graph to a certain color.
Parameters INT fileID - The file that holds the graphic. INT graphID - The graphic to clear. WORD color - The color used to clear.
Returns INT : true
Notes Instead of using map_clear() to clear the screen background, clear_screen() is recommended as it is a little bit faster.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/map_clone/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/map_clone/</guid><description>Definition INT map_clone ( &amp;lt;INT fileID&amp;gt; , &amp;lt;INT graphID&amp;gt; )
Clones a certain graphic and puts it in the system file.
Parameters INT fileID - The fileID of the file holding the graphic. INT graphID - The graphID of the graphic to be cloned.
Returns INT : GraphID
0 - Invalid graphic specified; &amp;gt;0 - The graphID of the clone graphic.
Errors Unsupported color depth - The specified graph has a not supported color depth.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/map_exists/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/map_exists/</guid><description>Syntax INT map_exists ( &amp;lt;INT fileID&amp;gt; , &amp;lt;INT graphID&amp;gt; )
Description Checks if a graphic exists in the specified File with the specified graphID.
Parameters INT fileID - The fileID of the file that holds the graphic (or not). INT graphID - The graphID.
Returns INT : Whether the graphic exists
false - The specified graphic does not exist. true - The specified graphic exists.
Category:functions Category:maps Category:mod_map</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/map_format_specification/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/map_format_specification/</guid><description>Format Specification This section describes the structure of a MAP file. It is not necessary to know these details to program games in Bennu, but they will be of help for those who want to develop external tools which are able to read or write MAP files.
A MAP file does not have compression. Bennu, however, supports transparently GZIP compression in files and usually MAP files are saved to disk compressed with GZIP.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/map_get_pixel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/map_get_pixel/</guid><description>Definition INT map_get_pixel ( &amp;lt;INT fileID&amp;gt; , &amp;lt;INT graphID&amp;gt; , &amp;lt;INT x&amp;gt; , &amp;lt;INT y&amp;gt; )
Returns the color on the specified graphic of the specified pixel.
Parameters INT fileID - The fileID of the file that holds the graphic. INT graphID - The graphID of the graphic to get the pixel from. INT x - The X-coordinate of the pixel the color is wanted. INT y - The Y-coordinate of the pixel the color is wanted.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/map_info/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/map_info/</guid><description>Definition INT map_info ( &amp;lt;INT fileID&amp;gt; , &amp;lt;INT graphID&amp;gt; , &amp;lt;INT infotype&amp;gt; )
Gets some information about the graph specified. This function is also known as Graphic_info() and Map_info_get().
Parameters INT fileID - The file that holds the graph. INT graphID - The graph to get information from. INT infotype - What type of information you want.
Returns INT : Returns the information you want.
If the specified graph was invalid it returns 0.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/map_info_get/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/map_info_get/</guid><description>Definition INT map_info_get ( &amp;lt;INT fileID&amp;gt; , &amp;lt;INT graphID&amp;gt; , &amp;lt;INT infotype&amp;gt; )
Gets some information about the graph specified. This function is also known as Graphic_info() and Map_info().
Parameters INT fileID - The file that holds the graph. INT graphID - The graph to get information from. INT infotype - What type of information you want.
Returns INT : Returns the information you want.
If the specified graph was invalid it returns 0.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/map_info_set/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/map_info_set/</guid><description>Definition INT map_info_set ( &amp;lt;INT fileID&amp;gt; , &amp;lt;INT graphID&amp;gt; , &amp;lt;INT info_type&amp;gt; , &amp;lt;INT value&amp;gt; )
Changes the x or y coordinate of the center pixel (controlpoint 0). This function is also known as Graphic_set().
Parameters INT fileID - The file that holds the graph. INT graphID - The graph to get information from. INT info_type - What type of information you want to change, see note. INT value - The new x or y coordinate of the center pixel.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/map_load/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/map_load/</guid><description>Definition INT map_load ( &amp;lt;STRING filename&amp;gt;, [ &amp;lt;POINTER id&amp;gt;] )
Creates a new graphic, using the specified MAP file as contents and puts it in the system file. Returns the graphID of the created graphic. The color depth of the created graphic will be the same as the loaded MAP file.
The previous name load_map() is deprecated.
Parameters STRING filename - The name of the MAP file to be loaded, including a possible path.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/map_name/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/map_name/</guid><description>Definition STRING map_name ( &amp;lt;INT fileID&amp;gt; , &amp;lt;INT graphID&amp;gt; )
Retrieves the name of an in-game graphic.
Parameters INT fileID - The fileID of the file that holds the graphic. INT graphID - The graphID of the graphic.
Returns STRING : Name of the graphic
Category:functions Category:maps Category:mod_map</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/map_new/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/map_new/</guid><description>Definition INT map_new ( &amp;lt;INT width&amp;gt; , &amp;lt;INT height&amp;gt; , &amp;lt;INT depth&amp;gt;, [ &amp;lt;INT flags&amp;gt; ] )
Creates a new graphic, sets the color of all pixels to 0 (transparent) and puts it in the system file.
The previous name new_map() is deprecated.
Parameters INT width - The width of the to be created graph in pixels. INT height - The height of the to be created graph in pixels.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/map_put/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/map_put/</guid><description>Syntax INT map_put ( &amp;lt;INT fileID&amp;gt; , &amp;lt;INT destinationGraphID&amp;gt; , &amp;lt;INT originGraphID&amp;gt; , &amp;lt;INT x&amp;gt; , &amp;lt;INT y&amp;gt; )
Description Draws (blits) a graph onto another graph.
If more advanced parameters are needed, map_xput() can be used. If a graph from one file needs to be drawn onto another graph in a different file, or a separate width and height scaling is needed, map_xputnp() can be used.
Parameters INT fileID - The fileID of the file that holds the graphics.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/map_put_pixel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/map_put_pixel/</guid><description>Definition INT map_put_pixel ( &amp;lt;INT fileID&amp;gt; , &amp;lt;INT graphID&amp;gt; , &amp;lt;INT x&amp;gt; , &amp;lt;INT y&amp;gt; , &amp;lt;INT color&amp;gt; )
Draws a single colored pixel on a graph.
Parameters INT fileID - The file that holds the graph. INT graphID - The graph to draw on. INT x - Where on the graph&amp;rsquo;s x-axis to put the pixel. INT y - Where on the graph&amp;rsquo;s y-axis to put the pixel. INT color - What color to draw.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/map_save/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/map_save/</guid><description>Definition INT map_save ( &amp;lt;INT fileID&amp;gt; , &amp;lt;INT graphID&amp;gt; , &amp;lt;STRING filename&amp;gt; )
Saves the specified graphic as filename with the format MAP.
The previous name save_map() is deprecated.
Parameters INT fileID - The fileID of the file that holds the graphic. INT graphID - The graphID of the graphic to unload. STRING filename - The name of the MAP file to be saved, including a possible path.
Returns INT : Successrate</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/map_set_name/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/map_set_name/</guid><description>Definition INT map_set_name ( &amp;lt;INT fileID&amp;gt; , &amp;lt;INT graphID&amp;gt; , &amp;lt;STRING name&amp;gt;)
Sets the name of a graphic in an FPG. Useful in combination with map_name() to retrieve names of files and save_fpg() to save any changed values.
Parameters INT fileID - The fileID of the file that holds the graphic. INT graphID - The graphID of the graphic. STRING name - The new name of the graphic specified.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/map_unload/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/map_unload/</guid><description>Definition INT map_unload ( &amp;lt;INT fileID&amp;gt; , &amp;lt;INT graphID&amp;gt; )
Frees the memory used by the specified graphic. The associated (fileID,graphID) combination is no longer valid afterwards.
Also called map_del(). The previous name unload_map is deprecated.
Parameters INT fileID - The fileID of the file that holds the graphic. INT graphID - The graphID of the graphic to unload.
Returns INT : Successrate
false - Invalid graphic. true - Graphic unloaded.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/map_xput/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/map_xput/</guid><description>Definition INT map_xput ( &amp;lt;INT fileID&amp;gt; , &amp;lt;INT destinationGraphID&amp;gt; , &amp;lt;INT originGraphID&amp;gt; , &amp;lt;INT x&amp;gt; , &amp;lt;INT y&amp;gt; , &amp;lt;INT angle&amp;gt; , &amp;lt;INT size&amp;gt; , &amp;lt;INT blitflags&amp;gt; )
Draws (blits) a graphic onto another graphic.
If the advanced parameters aren&amp;rsquo;t needed, map_put() can be used. If a graphic from one file needs to be drawn onto another graphic in a different file, or a separate width and height scaling is needed, map_xputnp() can be used.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/map_xputnp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/map_xputnp/</guid><description>Definition INT map_xputnp ( &amp;lt;INT destinationFileID&amp;gt; , &amp;lt;INT destinationGraphID&amp;gt; , &amp;lt;INT originFileID&amp;gt; , &amp;lt;INT originGraphID&amp;gt; , &amp;lt;INT x&amp;gt; , &amp;lt;INT y&amp;gt; , &amp;lt;INT angle&amp;gt; , &amp;lt;INT scale_x&amp;gt; , &amp;lt;INT scale_y&amp;gt; , &amp;lt;INT blitflags&amp;gt; )
Draws (blits) a graphic onto another graphic.
If the advanced parameters aren&amp;rsquo;t needed, map_put() or map_xput() can be used.
Parameters INT destinationFileID - The fileID of the file that holds the destination graphic. INT destinationGraphID - The graphID of the graphic to draw on.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/max_byte/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/max_byte/</guid><description>Definition CHAR MAX_BYTE = 255
The maximum integer value reachable with a byte (unsigned char).
See also MIN_BYTE.
Category:constants Category:internal</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/max_char/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/max_char/</guid><description>Definition CHAR MAX_CHAR = 255
The maximum integer value reachable with a char (byte).
See also MIN_CHAR.
Category:constants Category:internal</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/max_dword/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/max_dword/</guid><description>Definition DWORD MAX_DWORD = 4294967295
The maximum integer value reachable with a dword (unsigned integer).
See also MIN_DWORD.
Category:constants Category:internal</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/max_int/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/max_int/</guid><description>Definition INT MAX_INT = 2147483647
The maximum integer value reachable with an int.
See also MIN_INT.
Category:constants Category:internal</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/max_sbyte/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/max_sbyte/</guid><description>Definition CHAR MAX_SBYTE = 127
The maximum integer value reachable with a signed byte.
See also MIN_SBYTE.
Category:constants Category:internal</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/max_short/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/max_short/</guid><description>Definition SHORT MAX_SHORT = 32767
The maximum integer value reachable with a short (signed word).
See also MIN_SHORT.
Category:constants Category:internal</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/max_word/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/max_word/</guid><description>Definition WORD MAX_WORD = 65535
The maximum integer value reachable with a word (unsigned short).
See also MIN_WORD.
Category:constants Category:internal</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/memcmp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/memcmp/</guid><description>Definition INT memcmp ( &amp;lt;VOID POINTER ptr1&amp;gt; , &amp;lt;VOID POINTER ptr2&amp;gt; , &amp;lt;INT number&amp;gt; )
Compares the first number bytes of the block of memory pointed by ptr1 to the first number bytes pointed by ptr2, returning zero if they all match or a value different from zero representing which is greater if they do not.
Also called mem_cmp().
Parameters VOID POINTER ptr1 - Pointer to a block of memory VOID POINTER ptr2 - Pointer to a block of memory.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/memcopy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/memcopy/</guid><description>Syntax INT memcopy ( &amp;lt;VOID POINTER destination&amp;gt; , &amp;lt;VOID POINTER origin&amp;gt; , &amp;lt;INT size&amp;gt; )
Description Copies a certain number of bytes from one point in memory to another.
Difference between memmove() and memcopy() is that the first one can be used if the destination section and origin section overlap. With memcopy(), this can go wrong, though some systems make memcopy() safe too.
Also called mem_copy().
Parameters VOID POINTER destination - Pointer to the first byte of the destination.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/memmove/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/memmove/</guid><description>Definition INT memmove ( &amp;lt;VOID POINTER destination&amp;gt; , &amp;lt;VOID POINTER origin&amp;gt; , &amp;lt;INT size&amp;gt; )
Copies a certain number of bytes from one point in memory to another.
Difference between memmove() and memcopy() is that the first one can be used if the destination section and origin section overlap. With memcopy(), this can go wrong, though some systems make memcopy() safe too.
Also called mem_move().
Parameters VOID POINTER destination - Pointer to the first byte of the destination.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/memory_free/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/memory_free/</guid><description>Syntax INT memory_free ( )
Description Returns the free memory total in bytes.
Also called mem_available().
Returns INT : Free memory total in bytes.
Example import &amp;quot;mod_mem&amp;quot; import &amp;quot;mod_say&amp;quot; Process Main() Begin say(&amp;quot;Total memory: &amp;quot; + memory_total()); say(&amp;quot;Free memory: &amp;quot; + memory_free() ); End Used in example: say(), memory_total(), memory_free()
Category:functions Category:memory Category:mod_mem</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/memory_total/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/memory_total/</guid><description>Definition INT memory_total ( )
Returns the memory total in bytes.
Also called mem_total().
Returns INT : Memory total in bytes.
Example import &amp;quot;mod_mem&amp;quot; import &amp;quot;mod_say&amp;quot; Process Main() Begin say(&amp;quot;Total memory: &amp;quot; + memory_total()); say(&amp;quot;Free memory: &amp;quot; + memory_free() ); End Used in example: say(), memory_total(), memory_free()
Category:functions Category:memory Category:mod_mem</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/memset/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/memset/</guid><description>Syntax INT memset ( &amp;lt;VOID POINTER data&amp;gt; , &amp;lt;BYTE value&amp;gt; , &amp;lt;INT bytes&amp;gt; )
Description Sets all bytes in the specified memory block to the specified value.
Also called mem_set().
Parameters VOID POINTER data - Pointer to the block of bytes in memory BYTE value - Value to set all bytes to. INT bytes - Number of bytes to change the value of.
Returns INT : true
Example See alloc().</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/memseti/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/memseti/</guid><description>Syntax INT memseti ( &amp;lt;VOID POINTER data&amp;gt; , &amp;lt;INT value&amp;gt; , &amp;lt;INT ints&amp;gt; )
Description Sets all ints in the specified memory block to the specified value.
Also called mem_seti().
Parameters VOID POINTER data - Pointer to the block of ints in memory. INT value - Value to set all ints to. INT ints - Number of ints to change the value of.
Returns INT : true
Example See alloc().</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/memsetw/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/memsetw/</guid><description>Syntax INT memsetw ( &amp;lt;VOID POINTER data&amp;gt; , &amp;lt;WORD value&amp;gt; , &amp;lt;INT words&amp;gt; )
Description Sets all words in the specified memory block to the specified value.
Also called mem_setw().
Parameters VOID POINTER data - Pointer to the block of words in memory. WORD value - Value to set all words to. INT words - Number of words to change the value of.
Returns INT : true
Example See alloc().</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/min_byte/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/min_byte/</guid><description>Definition CHAR MIN_BYTE = 0
The minimum integer value reachable with a byte (unsigned char).
See also MAX_BYTE.
Category:constants Category:internal</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/min_char/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/min_char/</guid><description>Definition CHAR MIN_CHAR = 0
The minimum integer value reachable with a char (byte).
See also MAX_CHAR.
Category:constants Category:internal</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/min_dword/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/min_dword/</guid><description>Definition DWORD MIN_DWORD = 0
The minimum integer value reachable with a dword (unsigned integer).
See also MAX_DWORD.
Category:constants Category:internal</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/min_int/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/min_int/</guid><description>Definition INT MIN_INT = -2147483648
The minimum integer value reachable with an int.
See also MAX_INT.
Category:constants Category:internal</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/min_sbyte/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/min_sbyte/</guid><description>Definition CHAR MIN_SBYTE = -128
The minimum integer value reachable with a signed byte.
See also MAX_SBYTE.
Category:constants Category:internal</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/min_short/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/min_short/</guid><description>Definition SHORT MIN_SHORT = -32768
The minimum integer value reachable with a short (signed word).
See also MAX_SHORT.
Category:constants Category:internal</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/min_word/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/min_word/</guid><description>Definition WORD MIN_WORD = 0
The minimum integer value reachable with a word (unsigned short).
See also MAX_WORD.
Category:constants Category:internal</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/minimize/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/minimize/</guid><description>Definition INT minimize ( )
Iconifies/minimizes the window.
Returns INT : success
0 - If minimizing/iconification is not support or was refused by the window manager. !0 - Success.
Example import &amp;quot;mod_key&amp;quot; import &amp;quot;mod_wm&amp;quot; Process Main() Begin Repeat if(key(_M)) while(key(_M)) frame; end minimize(); end frame; Until(key(_ESC)||exit_status) End Used in example: key(), minimize(), exit_status
Category:functions Category:programinteraction Category:mod_wm</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/mkdir/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/mkdir/</guid><description>Definition INT mkdir ( &amp;lt;STRING directoryname&amp;gt; )
Creates a new directory in the current path of execution with a certain name.
Parameters STRING directoryname - The name of the directory to be created.
Returns INT : Success
0 (false) - Creating a new directory with the specified name failed. !0 (true) - Creating a new directory with the specified name succeeded.
Category:functions Category:files Category:mod_dir</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/mod_crypt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/mod_crypt/</guid><description>Up to Modules
Encryption/decryption module for the encryption and decryption of data.
Usage Category:modules</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/mod_debug/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/mod_debug/</guid><description>Up to Modules
Debug module. Adds the capacity to open the Bennu console.
Usage Category:modules Category:librender Category:libkey</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/mod_dir/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/mod_dir/</guid><description>Up to Modules
Directory module, adding control over the current working directory and the file system.
Usage Category:modules</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/mod_draw/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/mod_draw/</guid><description>Up to Modules
Primitive drawing module, adding drawing of primitive and pixels.
Usage Category:modules Category:libgrbase Category:librender Category:libdraw</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/mod_effects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/mod_effects/</guid><description>Up to Modules
Graphical effects module, adding effects applicable to graphics.
Usage Category:modules Category:libgrbase</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/mod_file/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/mod_file/</guid><description>Up to Modules
Files module, adding control over individual files (reading, writing, etc).
Usage Category:modules</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/mod_grproc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/mod_grproc/</guid><description>Up to Modules
Graphical processes module.
Usage Category:modules Category:libmouse Category:libgrbase Category:libvideo Category:librender Category:libblit</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/mod_joy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/mod_joy/</guid><description>Up to Modules
Joystick module.
Usage Category:modules Category:libjoy</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/mod_key/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/mod_key/</guid><description>Up to Modules
Keyboard module.
Usage Category:modules Category:libkey</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/mod_map/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/mod_map/</guid><description>Up to Modules
Maps module.
Usage Category:modules Category:libgrbase Category:libvideo Category:libblit Category:libfont</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/mod_math/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/mod_math/</guid><description>Up to Modules
Math module.
Usage Category:modules</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/mod_mem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/mod_mem/</guid><description>Up to Modules
Memory module.
Usage Category:modules</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/mod_mouse/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/mod_mouse/</guid><description>Up to Modules
Mouse module.
Usage Category:modules Category:libmouse</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/mod_path/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/mod_path/</guid><description>Up to Modules
Pathfind module.
Usage Category:modules Category:libgrbase</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/mod_proc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/mod_proc/</guid><description>Up to Modules
Process interaction and manipulation module.
Usage Category:modules</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/mod_rand/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/mod_rand/</guid><description>Up to Modules
Random number generator module.
Usage Category:modules</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/mod_regex/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/mod_regex/</guid><description>Up to Modules
Regular expressions module.
Usage Category:modules</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/mod_say/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/mod_say/</guid><description>Up to Modules
Say (printf) module.
Usage Category:modules</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/mod_screen/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/mod_screen/</guid><description>Up to Modules
Screen module.
Usage Category:modules Category:libgrbase Category:libvideo Category:libblit Category:librender</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/mod_scroll/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/mod_scroll/</guid><description>Up to Modules
Scroll module.
Usage Category:modules Category:libscroll</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/mod_sort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/mod_sort/</guid><description>Up to Modules
Sorting module.
Usage Category:modules</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/mod_sound/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/mod_sound/</guid><description>Up to Modules
Sound module.
Usage Category:modules</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/mod_string/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/mod_string/</guid><description>Up to Modules
String manipulation module.
Usage Category:modules</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/mod_sys/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/mod_sys/</guid><description>Up to Modules
System communication module.
Usage Category:modules</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/mod_text/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/mod_text/</guid><description>Up to Modules
Text module.
Usage Category:modules Category:libgrbase Category:libblit Category:libtext Category:libfont</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/mod_time/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/mod_time/</guid><description>Up to Modules
Time module.
Usage Category:modules</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/mod_timers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/mod_timers/</guid><description>Up to Modules
Timers module.
Usage Category:modules</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/mod_video/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/mod_video/</guid><description>Up to Modules
Video module.
Usage Category:modules Category:libgrbase Category:libvideo Category:librender</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/mod_wm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/mod_wm/</guid><description>Up to Modules
Window Manager module.
Usage Category:modules Category:libsdlhandler Category:libvideo Category:libwm</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/mode_is_ok/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/mode_is_ok/</guid><description>Definition INT mode_is_ok ( &amp;lt;INT width&amp;gt; , &amp;lt;INT height&amp;gt; , &amp;lt;INT depth&amp;gt;, &amp;lt;INT flags&amp;gt; )
Returns 0 if the requested mode is not supported under any bit depth,or returns the bits-per-pixel of the closest available mode with the given width, height and requested flags.
Parameters INT width - Width of the screen in pixels. INT height - Height of the screen in pixels. INT depth - Color depth of the screen.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/modules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/modules/</guid><description>Modules add extra functionality to PixTudio, as PixTudio on its own is just a language and a virtual machine. The default modules contain the basics you need to make a game: video, audio, input, etc. More advanced external libraries are available, like network and 3D rendering.
Enabling a module is easy, using import:
import &amp;quot;&amp;lt;modulename&amp;gt;&amp;quot; Some external libraries use a header (.INC) instead, so use include:
include &amp;quot;&amp;lt;includename&amp;gt;&amp;quot;</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/mouse/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/mouse/</guid><description>category:variables category:predefined category:global variables category:libmouse
Up to Global Variables
Definition Struct Mouse
Mouse is a global variable struct, containing information about the current state of the mouse. Also graphical settings can be configured to display a graphic following the mouse in a certain way.
Members Member name - Description INT x - The X-coordinate of the mouse. INT y - The Y-coordinate of the mouse. INT graph - The graphID of the graphic of the mouse.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/mouse_status/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/mouse_status/</guid><description>category:variables category:predefined category:global variables category:libwm
Up to Global Variables
Definition INT mouse_status
mouse_status is a predefined global variable, holding whether or not the mouse cursor is inside the Bennu window.
Value - Description false - The mouse cursor is outside the Bennu window. true - The mouse cursor is inside the Bennu window.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/move_draw/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/move_draw/</guid><description>Definition INT move_draw ( &amp;lt;INT DrawID&amp;gt; , &amp;lt;INT x&amp;gt; , &amp;lt;INT y&amp;gt; )
Moves a certain drawing on the screen. Only drawings drawn with a certain z value can be moved like this, as other ones are drawn on a graphic and thus cannot be moved.
Parameters INT DrawID - DrawID of the drawing to be moved. INT x - The new x coordinate of the drawing. INT y - The new y coordinate of the drawing.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/move_scroll/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/move_scroll/</guid><description>Definition INT Move_scroll ( &amp;lt;INT scrollnumber&amp;gt;)
The move_scroll function is a slighty more advanced function. It allow the scroll&amp;rsquo;s internal coordinates x0, y0, x1 and y1 of the scroll structure to be updated in a forcefull way. This gives great flexibility when multiple scroll windows are used.
For instance, in a situation where multiple scroll windows are active on screen, and one scroll is controlled by the main player, the other scrolls can be updated manually.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/move_text/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/move_text/</guid><description>Definition INT move_text ( &amp;lt;INT TextID&amp;gt; , &amp;lt;INT x&amp;gt; , &amp;lt;INT y&amp;gt;, &amp;lt;INT z&amp;gt;)
Moves an existing text to another place on the screen.
Parameters INT TextID - Identifier of the text you want to move. This identifier should have been appointed to a text earlier on. INT x - The new horizontal coordinate (of the control point) of your text. INT y - The new vertical coordinate (of the control point) of your text.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/move_window/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/move_window/</guid><description>Definition INT move_window ( &amp;lt;INT x&amp;gt; , &amp;lt;INT y&amp;gt; )
Moves the Bennu window so that the top left of the window is on the specified (x,y).
Also called Set window pos().
Parameters INT x - The new X coordinate of the top left of the window. INT y - The new Y coordinate of the top left of the window.
Returns INT : true
Category:functions Category:programinteraction Category:mod_wm</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/near_angle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/near_angle/</guid><description>Definition INT near_angle ( &amp;lt;INT angle&amp;gt; , &amp;lt;INT final angle&amp;gt; , &amp;lt;INT increment&amp;gt; )
Returns an angle closer to another angle, with the indicated increment. It is used for aiming the original angle and it gradually changes into the final angle. The increment controls the rate in wich the final angle is added or subtracted from the orginal angle. The returned angle will be ranging from 0 to 360000 (0-360º).</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/net_defines/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/net_defines/</guid><description>Up to Network.DLL
General | NET_MAX_MSG_LEN - Maximum number of bytes per message. (doesn&amp;rsquo;t really apply, ignore it) | NET_FPS - The frame percentage of the NET Loop. (default is frame;)
Connection Status codes | NET_STATUS_DISCONNECTING - -4 - The connection is being disconnected | NET_STATUS_DISCONNECTED - -2 - The connection is disconnected. | NET_STATUS_INACTIVE - 0 - (The connection is) inactive. | NET_STATUS_ACTIVE - 1 - (The connection is) active.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/net_errorcodes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/net_errorcodes/</guid><description>Up to Network.DLL
Here is a list of all the errorcodes regarding Network.DLL.
Catching errorcodes is very easy: just check if the return value is negative, then it is an error.
result = NET_Xxx(); if(result&amp;lt;0) say(&amp;quot;NET Error: &amp;quot; + NET_GetError(result)); else // success end Constant - Description NET_ERROR_NONE - No error. NET_ERROR_INITIALIZATION - Error during initialization. NET_ERROR_NOTINITIALIZED - Network.DLL not initialized. Depecrated. NET_ERROR_INVALIDADDRESS - Invalid IP address. Deprecated. NET_ERROR_RESOLVINGHOST - Could not resolve host.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/net_globals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/net_globals/</guid><description>Up to Network.DLL
Struct NET | INT Activity - true/false: whether there is an incoming message on a connection. READ ONLY | INT POINTER Incoming - The change of state of each connection. READ ONLY | INT POINTER Status - The status of each connection. READ ONLY | WORD MaxConnections - Maximum number of connections specified when NET_Init was called. READ ONLY | WORD MaxListenPorts - Maximum number of listenports specified when NET_Init was called.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/networkdllfunctions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/networkdllfunctions/</guid><description>Up to Network.DLL
Network.DLL functions!
category=networkdllfunctions category=functions replaceintitle = /\\? /,_ mode=userformat listseparators = ,\n* %TITLE%(),, resultsfooter = \n%PAGES% Network.DLL functions noresultsheader = No functions in here yet.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/null/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/null/</guid><description>Description NULL is a pointer, pointing to nothing. In programming it points to 0x00000000, or just plain 0.
The following check is the same as checking if a pointer variable is NULL:
if(my_pointer) end In which my_pointer is a pointer variable.
Constant - Value - Description NULL - 0 - 0x00000000, pointing to nothing.
Category:constants Category:internal</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/operators/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/operators/</guid><description>List of Operators General Operator - Description Type - Get the ProcessTypeID of a ProcessType or define a new datatype. See Type. . (period) - Element access. &amp;lt;struct&amp;gt;.&amp;lt;element&amp;gt;. In case of a struct array, if no arrayelement is specified, it points to [0] (see example).
Maths Operator - Description + - Addition. - - Deduction * - Multiplication. / - Division. % - Modulus (remainder).
Logic Operator - Description &amp;amp;&amp;amp; - AND.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/os_codes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/os_codes/</guid><description>Definition OS codes are codes used for the global variable os_id, to specify the current platform BGDI is running on.
OS codes 1000 and above are used for unofficial ports and may not be available in the official Bennu version.
List Constant - Value - Description OS_WIN32 - 0 - Microsoft Windows OS_LINUX - 1 - Linux OS_BEOS - 2 - Be Operating System OS_MACOS - 3 - Mac Operating System OS_GP32 - 4 - GP32 handheld console OS_DC - 5 - Sega Dreamcast OS_BSD - 6 - Berkeley Software Distribution OS_GP2X - 7 - GP2X handheld console OS_GP2X_WIZ - 8 - GP2X WIZ handheld console OS_CAANOO - 9 - GP2X Caanoo handheld console OS_DINGUX_A320 - 10 - Dingoo A320 handheld console OS_WII - 1000 - Nintendo Wii console (through Wii homebrew) OS_PSP - 1001 - PlayStation Portable OS_IOS - 1002 - iOS OS_ANDROID - 1003 - Android (under development)</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/os_id/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/os_id/</guid><description>category:variables category:predefined category:global variables category:internal
Up to Global Variables
Definition INT os_id
os_id is a predefined global variable, holding the OS code of the operating system Bennu is currently running on while executing. Default is -1.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/pal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/pal/</guid><description>Definition General palette file.
File Format Head Palette Range of Colours Category:filetypes</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/pal_clone/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/pal_clone/</guid><description>Syntax INT pal_clone ( &amp;lt;INT paletteID&amp;gt; )
Description This function is creates a copy of palette loaded with Pal_load(). It can be used for the functions Pal_get(), Pal_set() and Pal_map_assign().
Parameters INT paletteID - The handle of the color palette loaded with Pal_load().
Returns INT : Error.
0 - Error: could not open file; corrupt or truncated file; file doesn&amp;rsquo;t contain palette information. 1 - The identifier of the palette.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/pal_get/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/pal_get/</guid><description>Syntax INT pal_get ( [&amp;lt;INT paletteID&amp;gt;] , &amp;lt;INT first_color&amp;gt; , &amp;lt;INT num_colors&amp;gt; , &amp;lt;POINTER palette_data&amp;gt;)
Description This function is used in conjuction with Pal_set() to load palette data that was loaded with Pal_load() into an array, for later use with Pal_set(). This palette can also be loaded from MAP&amp;rsquo;s, FPG&amp;rsquo;s, FNT&amp;rsquo;s and other image formats, provided that they are 8 bit images.
Also called colors_get(). The previous name get_colors() is deprecated.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/pal_load/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/pal_load/</guid><description>Syntax INT pal_load ( &amp;lt;STRING filename&amp;gt;, [ &amp;lt;POINTER id&amp;gt;] )
Description Loads a color palette from a file.
The current palette is switched to the loaded one. Note that one can load a palette from an 8bit FPG or MAP file (the remaining graphic data will not be loaded) or a PAL file.
The previous name load_pal() is deprecated.
Parameters STRING filename - The filename of the file that you wish to load the palette from (including extension and possible path).</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/pal_map_assign/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/pal_map_assign/</guid><description>Syntax INT pal_map_assign ( &amp;lt;INT fileID&amp;gt; , &amp;lt;INT graphID&amp;gt;, &amp;lt;INT paletteID&amp;gt; )
Description Changes the color palette of an 8 bit (256 color) graphic, with the palette that is loaded with Pal_load(). This palette can also be loaded from MAP&amp;rsquo;s, FPG&amp;rsquo;s, FNT&amp;rsquo;s and other image formats, provided that they are 8 bit images. Unlike Pal_set(), the change is immediately visible.
Parameters INT fileID - The fileID of the graphic(s), i.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/pal_map_getid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/pal_map_getid/</guid><description>Syntax INT pal_map_getid ( &amp;lt;INT fileID&amp;gt; , &amp;lt;INT graphID&amp;gt; )
Description This function returns the identification code of the palette of a specific graphic.
Parameters INT fileID - The handle of the file. INT graphID - The handle of the graph.
Returns INT : Error/status.
0 - Error: could not open file; corrupt or truncated file; file doesn&amp;rsquo;t contain palette information. id - The identifier of the palette.
Example /* original bennupack example FROM: \2 Medium\fenix test\palettes\rbear8-5.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/pal_map_remove/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/pal_map_remove/</guid><description>Syntax INT pal_map_remove ( &amp;lt;INT fileID&amp;gt; , &amp;lt;INT graphID&amp;gt; )
Description Removes the color palette that assigned with Pal_map_assign(). It is basically an undo function for color palette changes.
Parameters INT fileID - The fileID of the graphic(s), i.e. 0 for the systemfile, or the id code of an FPG archive. INT graphID - The graphic (or mapcode).
Returns INT : Status/Error.
0 - Error: could not open file; corrupt or truncated file; file doesn&amp;rsquo;t contain palette information.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/pal_new/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/pal_new/</guid><description>Syntax INT pal_new ()
Description This function creates a new palette in memory and returns the handle, for later use by other palette functions such as Pal_save(), Pal_get(), Pal_set, etc. When you&amp;rsquo;re done, you can free the memory with Pal_unload().
The previous name new_pal() is deprecated.
Returns INT : Status.
id - The identification code of the memory area for the newly created palette.
Category:functions Category:palettes Category:mod_map</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/pal_refresh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/pal_refresh/</guid><description>Syntax INT pal_refresh ( [&amp;lt;INT paletteID&amp;gt;] )
Description Refreshes the color palette after a call of Pal_set(), to the make color change visible.
Parameters INT paletteID - The handle of the color palette loaded with Pal_load(), and used by Pal_get and Pal_set(). The parameter is optional.
Returns INT : Status.
1 - The status.
Example /* original bennupack example FROM: \2 Medium\fenix test\palettes\rbear8-2.prg (from bomberlink) */ /* this program demonstrates the use of the functions: pal_load(), pal_clone(), pal_get(), */ /* pal_map_assign(), pal_set() and pal_refresh().</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/pal_save/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/pal_save/</guid><description>Syntax INT pal_save ( &amp;lt;STRING filename&amp;gt;, [&amp;lt;INT paletteID&amp;gt;] )
Description This function saves a palette to a file on disk in the PAL format. When the second parameter is omitted, the system palette is saved, otherwise the palette data indicate with the paletteID. Concluding from this, is that it&amp;rsquo;s possible to load multiple palettes in bennu and assign an unique identifier to them and save them to a file later.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/pal_set/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/pal_set/</guid><description>Syntax INT pal_set ( [&amp;lt;INT paletteID&amp;gt;] , &amp;lt;INT first_color&amp;gt; , &amp;lt;INT num_colors&amp;gt; , &amp;lt;POINTER palette_data&amp;gt;)
Description Changes the color palette of an 8 bit (256 color) graphic, with the palette that is loaded with Pal_load(). This palette can also be loaded from MAP&amp;rsquo;s, FPG&amp;rsquo;s, FNT&amp;rsquo;s and other image formats, provided that they are 8 bit images. Unlike Pal_map_assign(), the change is not immediately visible, and the function Pal_refresh() has to be called afterwards to make the change visible.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/pal_unload/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/pal_unload/</guid><description>Syntax INT pal_unload ( &amp;lt;INT paletteID&amp;gt; )
Description This function unloads the palette, thus freeing the memory it ouccupies.
Also called pal_del(). The previous name unload_pal() is deprecated.
Parameters INT paletteID - The handle of the palette that was loaded with Load_pal().
Returns INT : Status.
1 - Operation completed.
Category:functions Category:palettes Category:mod_map</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/palette/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/palette/</guid><description>What are palettes Color palettes are used in 8 bit indexed images and can have up to 256 colors. It&amp;rsquo;s called indexing because a palette is a list with r,g,b values denoted with an index number (wich is the color value). This is a cornerstone of functions like Map_get_pixel().
More information: Indexed color, Color look-up tables
The system palette uint8_t default_palette[] = { 0, 0, 0, /* Color 0 */ 16, 16, 16, /* Color 1 */ 32, 32, 32, /* Color 2 */ 48, 48, 48, /* Color 3 */ 64, 64, 64, /* Color 4 */ 84, 84, 84, /* Color 5 */ 100, 100, 100, /* Color 6 */ 116, 116, 116, /* Color 7 */ 132, 132, 132, /* Color 8 */ 148, 148, 148, /* Color 9 */ 168, 168, 168, /* Color 10 */ 184, 184, 184, /* Color 11 */ 200, 200, 200, /* Color 12 */ 216, 216, 216, /* Color 13 */ 232, 232, 232, /* Color 14 */ 252, 252, 252, /* Color 15 */ 40, 0, 0, /* Color 16 */ 72, 0, 0, /* Color 17 */ 108, 0, 0, /* Color 18 */ 144, 0, 0, /* Color 19 */ 180, 0, 0, /* Color 20 */ 216, 0, 0, /* Color 21 */ 252, 0, 0, /* Color 22 */ 252, 32, 0, /* Color 23 */ 252, 64, 0, /* Color 24 */ 252, 96, 0, /* Color 25 */ 252, 128, 0, /* Color 26 */ 252, 160, 0, /* Color 27 */ 252, 180, 56, /* Color 28 */ 252, 200, 112, /* Color 29 */ 252, 220, 168, /* Color 30 */ 252, 240, 224, /* Color 31 */ 0, 40, 0, /* Color 32 */ 0, 60, 0, /* Color 33 */ 0, 84, 0, /* Color 34 */ 0, 108, 0, /* Color 35 */ 0, 132, 0, /* Color 36 */ 0, 156, 0, /* Color 37 */ 0, 180, 0, /* Color 38 */ 0, 204, 0, /* Color 39 */ 0, 228, 0, /* Color 40 */ 0, 252, 0, /* Color 41 */ 48, 252, 32, /* Color 42 */ 96, 252, 64, /* Color 43 */ 144, 252, 96, /* Color 44 */ 192, 252, 132, /* Color 45 */ 216, 252, 176, /* Color 46 */ 240, 252, 220, /* Color 47 */ 0, 0, 40, /* Color 48 */ 0, 0, 72, /* Color 49 */ 0, 0, 104, /* Color 50 */ 0, 0, 140, /* Color 51 */ 0, 0, 172, /* Color 52 */ 0, 0, 208, /* Color 53 */ 0, 0, 252, /* Color 54 */ 0, 48, 252, /* Color 55 */ 0, 100, 252, /* Color 56 */ 0, 148, 252, /* Color 57 */ 0, 200, 252, /* Color 58 */ 0, 252, 252, /* Color 59 */ 56, 252, 252, /* Color 60 */ 112, 252, 252, /* Color 61 */ 168, 252, 252, /* Color 62 */ 224, 252, 252, /* Color 63 */ 28, 28, 0, /* Color 64 */ 52, 52, 0, /* Color 65 */ 76, 76, 0, /* Color 66 */ 100, 100, 0, /* Color 67 */ 124, 124, 0, /* Color 68 */ 152, 152, 0, /* Color 69 */ 176, 176, 0, /* Color 70 */ 200, 200, 0, /* Color 71 */ 224, 224, 0, /* Color 72 */ 252, 252, 0, /* Color 73 */ 252, 252, 36, /* Color 74 */ 252, 252, 72, /* Color 75 */ 252, 252, 108, /* Color 76 */ 252, 252, 144, /* Color 77 */ 252, 252, 180, /* Color 78 */ 252, 252, 220, /* Color 79 */ 28, 0, 28, /* Color 80 */ 52, 0, 52, /* Color 81 */ 76, 0, 76, /* Color 82 */ 100, 0, 100, /* Color 83 */ 124, 0, 124, /* Color 84 */ 152, 0, 152, /* Color 85 */ 176, 0, 176, /* Color 86 */ 200, 0, 200, /* Color 87 */ 224, 0, 224, /* Color 88 */ 252, 0, 252, /* Color 89 */ 252, 36, 252, /* Color 90 */ 252, 72, 252, /* Color 91 */ 252, 112, 252, /* Color 92 */ 252, 148, 252, /* Color 93 */ 252, 184, 252, /* Color 94 */ 252, 224, 252, /* Color 95 */ 0, 20, 20, /* Color 96 */ 0, 40, 40, /* Color 97 */ 0, 60, 60, /* Color 98 */ 0, 80, 80, /* Color 99 */ 0, 104, 100, /* Color 100 */ 0, 124, 120, /* Color 101 */ 0, 144, 144, /* Color 102 */ 0, 164, 164, /* Color 103 */ 0, 188, 184, /* Color 104 */ 0, 208, 204, /* Color 105 */ 0, 228, 224, /* Color 106 */ 0, 252, 248, /* Color 107 */ 44, 252, 248, /* Color 108 */ 92, 252, 248, /* Color 109 */ 140, 252, 248, /* Color 110 */ 188, 252, 248, /* Color 111 */ 24, 12, 0, /* Color 112 */ 44, 24, 0, /* Color 113 */ 64, 36, 0, /* Color 114 */ 84, 48, 0, /* Color 115 */ 108, 60, 0, /* Color 116 */ 128, 72, 0, /* Color 117 */ 148, 84, 0, /* Color 118 */ 168, 96, 0, /* Color 119 */ 192, 112, 0, /* Color 120 */ 196, 128, 28, /* Color 121 */ 204, 144, 60, /* Color 122 */ 212, 160, 92, /* Color 123 */ 216, 180, 120, /* Color 124 */ 224, 196, 152, /* Color 125 */ 232, 212, 184, /* Color 126 */ 240, 232, 216, /* Color 127 */ 24, 12, 12, /* Color 128 */ 40, 20, 20, /* Color 129 */ 60, 32, 32, /* Color 130 */ 80, 44, 44, /* Color 131 */ 96, 52, 52, /* Color 132 */ 116, 64, 64, /* Color 133 */ 136, 76, 76, /* Color 134 */ 156, 88, 88, /* Color 135 */ 176, 104, 104, /* Color 136 */ 196, 120, 120, /* Color 137 */ 216, 136, 136, /* Color 138 */ 240, 152, 152, /* Color 139 */ 240, 168, 168, /* Color 140 */ 244, 188, 188, /* Color 141 */ 244, 204, 204, /* Color 142 */ 248, 224, 224, /* Color 143 */ 24, 20, 12, /* Color 144 */ 44, 36, 24, /* Color 145 */ 68, 52, 36, /* Color 146 */ 88, 72, 48, /* Color 147 */ 112, 88, 60, /* Color 148 */ 132, 104, 72, /* Color 149 */ 156, 124, 88, /* Color 150 */ 172, 140, 100, /* Color 151 */ 188, 156, 112, /* Color 152 */ 204, 176, 124, /* Color 153 */ 220, 192, 136, /* Color 154 */ 240, 212, 152, /* Color 155 */ 240, 216, 168, /* Color 156 */ 244, 224, 188, /* Color 157 */ 244, 232, 204, /* Color 158 */ 248, 240, 224, /* Color 159 */ 32, 8, 0, /* Color 160 */ 60, 16, 0, /* Color 161 */ 88, 28, 0, /* Color 162 */ 120, 36, 0, /* Color 163 */ 148, 48, 0, /* Color 164 */ 176, 56, 0, /* Color 165 */ 208, 68, 0, /* Color 166 */ 216, 88, 0, /* Color 167 */ 224, 112, 0, /* Color 168 */ 232, 136, 0, /* Color 169 */ 240, 160, 0, /* Color 170 */ 252, 184, 0, /* Color 171 */ 252, 200, 56, /* Color 172 */ 252, 216, 112, /* Color 173 */ 252, 232, 168, /* Color 174 */ 252, 252, 224, /* Color 175 */ 20, 12, 12, /* Color 176 */ 36, 24, 24, /* Color 177 */ 56, 36, 36, /* Color 178 */ 72, 48, 48, /* Color 179 */ 92, 64, 64, /* Color 180 */ 108, 76, 76, /* Color 181 */ 128, 88, 88, /* Color 182 */ 144, 100, 100, /* Color 183 */ 164, 116, 116, /* Color 184 */ 172, 132, 132, /* Color 185 */ 184, 148, 148, /* Color 186 */ 192, 164, 164, /* Color 187 */ 204, 180, 180, /* Color 188 */ 212, 196, 196, /* Color 189 */ 224, 212, 212, /* Color 190 */ 236, 232, 232, /* Color 191 */ 12, 20, 12, /* Color 192 */ 24, 36, 24, /* Color 193 */ 36, 56, 36, /* Color 194 */ 48, 72, 48, /* Color 195 */ 64, 92, 64, /* Color 196 */ 76, 108, 76, /* Color 197 */ 88, 128, 88, /* Color 198 */ 100, 144, 100, /* Color 199 */ 116, 164, 116, /* Color 200 */ 132, 172, 132, /* Color 201 */ 148, 184, 148, /* Color 202 */ 164, 192, 164, /* Color 203 */ 180, 204, 180, /* Color 204 */ 196, 212, 196, /* Color 205 */ 212, 224, 212, /* Color 206 */ 232, 236, 232, /* Color 207 */ 12, 12, 16, /* Color 208 */ 24, 24, 32, /* Color 209 */ 36, 36, 48, /* Color 210 */ 48, 48, 64, /* Color 211 */ 64, 64, 80, /* Color 212 */ 76, 76, 96, /* Color 213 */ 88, 88, 112, /* Color 214 */ 100, 100, 128, /* Color 215 */ 116, 116, 148, /* Color 216 */ 132, 132, 160, /* Color 217 */ 148, 148, 172, /* Color 218 */ 164, 164, 184, /* Color 219 */ 180, 180, 196, /* Color 220 */ 196, 196, 208, /* Color 221 */ 212, 212, 220, /* Color 222 */ 232, 232, 236, /* Color 223 */ 40, 0, 0, /* Color 224 */ 80, 0, 0, /* Color 225 */ 124, 0, 0, /* Color 226 */ 164, 0, 0, /* Color 227 */ 208, 0, 0, /* Color 228 */ 252, 0, 0, /* Color 229 */ 252, 40, 0, /* Color 230 */ 252, 84, 0, /* Color 231 */ 252, 124, 0, /* Color 232 */ 252, 168, 0, /* Color 233 */ 252, 208, 0, /* Color 234 */ 252, 252, 0, /* Color 235 */ 252, 252, 44, /* Color 236 */ 252, 252, 92, /* Color 237 */ 252, 252, 140, /* Color 238 */ 252, 252, 188, /* Color 239 */ 0, 0, 0, /* Color 240 */ 0, 0, 88, /* Color 241 */ 0, 0, 128, /* Color 242 */ 0, 0, 168, /* Color 243 */ 0, 0, 208, /* Color 244 */ 0, 0, 248, /* Color 245 */ 40, 0, 248, /* Color 246 */ 84, 0, 248, /* Color 247 */ 124, 0, 248, /* Color 248 */ 168, 0, 248, /* Color 249 */ 208, 0, 248, /* Color 250 */ 252, 0, 252, /* Color 251 */ 252, 52, 252, /* Color 252 */ 252, 108, 252, /* Color 253 */ 252, 164, 252, /* Color 254 */ 252, 220, 252 /* Color 255 */ } ; Category:palettes Category:mod_map</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/palette_convert/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/palette_convert/</guid><description>Syntax INT palette_convert ( &amp;lt;INT fileID&amp;gt; , &amp;lt;INT graphID&amp;gt; , &amp;lt;POINTER palette_data&amp;gt; )
Description This function changes the colormap of an image, but does not change the color index values it self. That is, that the individual pixels will keep their color indexes, but the r,g,b values in the palette are modified. This function requires an Array of maximum 255 bytes (or integers), to store the palette values. The array is accessed with the Offset operator.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/palette_roll/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/palette_roll/</guid><description>Syntax INT palette_roll ( &amp;lt;INT start_color&amp;gt; , &amp;lt;INT end_color&amp;gt; , &amp;lt;INT increment&amp;gt; )
Description Cycles the colors in the palette by rotating them. This function shifts colors between the range specified by the start color and the end color, at a given increment. This can be used to create a very old school waterfall animation effect. This technique is called color cycling. It is a very memory efficient way of doing these kinds of animations, since only one bitmap is used and the effect is achieved by cycling through a specific range of colors.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/parameter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/parameter/</guid><description>Description A parameter is the variable and its value inside the definition of a function or process that is received from the calling environment. The value passed on when calling the function or process is called an argument.
If a parameter is named like a local variable, the value passed to it will be assigned to that local variable for a process. This means that passed arguments will modify the local variable.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/path_find/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/path_find/</guid><description>Syntax &amp;rdquo;&amp;lsquo;INT &amp;ldquo;&amp;rsquo; path_find ( &amp;lt;INT fileID&amp;gt; , &amp;lt;INT graphID&amp;gt; , &amp;lt;INT start_x&amp;gt; , &amp;lt;INT start_y&amp;gt; , &amp;lt;INT dest_x&amp;gt; , &amp;lt;INT dest_y&amp;gt; , &amp;lt;INT options&amp;gt;)
Description The pathfinding function is based on the A* algorithm with a heuristic value. It uses a logic map with a maze, a start position and an end position. The logic map is an 8 bit image (with palette), preferably with only 2 colors, black and white, wich indicates the walls and the paths.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/path_getxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/path_getxy/</guid><description>Syntax &amp;rdquo;&amp;lsquo;INT &amp;ldquo;&amp;rsquo; path_getxy ( &amp;lt;POINTER x&amp;gt;, &amp;lt;POINTER y&amp;gt; )
Description This function gets a node and returns a 1 when there&amp;rsquo;s still a point left, or a 0 when there are no more points. This function requires a two dimensional Array to work on. The arguments should accessed with the Offset operator. The function is typically used inside a loop. The pathfinding in bennu is based on the A* algorithm.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/path_wall/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/path_wall/</guid><description>Syntax &amp;rdquo;&amp;lsquo;INT &amp;ldquo;&amp;rsquo; path_wall ( &amp;lt;INT wall_color&amp;gt; )
Description This function changes the wall color. Normally, Path_find() only uses two colors, i.e. black and white. By using this function before making a call to Path_find, Path_find will use the color indiated by this function instead. The color may not be a zero, bcause that is usually black. &amp;ldquo;For more information, see the http://bennugd.svn.sourceforge.net/viewvc/bennugd/modules/mod_path/mod_path.c?revision=277&amp;amp;view=markup bennu mod_path.c sourcecode. &amp;ldquo;
Parameters INT Color - The palette color.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/pathfind_flags/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/pathfind_flags/</guid><description>Definition Pathfind flags are used in path_find(), to specify optional functionality.
List Constant - Value - Description PF_NODIAG - 1 - Prohibit the pathfinding from using diagonal paths. PF_REVERSE - 2 - Return the path found in reverse order.
Category:constantcategories</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/pause_song/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/pause_song/</guid><description>Definition INT pause_song ( )
Pauses the currently playing song.
Notes The song pauses immediately, but can be resumed later by calling resume_song(). For a nicer effect, you may want to fade the music out before pausing. See fade_music_off().
Returns INT : Error.
-1 - Error: sound inactive. 0 - No error.
Example program music_example; global my_song; playing; paused; faded_in; v; begin set_mode(640,480,16); my_song=load_song(&amp;quot;beat.ogg&amp;quot;); write(0,320,30,4,&amp;quot;Use the keyboard to control the music playback.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/pause_wav/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/pause_wav/</guid><description>Definition INT pause_wav (INT &amp;lt; channel &amp;gt; )
Pauses the currently playing wave channel.
Notes The sound channel pauses immediately, but can be resumed later by calling resume_wav(). For a nicer effect, you may want to fade the music out before pausing. See set_channel_volume().
Parameters INT channel - The WAV sound channel.
Returns INT : Error.
-1 - Error: sound channel inactive. 0 - No error.
Example // import modules IMPORT &amp;quot;mod_say&amp;quot;; IMPORT &amp;quot;mod_debug&amp;quot;; IMPORT &amp;quot;mod_proc&amp;quot;; IMPORT &amp;quot;mod_key&amp;quot;; IMPORT &amp;quot;mod_sound&amp;quot;; GLOBAL int wav; int channel; PROCESS main(); BEGIN wav=load_wav(&amp;quot;wav.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/pcx_load/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/pcx_load/</guid><description>Definition INT pcx_load ( &amp;lt;STRING filename&amp;gt;, [ &amp;lt;POINTER id&amp;gt;] )
Creates a new graphic, using the specified pcx file as contents and puts it in the system file. Returns the graphID of the created graphic. The color depth of the created graphic will be the same as the loaded pcx file.
The previous name load_pcx() is deprecated.
Parameters STRING filename - The name of the pcx file to be loaded, including a possible path.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/pi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/pi/</guid><description>Definition INT PI == 180000
The equivalent to the mathematical pi (3.14159265&amp;hellip;), in thousandths of a degree. It can be used to define angles, like assigning one to the local variable angle, or passing one to the function xadvance().
Example angle = PI/2; // 90000 (90 degrees) xadvance(-PI/4,10); // -45000 (-45 degrees) Category:constants Category:math Category:mod_math</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/pixel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/pixel/</guid><description>A Pixel is the smallest unit that can be addressed on the screen. On Windows and Linux, a custom screen resolutions is 1024x768 pixels. This means, the entire screen is created from 1024 columns and 768 rows, summing up to 786432 single pixels.
Pixel 0,0 would be in the top left corner, Pixel 512,382 would be one of the four pixels in the center of the screen and Pixel 1023,767 would be the bottom right.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/play_song/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/play_song/</guid><description>Definition INT play_song ( &amp;lt;INT songID&amp;gt; , &amp;lt;INT repeats&amp;gt; )
Plays a song.
Parameters INT songID - SongID of the song loaded previously with load_song(). INT repeats - Number of times to repeat the song. Use -1 for an infinite loop.
Returns INT : Error.
-1 - Error: sound inactive; mixer error; invalid songID. 0 - No error.
Errors Sound inactive - The sound is inactive. Invalid songID - The songID was invalid.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/play_wav/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/play_wav/</guid><description>Definition INT play_wav ( &amp;lt;INT waveID&amp;gt; , &amp;lt;INT repeats&amp;gt; , [&amp;lt;INT channel&amp;gt;] )
Plays a sound effect previously loaded with load_wav().
Parameters INT waveID - The WaveID of the sound effect to be played. INT repeats - Number of times to repeat the sound effect. Use -1 for an infinite loop. [INT channel] - The sound channel the sound effect is to be played on (-1 for any, default).</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/png/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/png/</guid><description>Definition Portable Network Graphics. A filetype to hold an image with lossless compression.
See also png_load() png_save() Category:filetypes</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/png_load/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/png_load/</guid><description>Definition INT png_load ( &amp;lt;STRING filename&amp;gt;, [ &amp;lt;POINTER id&amp;gt;] )
Creates a new graphic, using the specified PNG file as contents and puts it in the system file. Returns the graphID of the created graphic. The color depth of the created graphic will be the same as the loaded PNG file.
The previous name load_png() is deprecated.
Parameters STRING filename - The name of the PNG file to be loaded, including a possible path.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/png_save/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/png_save/</guid><description>Definition INT png_save ( &amp;lt;INT fileID&amp;gt; , &amp;lt;INT graphID&amp;gt; , &amp;lt;STRING filename&amp;gt; )
Saves the specified graphic as filename with the format PNG.
The previous name save_png() is deprecated.
Parameters INT fileID - The fileID of the file that holds the graphic. INT graphID - The graphID of the graphic to save. STRING filename - The name of the PNG file to be saved, including a possible path.
Returns INT : Successrate</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/point_get/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/point_get/</guid><description>Definition INT get_point ( &amp;lt;INT fileID&amp;gt; , &amp;lt;INT graphID&amp;gt; , &amp;lt;INT controlpointID&amp;gt; , &amp;lt;INT POINTER x&amp;gt;, &amp;lt;INT POINTER y&amp;gt;)
Allows you to obtain a control point of a particular graph.
Any graph can contain up to 1000 control points (from 0 to 999). Control point 0 is the center of the graphic. This function allows you to know the location of any control point belonging to any graph.
To set a control point, use set_point() or, for only the center of a graph, set_center().</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/point_set/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/point_set/</guid><description>Definition INT point_set ( &amp;lt;INT fileID&amp;gt; , &amp;lt;INT graphID&amp;gt; , &amp;lt;INT controlpointID&amp;gt; , &amp;lt;INT x&amp;gt;, &amp;lt;INT y&amp;gt;)
Allows you to set a control point of a particular graphic.
Any graph can contain up to 1000 control points (from 0 to 999). Control point 0 is the center of the graphic. This function allows you to set the location of any control point belonging to any graph. The coordinates are relative to the upper left corner of the graphic.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/pointer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/pointer/</guid><description>Syntax Declaration of a pointer:
{datatype} POINTER {pointername}; Assignment of a value to the location pointed to:
POINTER {pointername} = {value}; Concept Pointers, are used to point to a location in memory. It uses 32 bits (4 bytes) so it can map 4GB of memory into bytes. Pointers can point to any datatype: ints, shorts, strings or even usermade datatypes.
However, using a struct pointer my_pointer is pointless, because the compiler has no knowledge of the elements inside the struct pointing to, since it doesn&amp;rsquo;t know which struct is meant, so this is invalid.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/porting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/porting/</guid><description>This is a general guide for getting your Bennu game onto your chosen system. At the time of writing this stable ports and porting processes exist for these OS or platforms:
Windows Linux OS X (Intel) Android iOS Starting Out Instructions on compiling PixTudio here</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/pow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/pow/</guid><description>Definition FLOAT pow ( &amp;lt;FLOAT base&amp;gt; , &amp;lt;FLOAT power&amp;gt; )
Returns base to the power of power (base\^power).
Parameters FLOAT base - The base. FLOAT power - The power.
Returns FLOAT : base to the power of power (base\^power).
Example Program powerful; Global float value1; int value2; Begin write_float(0,0, 0,0,&amp;amp;value1); write_int (0,0,10,0,&amp;amp;value2); value1 = pow(2.3,4.6); value2 = pow(2 ,3 ); Repeat frame; Until(key(_ESC)) End Used in example: write_float(), write_int(), pow(), key()</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/precompiler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/precompiler/</guid><description> category:general category:precompiler
Definition The precompiler is for executing commands before the actual compiling. This can be useful for many things:
Defining words as other words or values Defining functions as a list of statements Protecting codefiles from being included multiple times Enable whole sections of code with one define See the examples for more.
A list of precompiler statements:
#define #ifdef #ifndef #endif #else #if</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/precompiler_define/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/precompiler_define/</guid><description>category:precompiler
Definition #define []
Defines what to define as what it will be. This means that after this line, all *what to define*s will be &amp;ldquo;replaced&amp;rdquo; by what it will be.
You can also create &amp;ldquo;functions&amp;rdquo; with this, even with parameters. The call to this &amp;ldquo;function&amp;rdquo;, including parameters, will be replaced by the what it will be section, with the parameters replaced by the arguments.
Example Basic statements In the following example, we&amp;rsquo;ll show it is possible to define words as &amp;ldquo;being&amp;rdquo; basic statements.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/precompiler_else/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/precompiler_else/</guid><description> category:precompiler
Definition #else
#else is used in the following precompiler statements:
#ifdef #ifndef #if</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/precompiler_endif/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/precompiler_endif/</guid><description> category:precompiler
Definition #endif
#endif is used to end the following precompiler statements:
#ifdef #ifndef #if</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/precompiler_if/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/precompiler_if/</guid><description>category:precompiler
Definition #if [&amp;rdquo;&amp;rsquo;#else ]
#endif
Checks if what to check is true. If it is, the code in if block will be compiled. If it isn&amp;rsquo;t, the code in else block will be compiled or when there is no else block, the compiler will continue after #endif.
Example Consider a define to set the framepercentage in a certain process. Now for some reason you might want to just have a frame; compiled when that define is set to 100.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/precompiler_ifdef/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/precompiler_ifdef/</guid><description>category:precompiler
Definition #ifdef [&amp;rdquo;&amp;rsquo;#else ]
#endif
Checks if what to check was previously defined in the code. If it is, the code in if block will be compiled. If it isn&amp;rsquo;t, the code in else block will be compiled or when there is no else block, the compiler will continue after #endif.
Example Here we will be able to choose whether to support a certain function with the precompiler:</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/precompiler_ifndef/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/precompiler_ifndef/</guid><description>category:precompiler
Definition #ifndef [&amp;rdquo;&amp;rsquo;#else ]
#endif
Checks if what to check was previously defined in the code. If it isn&amp;rsquo;t, the code in if block will be compiled. If it is, the code in else block will be compiled or when there is no else block, the compiler will continue after #endif.
It is the opposite of #ifdef.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/predefined_graphcodes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/predefined_graphcodes/</guid><description>Definition Predefined graphcodes can be used as GraphID&amp;rsquo;s in some cases.
Functions using graphics is the most common case.
List Constant - Value - Description BACKGROUND - 0 - The graphic of the background (local variable graph of a process won&amp;rsquo;t work with this). SCREEN - -1 - The graphic of the screen (its center is (0,0)).
Category:constantcategories</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/prg/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/prg/</guid><description>Definition Bennu program file, containing main code.
Category:filetypes</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/priority/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/priority/</guid><description>category:variables category:predefined category:local variables category:internal
Up to Local Variables
Definition INT priority = 0
priority is a predefined local variable, holding the priority of the process; default is 0.
Using this priority, the order of process-execution can be influenced, because processes with a higher priority are executed before processes with a lower priority.
Example import &amp;quot;mod_say&amp;quot; import &amp;quot;mod_proc&amp;quot; import &amp;quot;mod_timers&amp;quot; Process A() Begin priority = 0; // Default Loop say(&amp;quot;[&amp;quot; + timer[0] + &amp;quot;] &amp;quot; + &amp;quot;A&amp;quot;); frame(100000000); // This is very high because Bennu runs without limiter here End End Process main() Private int f=0; Begin priority = 1; // Set to higher priority than A A(); Repeat f++; say(&amp;quot;[&amp;quot; + timer[0] + &amp;quot;] &amp;quot; + &amp;quot;Main&amp;quot;); frame(100000000); // This is very high because Bennu runs without limiter here Until(f==5) OnExit let_me_alone(); End Used in example: say(), let_me_alone(), timer, priority, frame</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/private/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/private/</guid><description> Syntax Private {private variables} End Description Private is a reserved word used to initiate the declaration of private variables. Terminating the declaration block with an End is not necessary, but is possible. Parameters of a function or process will be considered a private variable with the initiated value of the passed argument.
Example Process My_Process(); Public Private // Declare private variables here Begin End</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/private_variable/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/private_variable/</guid><description>category:variablecategories category:general
Definition A private variable is a variable that is specific to a process or function. Unlike a public variable, it can only be accessed from the process or function it was declared for.
To start the declaration of private variables, use Private.
Example Function int SomeFunction() Private int i,j; // declare private ints i and j String strtemp; // declare private string strtemp Begin // ... return 0; End Used in example: Function, Private, Begin, End</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/process/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/process/</guid><description>Syntax Process &amp;lt;name&amp;gt; ( [ &amp;lt;parameters&amp;gt; ] ) [ Public [ &amp;lt;public variables&amp;gt; ] ] [ Private [ &amp;lt;private variables&amp;gt; ] ] Begin [ &amp;lt;main code&amp;gt; ] [OnExit [ &amp;lt;OnExit code&amp;gt; ] ] End Description Process is a reserved word used to start the code of a process. If name is Main, that process will be started at the start of the program.
A process is a subroutine to which one or more of the following apply:</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/process_statuscodes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/process_statuscodes/</guid><description>Definition Process statuscodes are status codes used for the local variable Reserved.status, to specify the current status of a process.
List Constant - Value - Description STATUS_DEAD - 0 - The process is dead. STATUS_KILLED - 1 - The process is killed. STATUS_RUNNING - 2 - The process is running. STATUS_SLEEPING - 3 - The process is sleeping. STATUS_FROZEN - 4 - The process is frozen. STATUS_WAITING - 7 - The process is waiting.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/processtypeid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/processtypeid/</guid><description>Definition A ProcessTypeID is a unique identification code, for a processType. A ProcessTypeID is smaller than 65536 (2\^16).
Example Kill all SpaceShip()s (see process):
Begin signal(type SpaceShip,s_kill); End signal() signals all processes of processType SpaceShip the signal to die. This is done by using the constant s_kill as the signal.
Category:general</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/program/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/program/</guid><description>Syntax Program {programname}; Description Program is a reserved word used to begin your program. It&amp;rsquo;s not needed to start a program with it.
It should be noted that this is for backwards compatibility only, because it doesn&amp;rsquo;t actually do anything.
Example Program example; // Name this program &amp;quot;example&amp;quot;, which doesn&#39;t really matter Process Main() // This process is started when the program is started Begin End When the End of the main code is reached, the program exits, if there are no processes alive anymore, which is logical, as PixTudio quits when there are no processes running and Main is a process as well.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/public/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/public/</guid><description> Syntax Public {public variables} End Description Public is a reserved word used to initiate the declaration of public variables. Terminating the declaration block with an End is not necessary, but is possible.
Example Process My_Process(); Public // Declare public variables here Private Begin End</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/public_variable/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/public_variable/</guid><description>category:variablecategories category:general
Definition A public variable is a variable that is specific to a process or function in the same way as a private variable. Unlike a private variable, however, a public variable can be accessed from the rest of the program, by use of the ProcessID of that process. This ProcessID must be stored in a variable of type ProcessName. It is like a local variable, but just for one ProcessType instead of for all.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/put/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/put/</guid><description>Definition INT put ( &amp;lt;INT fileID&amp;gt; , &amp;lt;INT graphID&amp;gt; , &amp;lt;INT x&amp;gt; , &amp;lt;INT y&amp;gt; )
Draws (blits) a graph onto the background.
For more advanced blitting, see:
xput() map_put() map_xput() map_xputnp() Parameters INT fileID - The file that holds the graph. INT graphID - The graph to draw with. INT x - Where on the background&amp;rsquo;s x-axis to put the graph. INT y - Where on the background&amp;rsquo;s y-axis to put the graph.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/put_pixel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/put_pixel/</guid><description>Definition INT put_pixel ( &amp;lt;INT x&amp;gt; , &amp;lt;INT y&amp;gt; , &amp;lt;INT color&amp;gt; )
Draws a single colored pixel on the background. Is equivalent to map_put_pixel ( 0, 0, x, y, color ).
Parameters INT x - Where on the background&amp;rsquo;s x-axis to put the pixel. INT y - Where on the background&amp;rsquo;s y-axis to put the pixel. INT color - What color to draw.
Returns INT : true
Example import &amp;quot;mod_video&amp;quot; import &amp;quot;mod_map&amp;quot; import &amp;quot;mod_wm&amp;quot; import &amp;quot;mod_draw&amp;quot; import &amp;quot;mod_rand&amp;quot;; Process Main() Private int i; int direction; end Begin // Set the mode to 16bit and some res set_mode(320,200,16); // Create a blue-ish square map graph = new_map(20,20,16); map_clear(0,graph,rgb(50,100,150)); y=100; x=10; // Puts 100 yellow-ish pixels in random places in the background for(i=0; i&amp;lt;100; i++) put_pixel(rand(0,320),rand(0,200),rgb(255,255,55)); end Repeat x=x+direction; if (x&amp;gt;=310) direction=-3; end if (x&amp;lt;=10) direction=3; end frame; Until(exit_status) End Used in example: set_mode(), new_map(), map_clear(), rand(), put_pixel()</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/quicksort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/quicksort/</guid><description>Definition INT quicksort ( &amp;lt;VOID POINTER array&amp;gt; , &amp;lt;INT elementsize&amp;gt; , &amp;lt;INT elements&amp;gt; , &amp;lt;INT dataoffset&amp;gt; , &amp;lt;BYTE datasize&amp;gt; , &amp;lt;BYTE datatype&amp;gt; )
Sorts an array by the Quicksort ordering algorithm.
This function is very handy for user defined types for elements in which a sort-variable is present. For simple arrays or arrays in which the first variable is the sort-variable, sort() can be used. For arrays in which the sort-variable is a String, ksort() can be used.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/rand/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/rand/</guid><description>Definition INT rand ( &amp;lt;INT lowerlimit&amp;gt; , &amp;lt;INT upperlimit&amp;gt; )
Returns a random number, ranging from a certain lower limit to a certain upper limit. The limits are within the range.
Make sure the difference between lowerlimit and upperlimit does not exceed 32767 (2\^15-1). If that is needed, the function rand2() below can be used.
Parameters INT lowerlimit - The lower limit for the random value. INT upperlimit - The upper limit for the random value.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/rand_seed/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/rand_seed/</guid><description>Definition INT rand_seed ( &amp;lt;INT seed&amp;gt; )
Seeds the random generator, used in rand().
This is useful for synchronizing the random generator on multiple machines, as when the same seed is used, calls to rand() with the same limits will return values in the same order on all the machines.
To reset the seeding to its original state, meaning the state before any call to rand() or rand_seed(), set seed to 1.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/readwrite_modes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/readwrite_modes/</guid><description>Description Readwrite modes are used to specify the mode of reading/writing of a file, by passing one of them to the function fopen() as the parameter flags.
List Constant - Value - Description O_READ - 0 - Read only. O_READWRITE - 1 - Read and write. Also called O_RDWR. O_WRITE - 2 - Write only. O_ZREAD - 3 - Read using Z compression. O_ZWRITE - 4 - Write using Z compression.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/realloc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/realloc/</guid><description>Syntax VOID POINTER realloc ( &amp;lt;VOID POINTER data&amp;gt; , &amp;lt;INT size&amp;gt; )
Description Resizes the given block of memory.
It allocates a new block of memory, copying the old data. If the new size is smaller than the old size, the last part of the data is lost. If the new size of the block of memory requires movement of the block, the old memory block is freed.
Also called mem_realloc().</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/regex/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/regex/</guid><description>Syntax INT regex ( &amp;lt;STRING pattern&amp;gt; , &amp;lt;STRING string&amp;gt; )
Description Match a regular expresion to the given string. Regular expressions are very powerfull, and allow to do complex pattern searches in texts. You can read about the wealth of posibilities here. Please note that regular expresion synthax is quite cryptic and difficult in general. Some things can be achieved in easier way with string functions like Find(), Len(), Substr() and glob().</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/regex_reg/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/regex_reg/</guid><description>category:variables category:predefined category:global variables category:regular expression category:mod_regex
Up to Global Variables
Definition STRING[15] regex_reg
Regex_reg is a global variable, holding 16 strings. It holds matches when the functions Regex() and Regex_replace() are used.
Examples // import modules IMPORT &amp;quot;mod_say&amp;quot;; IMPORT &amp;quot;mod_debug&amp;quot;; IMPORT &amp;quot;mod_regex&amp;quot;; GLOBAL string sourcetext=&amp;quot;It&#39;s raining cat&#39;s and dogs&amp;quot;; string searchtext=&amp;quot;cat&amp;quot;; // the search pattern int status; PROCESS main(); BEGIN // print the joined string say(&amp;quot;&amp;quot;); // looking for the position of the word &amp;quot;cat&amp;quot; status=regex(searchtext,sourcetext); say(&amp;quot;match found at: &amp;quot;+status); say(&amp;quot;&amp;quot;); // the last character of a line.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/regex_replace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/regex_replace/</guid><description>Syntax STRING regex_replace ( &amp;lt;STRING pattern&amp;gt; , &amp;lt;STRING string&amp;gt; , &amp;lt;STRING replacement&amp;gt; )
Description Match a regular expresion to the given string. For each match, substitute it with the given replacement. \0 - \9 escape sequences are accepted in the replacement. Regular expressions are very powerfull, and allow to do complex pattern searches in texts. You can read about the wealth of posibilities here.
Matches are stored into the predefined global array Regex_reg.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/region/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/region/</guid><description>category:General category:variables category:predefined category:local variables category:librender
Up to Local Variables
Definition Local variable INT region = 0
Region is a predefined local variable. Region holds the RegionID of the region in which the process&amp;lsquo; graphic should only be displayed in. By default this is region 0, the whole screen.
The graphic of the process is only displayed in its region, even if the x and y coordinates are outside of the region, the part inside the region will still be displayed.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/region_define/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/region_define/</guid><description>Definition INT region_define ( &amp;lt;INT regionID&amp;gt; , &amp;lt;INT x&amp;gt; , &amp;lt;INT y&amp;gt; , &amp;lt;INT width&amp;gt; , &amp;lt;INT height&amp;gt; )
Defines the boundaries of a region.
There are 32 regions, range 0..31. Region 0 is always the whole screen and cannot be changed. Defining regions can be useful for the function out_region(), the local variable region and using them with scrolls.
Also called define_region().
Parameters INT regionID - The regionID of the region to define.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/region_out/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/region_out/</guid><description>Definition INT out_region ( &amp;lt;INT processID&amp;gt; , &amp;lt;INT regionID&amp;gt; )
Checks if the specified process is completely outside of the specified region.
The check is not pixel perfect, but uses the bounding box of the process.
Also called out_region().
Parameters INT processID - The processID of the process to check. INT regionID - The regionID of the region to check with.
Returns INT : true/false: whether the process is completely outside the region.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/regionid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/regionid/</guid><description>Definition RegionID
A RegionID is an identifier associated with a certain region.
Category:general</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/regular_expression/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/regular_expression/</guid><description>Regular expressions can be used for a lot of text processing things, like finding matches, replacing texts, splitting and joining strings. The syntax is quite complex, but it packs a lot of sophistication in just 4 functions.
Bennu has 4 functions anvailible: Split(), Join(), Regex() and Regex_replace(). They are very usefull in combination with the file and string functions, such as glob(), fgets(), fputs(), find() and Len(). With some creativity you can create text based spreadsheet formats or search and replace texts.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/render_flags/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/render_flags/</guid><description>Definition Render flags are bit flags used to specify the mode of rendering, by passing them to the function set_mode() as the flags parameter. Multiple render flags can be specified using &amp;ldquo;|&amp;rdquo; (pipe character) for separation.
See also graph_modes.
List Constant - Value - Description MODE_WINDOW - 0 - Enables window view. MODE_2XSCALE - 256 - Doubles the resolution. Edges get smoothed using the scale2x algorithm. MODE_FULLSCREEN - 512 - Enables fullscreen view.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/reserve_channels/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/reserve_channels/</guid><description>Definition INT reserve_channels ( &amp;lt;INT num_channels&amp;gt; )
This functions reserves the indicated number of sound channels from the default sound mixing setup. This is usefull if you want to create groups of sound channels, so that you can devide them for different tasks. When you indicate a 0, all reservations are removed. The channels are reserved starting from channel 0 to num_channels -1. Normally SDL_mixer starts without any channels reserved.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/reserved/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/reserved/</guid><description>category:variables category:predefined category:local variables category:internal
Up to Local Variables
Definition Struct Reserved
Reserved is a local variable struct, containing information that is reserved for Bennu&amp;rsquo;s internals. However, sometimes you may wish to use certain members of it. Using in the sense of reading only, do not under any circumstances alter their values, unless you know what you are doing.
If it&amp;rsquo;s not documented what these members do, their use is reasonably limited.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/resolution/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/resolution/</guid><description>category:variables category:predefined category:librender
Up to Local Variables
Definition Local variable INT resolution = 0
Resolution is used to alter the precision of the position of processes on screen; the level of precision is defined by the value of resolution.
This simulating of fractions in positions is useful for calculations or animations in need of a high precision in order to work properly. It causes the coordinates of all processes to be interpreted as being multiplied by the value of the local variable resolution, associated with that process.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/resolution_modes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/resolution_modes/</guid><description>Definition Resolution modes are used to specify the resolution, by passing one of them to the global variable scale_resolution or the outdated version of the function set_mode() as the mode parameter.
List Constant - Value - Resolution M320X200 - 3200200 - 320 x 200 M320X240 - 3200240 - 320 x 240 M320X400 - 3200400 - 320 x 400 M360X240 - 3600240 - 360 x 240 M376X282 - 3760282 - 376 x 282 M400X300 - 4000300 - 400 x 300 M512X384 - 5120384 - 512 x 384 M640X400 - 6400400 - 640 x 400 M640X480 - 6400480 - 640 x 480 M800X600 - 8000600 - 800 x 600 M1024X768 - 10240768 - 1024 x 768 M1280X1024 - 12801024 - 1280 x 1024</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/restore_modes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/restore_modes/</guid><description>Definition Restore modes are used to define the type of restoration, needed to be applied to the screen background, by assigning them to the global variable restore_type. This influences if and how the background is restored after each frame.
List Constant - Value - Description NO_RESTORE - -1 - The background won&amp;rsquo;t be restored (i.e. redrawn). PARTIAL_RESTORE - 0 - The background will be restored in areas where graphics have been painted or text written (default).</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/restore_type/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/restore_type/</guid><description>category:variables category:predefined category:global variables category:librender
Up to Global Variables
Definition INT restore_type = PARTIAL_RESTORE
Restore_type is a global variable, holding the current restore_mode. The mode can be changed by assigning a different mode to the variable. Default is PARTIAL_RESTORE.
See also dump_type.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/resume_song/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/resume_song/</guid><description>Definition INT resume_song ( )
Resumes a song, after it has been paused with the function pause_song().
Returns INT : Error.
-1 - Error: sound inactive. 0 - No error.
Notes The song will instantly start playing again with this function. For a nicer effect, you may want to fade the music in as you resume it. See fade_music_in().
Example program music_example; global my_song; playing; paused; faded_in; v; begin set_mode(640,480,16); my_song=load_song(&amp;quot;beat.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/resume_wav/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/resume_wav/</guid><description>Definition INT resume_wav (INT &amp;lt; channel &amp;gt; )
Resumes the currently paused wave channel, that was paused by Pause_wav().
Parameters INT channel - The WAV sound channel.
Returns INT : Error.
-1 - Error: sound inactive. 0 - No error.
Example // import modules IMPORT &amp;quot;mod_say&amp;quot;; IMPORT &amp;quot;mod_debug&amp;quot;; IMPORT &amp;quot;mod_proc&amp;quot;; IMPORT &amp;quot;mod_key&amp;quot;; IMPORT &amp;quot;mod_sound&amp;quot;; GLOBAL int wav; int channel; PROCESS main(); BEGIN wav=load_wav(&amp;quot;wav.wav&amp;quot;); say(&amp;quot;Test pause_wav...&amp;quot;); say(&amp;quot;ENTER = Pause Sound...&amp;quot;); say(&amp;quot;Press ESC to quit.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/return/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/return/</guid><description>Definition Return {value}; Return is a reserved word used to return a value in a function. The returned value must be of the datatype specified as the returndatatype (see Function). By default, the returntype of a process or function is an int. When this statement is reached, the function in which it resides will stop execution and return the specified value. If a value was not specified, the ProcessID will be returned.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/reverse_stereo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/reverse_stereo/</guid><description>Definition INT reverse_stero ( &amp;lt;INT channel&amp;gt; , &amp;lt;INT flip&amp;gt;)
This function swaps the stereo of the indicated sound channel.
Parameters INT channels - The channel of wich it&amp;rsquo;s stereo is to be reversed. INT flip - The flip, (0 = normal , 1 = reverse).
Returns INT : Status.
0 - Ok. -1 - There is an error.
Category:functions Category:sound Category:mod_sound</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/rgb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/rgb/</guid><description>Syntax DWORD rgb ( &amp;lt;BYTE red&amp;gt; , &amp;lt;BYTE green&amp;gt; , &amp;lt;BYTE blue&amp;gt; , [&amp;lt;INT depth&amp;gt;] )
Description Finds the single color in the current color mode closest to the combined red, green, and blue values specified. In 32bit mode, the alpha is set to 255.
Equal to [[rgba]](&#39;&#39;red&#39;&#39;,&#39;&#39;green&#39;&#39;,&#39;&#39;blue&#39;&#39;,255)
Parameters BYTE red - Level of red in the desired color from 0 to 255. BYTE green - Level of green in the desired color from 0 to 255.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/rgb_get/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/rgb_get/</guid><description>Syntax INT rgb_get ( &amp;lt;INT pixel_color &amp;gt; , &amp;lt;POINTER red&amp;gt; , &amp;lt;POINTER green&amp;gt; , &amp;lt;POINTER blue&amp;gt; , [&amp;lt;INT depth&amp;gt;] )
Description Get access to the memory sections of the color components, these can be accessed with the Offset operator.
The previous get_rgb() is deprecated.
Parameters INT pixel_color - The color value of a pixel . POINTER red - Pointer to the level of red in the desired color from 0 to 255.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/rgba/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/rgba/</guid><description>Syntax DWORD rgba ( &amp;lt;BYTE red&amp;gt; , &amp;lt;BYTE green&amp;gt; , &amp;lt;BYTE blue&amp;gt;, &amp;lt;BYTE alpha&amp;gt; , [&amp;lt;INT depth&amp;gt;] )
Description Finds the single color in the current color mode closest to the combined red, green, blue and alpha values specified. This function is useful in 32 bpp modes.
Parameters BYTE red - Level of red in the desired color from 0 to 255. BYTE green - Level of green in the desired color from 0 to 255.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/rgba_get/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/rgba_get/</guid><description>Syntax DWORD rgba_get ( &amp;lt;INT pixel_color &amp;gt; , &amp;lt;POINTER red&amp;gt; , &amp;lt;POINTER green&amp;gt; , &amp;lt;POINTER blue&amp;gt; , &amp;lt;POINTER alpha&amp;gt; , [&amp;lt;INT depth&amp;gt;] )
Description Get access to the memory sections of the color components, these can be accessed with the Offset operator.
The previous name Get_rgba() is deprecated.
Parameters INT pixel_color - The color value of a pixel . POINTER red - Pointer to the level of red in the desired color from 0 to 255.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/rgbscale/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/rgbscale/</guid><description>Definition INT rgbscale ( &amp;lt;INT fileID&amp;gt; , &amp;lt;INT graphID&amp;gt; , &amp;lt;FLOAT r&amp;gt; , &amp;lt;FLOAT g&amp;gt; , &amp;lt;FLOAT b&amp;gt; )
This will convert the specified graphic by using the specified color as a reference. The converted graphic will have only the specified color and lighter/darker colors; see notes for the details.
Parameters INT fileID - The fileID of the file that holds the graphics. INT graphID - The graphID of the graphic to convert.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/rm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/rm/</guid><description>Definition INT rm ( &amp;lt;STRING filename&amp;gt; )
Removes (deletes) the file specified with filename.
Parameters STRING filename - The name of the file to be removed (deleted).
Returns INT : Success
0 (false) - Removing the file with the specified name failed. !0 (true) - Removing the file with the specified name succeeded.
Category:functions Category:files Category:mod_dir</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/rmdir/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/rmdir/</guid><description>Definition INT rmdir ( &amp;lt;STRING directoryname&amp;gt; )
Removes (deletes) the directory in the current path of execution with a certain name.
Parameters STRING directoryname - The name of the directory to be removed (deleted).
Returns INT : Success
0 (false) - Removing the directory with the specified name failed. !0 (true) - Removing the directory with the specified name succeeded.
Category:functions Category:files Category:mod_dir</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/rpad/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/rpad/</guid><description>Definition STRING rpad( &amp;lt;STRING str&amp;gt; , &amp;lt;INT length&amp;gt; )
Returns the string str, padding (adding spaces to) the back of the string if needed to make str of length length. The original string will remain unchanged.
If length is smaller or equal to the length of str, the returned string is str.
Parameters STRING str - The string to pad (add spaces to). INT length - The minimal length of the returned string.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/save/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/save/</guid><description>Definition INT save ( &amp;lt;STRING filename&amp;gt; , &amp;lt;VARSPACE data&amp;gt; )
Saves the data from the specified variable to the specified file.
Parameters STRING filename - The name of the file that will be saved. VARSPACE data - The variable (of any datatype) that will be saved in a file.
Returns INT : The number of bytes written to the file.
Notes Attempting to use &amp;ldquo;?&amp;rdquo;,&amp;rdquo;*&amp;rdquo;,&amp;rdquo;&amp;lt;&amp;rdquo;,&amp;rdquo;&amp;gt;&amp;rdquo; or &amp;ldquo;|&amp;rdquo; in a filename will result in no file at all on Windows, while using &amp;ldquo;:&amp;rdquo; in a filename results in everything from the &amp;ldquo;:&amp;rdquo; and beyond being cut off from the file name and the resulting file will be of size 0.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/say/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/say/</guid><description>Definition INT say ( &amp;lt;STRING message&amp;gt; )
Prints message to stdout (console).
Similar to System.out.println(message) in Java. Similar to printf(&amp;quot;%s\n&amp;quot;,message) in C Parameters STRING message - The message to print to stdout
Returns INT - true
Example import &amp;quot;mod_say&amp;quot; Process Main() Begin Say(&amp;quot;Hello World!&amp;quot;); End This will result in the output on console:
Hello World! Category:functions Category:debug Category:mod_say</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/say_fast/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/say_fast/</guid><description>Definition INT say_fast ( &amp;lt;STRING message&amp;gt; )
Prints message to stdout (console). This function is the same as the Say() function, but with the difference that the debugging information isn&amp;rsquo;t flushed (buffered) into the standard output. As you can see in the bennu source code mod_say.c, the difference is only 1 instruction, so it&amp;rsquo;s slightly faster.
Similar to System.out.println(message) in Java. Similar to printf(&amp;quot;%s\n&amp;quot;,message) in C Parameters STRING message - The message to print on to the console</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/scale_mode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/scale_mode/</guid><description> category:variables category:predefined category:global variables category:libvideo
Up to Global Variables
INT scale_mode = SCALE_NONE
Description Scale_mode is a global variable, holding the current or to be scale mode. The mode can be changed by assigning a different mode to the variable and then calling set_mode(). Default is SCALE_NONE.
See also sound_mode graph_mode</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/scale_modes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/scale_modes/</guid><description>Definition Scale modes are used to set the mode of scaling, by assigning one of them to the global variable scale_mode.
List Constant - Value - Description SCALE_NONE - 0 - No scale. SCALE_SCALE2X - 1 - Scale two times; use some filter. Looks like MODE_2XSCALE. SCALE_HQ2X - 2 - Scale two times; use HQ filter. Looks nice, runs slower. SCALE_SCANLINE2X - 3 - Scale two times; use scanline filter.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/scale_resolution/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/scale_resolution/</guid><description>category:variables category:predefined category:global variables category:libvideo
Up to Global Variables
INT scale_resolution = WWWWHHHH
Where WWWW is the Width and HHHH the Height. Resolution_modes can be used.
Description Scale_resolution is a global variable used to resize the screen without changing the real resolution. That means the game still uses the resolution indicated by set_mode() but it&amp;rsquo;s displayed on the screen at the one assigned to scale_resolution. Unlike scale_mode can work with 32bits but doesn&amp;rsquo;t use any filter.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/scale_resolution_aspectratio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/scale_resolution_aspectratio/</guid><description>category:variables category:predefined category:global variables category:libvideo
Up to Global Variables
INT scale_resolution_aspectratio = Scale_resolution_aspectratio_modes.
Description Scale_resolution_aspectratio is a global variable used to choose between stretching a screen resized by scale_resolution to fill the screen or keeping his aspect ratio.
Example Import &amp;quot;mod_video&amp;quot;; Import &amp;quot;mod_text&amp;quot;; Import &amp;quot;mod_key&amp;quot;; Import &amp;quot;mod_map&amp;quot;; Import &amp;quot;mod_proc&amp;quot;; Import &amp;quot;mod_screen&amp;quot;; Process Main() begin set_mode(800,600,32); write(0,20,20,0,&amp;quot;SCALE_RESOLUTION:&amp;quot;); write_var(0,160,20,0,scale_resolution); write(0,20,30,0,&amp;quot;( Press R) &amp;quot;); write(0,20,50,0,&amp;quot;SCALE_RESOLUTION_ORIENTATION:&amp;quot;); write_var(0,255,50,0,scale_resolution_orientation); write(0,20,60,0,&amp;quot;( Press 0, 1, 2 or ) &amp;quot;); write(0,20,90,0,&amp;quot;SCALE_RESOLUTION_ASPECTRATIO:&amp;quot;); write_var(0,255,90,0,scale_resolution_aspectratio); write(0,20,100,0,&amp;quot;( Press A ) &amp;quot;); Screen_put(0,png_load(&amp;quot;mz800x600.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/scale_resolution_aspectratio_modes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/scale_resolution_aspectratio_modes/</guid><description>Description When assigned to to the global variable scale_resolution_aspectratio allows to choose between stretching a screen resized by screen_resolution to fill the screen or keeping his aspect ratio.
List Constant - Value Description SRA_STRETCH - 0 Stretches the screen. SRA_PRESERVE - 1 Keeps the aspect ratio.
Category:constantcategories</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/scale_resolution_orientation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/scale_resolution_orientation/</guid><description>category:variables category:predefined category:global variables category:libvideo
Up to Global Variables
INT scale_resolution_orientation = Scale_resolution_orientation_modes.
Description Scale_resolution_orientation is a global variable used to rotate a screen resized by scale_resolution without changing the real orientation.
Example Import &amp;quot;mod_video&amp;quot;; Import &amp;quot;mod_text&amp;quot;; Import &amp;quot;mod_key&amp;quot;; Import &amp;quot;mod_map&amp;quot;; Import &amp;quot;mod_proc&amp;quot;; Import &amp;quot;mod_screen&amp;quot;; Process Main() begin set_mode(800,600,32); write(0,20,20,0,&amp;quot;SCALE_RESOLUTION:&amp;quot;); write_var(0,160,20,0,scale_resolution); write(0,20,30,0,&amp;quot;( Press R) &amp;quot;); write(0,20,50,0,&amp;quot;SCALE_RESOLUTION_ORIENTATION:&amp;quot;); write_var(0,255,50,0,scale_resolution_orientation); write(0,20,60,0,&amp;quot;( Press 0, 1, 2 or ) &amp;quot;); write(0,20,90,0,&amp;quot;SCALE_RESOLUTION_ASPECTRATIO:&amp;quot;); write_var(0,255,90,0,scale_resolution_aspectratio); write(0,20,100,0,&amp;quot;( Press A ) &amp;quot;); Screen_put(0,png_load(&amp;quot;mz800x600.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/scale_resolution_orientation_modes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/scale_resolution_orientation_modes/</guid><description>Description When assigned to to the global variable scale_resolution_orientation allows to rotate a screen resized by screen_resolution without changing the real orientation.
List Constant - Value Description SRO_NORMAL - 0 No changes. SRO_LEFT - 1 Rotates the screen 90 degrees anti-clockwise. SRO_DOWN - 2 Rotates the screen 180 degrees. SRO_RIGHT - 3 Rotates the screen 90 degrees clockwise.
Category:constantcategories</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/scan_code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/scan_code/</guid><description>category:variables category:predefined category:global variables category:mod_key
Up to Global Variables
Definition INT scan_code
Scan_code is defined in the module mod_key and, in contrast to ascii, it contains the last key pressed, not the last character. That means “A” and “a” will have the same scan_code, but different ascii value.
Notes Take a look at the scancodes for a complete list.
Example import &amp;quot;mod_text&amp;quot; import &amp;quot;mod_key&amp;quot; import &amp;quot;mod_video&amp;quot; process main() begin set_mode(640,320); write( 0, 60, 10, 0, &amp;quot;Use lower and upper case characters to see the difference&amp;quot;); write( 0, 60, 20, 0, &amp;quot;between ascii and scan_code.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/scancodes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/scancodes/</guid><description>Definition Scancodes are used to identify keys. This is used in the function key() and the global variable scan_code. Note that the global variable ascii is very different from this.
List | Constant | Value | | &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;- | &amp;mdash;&amp;mdash;- | | _ESC | 1 | | _1 | 2 | | _2 | 3 | | _3 | 4 | | _4 | 5 | | _5 | 6 | | _6 | 7 | | _7 | 8 | | _8 | 9 | | _9 | 10 | | _0 | 11 | | _MINUS | 12 | | _PLUS | 13 | | _BACKSPACE | 14 | | _TAB | 15 | | _Q | 16 | | _W | 17 | | _E | 18 | | _R | 19 | | _T | 20 | | _Y | 21 | | _U | 22 | | _I | 23 | | _O | 24 | | _P | 25 | | _L_BRACHET | 26 | | _R_BRACHET | 27 | | _ENTER | 28 | | _C_ENTER | 28 | | _CONTROL | 29 | | _A | 30 | | _S | 31 | | _D | 32 | | _F | 33 | | _G | 34 | | _H | 35 | | _J | 36 | | _K | 37 | | _L | 38 | | _SEMICOLON | 39 | | _APOSTROPHE | 40 | | _WAVE | 41 | | _L_SHIFT | 42 | | _BACKSLASH | 43 | | _Z | 44 | | _X | 45 | | _C | 46 | | _V | 47 | | _B | 48 | | _N | 49 | | _M | 50 | | _COMMA | 51 | | _POINT | 52 | | _SLASH | 53 | | _C_BACKSLASH | 53 | | _R_SHIFT | 54 | | _C_ASTERISK | 55 | | _PRN_SCR | 55 | | _ALT | 56 | | _SPACE | 57 | | _CAPS_LOCK | 58 | | _F1 | 59 | | _F2 | 60 | | _F3 | 61 | | _F4 | 62 | | _F5 | 63 | | _F6 | 64 | | _F7 | 65 | | _F8 | 66 | | _F9 | 67 | | _F10 | 68 | | _NUM_LOCK | 69 | | _SCROLL_LOCK | 70 | | _HOME | 71 | | _C_HOME | 71 | | _UP | 72 | | _C_UP | 72 | | _PGUP | 73 | | _C_PGUP | 73 | | _C_MINUS | 74 | | _LEFT | 75 | | _C_LEFT | 75 | | _C_CENTER | 76 | | _RIGHT | 77 | | _C_RIGHT | 77 | | _C_PLUS | 78 | | _END | 79 | | _C_END | 79 | | _DOWN | 80 | | _C_DOWN | 80 | | _PGDN | 81 | | _C_PGDN | 81 | | _INS | 82 | | _C_INS | 82 | | _DEL | 83 | | _C_DEL | 83 | | _F11 | 87 | | _F12 | 88 | | _LESS | 89 | | _EQUALS | 90 | | _GREATER | 91 | | _ASTERISK | 92 | | _R_ALT | 93 | | _R_CONTROL | 94 | | _L_ALT | 95 | | _L_CONTROL | 96 | | _MENU | 97 | | _L_WINDOWS | 98 | | _R_WINDOWS | 99 |</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/screen_clear/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/screen_clear/</guid><description>Definition INT screen_clear ( )
Clears the background of the screen, making it completely black.
Also called clear_screen().
Returns INT : true
Notes This is the same as &#39;&#39;&#39;[[map_clear]]&#39;&#39;&#39;(0,[[BACKGROUND]]). When the background is cleared in either way, Bennu knows the background is empty and will take advantage of this knowledge.
Errors Unsupported color depth - The specified graph has a not supported color depth.
Category:functions Category:screen Category:mod_screen</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/screen_get/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/screen_get/</guid><description>Definition INT screen_get ( )
Creates a new graphic containing a copy of the lastly rendered frame.
The map will contain everything, including background, processes, drawings and text. Just like map_new(), the newly created graphic will be located in the System file (fileID of 0); the graphID will be returned. After the use of this graphic, it should be freed using map_unload().
Also called get_screen().
Returns INT : GraphID</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/screen_put/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/screen_put/</guid><description>Definition INT screen_put ( &amp;lt;INT fileID&amp;gt; , &amp;lt;INT graphID&amp;gt; )
Clears and draws (blits) a graph onto the background in the center.
For more advanced blitting, see:
put() xput() Also called put_screen().
Parameters INT fileID - The file that holds the graph. INT graphID - The graph to draw with.
Returns INT
0 - Invalid map. 1 - Success.
Notes The center of the specified graph influences its placement.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/scroll/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/scroll/</guid><description>Definition STRUCT[9] Scroll
Scroll is a global variable struct array, containing information about the current state of the ten available scrolls (0..9). It is used to influence the settings of a scroll window, initiated by start_scroll().
Members of the scroll struct Member name Description INT x0 The X-coordinate of the foreground graphic.* INT y0 The Y-coordinate of the foreground graphic.* INT x1 The X-coordinate of the the background graphic.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/scroll_window/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/scroll_window/</guid><description>category:general category:scroll
Definition A scroll window is a region in which a scroll has been started by start_scroll() and setup with the global variable scroll. This scroll window provides a view window into the scroll that has been setup there, with certain background and foreground graphics. The view window can be &amp;lsquo;scrolled&amp;rsquo; over the scroll (and the graphics).
The use of scrolls can be various, but mostly they are used for scrolling games, like sidescrollers.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/seek_modes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/seek_modes/</guid><description>Definition Seek modes are used to specify the mode of seeking in a file, by passing one of them to the function fseek() as the parameter relativeness. The mode of seeking means to what position the seeking will be related to.
List Constant - Value - Relative to SEEK_SET - 0 - The beginning of the file. This means just setting the position. SEEK_CUR - 1 - The current position.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/set_channel_volume/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/set_channel_volume/</guid><description>Definition INT set_channel_volume ( &amp;lt;INT channel&amp;gt; , &amp;lt;INT volume&amp;gt; )
Change the reproduction volume of the wave sound channel. With this function, it is possible to set the channels to different volumes.
Parameters INT channel - The sound channel. INT volume - New volume. (0..128).
Returns INT : Error.
-1 - Error: sound inactive. 0 - No error.
Notes This function changes the reproduction volume of the sound channel. The volume level can be set between 0 (silence) and 128 (original 100% volume of the track.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/set_distance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/set_distance/</guid><description>Definition INT set_distance ( &amp;lt;INT channel&amp;gt; , &amp;lt;INT distance&amp;gt; )
Set the &amp;ldquo;distance&amp;rdquo; of a sound channel. the distance specifies the location of the sound in relation to the listener. If you want also want to have control over the angle, see Set_position().
Parameters INT channel - The sound channel to change the position of. INT distance - The distance (0-255).
Returns INT : Status.
0 - Ok. -1 - Error: sound inactive.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/set_fps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/set_fps/</guid><description>Definition INT set_fps ( &amp;lt;INT fps&amp;gt; , &amp;lt;INT skip&amp;gt; )
Sets the frames per second (framerate) your program aims to display. The more frames per second, the faster your program runs. Some computers might not be able to display the amount of frames you specified, and will show a lower fps. Therefore, it is important you choose a fps that is reasonable and can also be displayed by the somewhat slower computers.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/set_icon/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/set_icon/</guid><description>Definition INT set_icon ( &amp;lt;INT fileID&amp;gt; , &amp;lt;INT graphID&amp;gt; )
Set the window icon to a certain graph.
The icon will only be updated after set_mode() is called, so call set_icon() before set_mode(). The map used for the icon must be 32x32 large, but it can have different depths. After set_icon() and set_mode() have been called, the map used for the icon can be freed from memory using unload_map().</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/set_mode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/set_mode/</guid><description>Syntax INT set_mode ( &amp;lt;INT width&amp;gt; , &amp;lt;INT height&amp;gt; , [&amp;lt;INT depth&amp;gt;] , [&amp;lt;INT flags&amp;gt;] )
Description Sets the screen resolution of your program, and optionally the colordepth of the screen and any render flags for extra options. If this command is not used, the default settings will take effect (320x240 at 32 bpp).
Some much used resolutions are: 320x240, 640x480, 800x600, 1024x768 and 1280x1024.
Parameters INT width - Width of the screen in pixels.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/set_music_position/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/set_music_position/</guid><description>Definition INT set_music_position ( &amp;lt;FLOAT position&amp;gt; )
Set the position of the currently playing music, loaded with Load_song() and played with Play_song() It only works with the formats supported by those functions. It does not apply to wave files.
Parameters FLOAT position - Jumps to position seconds from the beginning of the song.
Returns INT : Status.
position - The position in the music. -1 - Error: sound inactive.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/set_panning/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/set_panning/</guid><description>Definition INT set_panning ( &amp;lt;INT channel&amp;gt; , &amp;lt;INT left&amp;gt; , &amp;lt;INT right&amp;gt; )
Sets the stereo panning of a sound channel, i.e. set the volumes of the left and right speakers individually.
Parameters INT channel - The sound channel to change the panning of. INT left - The volume of the left speaker (0-255). INT right - The volume of the right speaker (0-255).
Returns INT : Status.
0 - Ok.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/set_position/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/set_position/</guid><description>Definition INT set_position ( &amp;lt;INT channel&amp;gt; , &amp;lt;INT angle&amp;gt; , &amp;lt;INT distance&amp;gt; )
Sets the position of a sound channel. With this function you can &amp;ldquo;emulate&amp;rdquo; a simple 3d audio effect. If you only want to control the distance, you can use Set_distance().
Parameters INT channel - The sound channel to change the position of. INT angle - The angle (0-360). INT distance - The distance (0-255).
Returns INT : Status.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/set_song_volume/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/set_song_volume/</guid><description>Definition INT set_song_volume ( &amp;lt;INT volume&amp;gt; )
Change the reproduction volume of the music track.
With this function, it is possible to set the background music to a different volume than the sound effects, etc.
Parameters INT volume - New volume. (0..128).
Returns INT : Error.
-1 - Error: sound inactive. 0 - No error.
Notes This function changes the reproduction volume of the music track. The volume level can be set between 0 (silence) and 128 (original 100% volume of the track.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/set_text_color/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/set_text_color/</guid><description>Definition INT set_text_color ( [INT &amp;lt; textID&amp;gt;] , &amp;lt;WORD color&amp;gt; )
Sets the current text color (the color where texts will be written in). This only affects 1 bit (2 color) fonts, which can be loaded with load_font() or load_bdf(). 8 bit and 16 bit fonts already contain color information themselves and thus aren&amp;rsquo;t affected.
Parameters INT textID - The identification code of the text (optional). WORD color - The color to use for text.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/set_title/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/set_title/</guid><description>Definition INT set_title ( &amp;lt;STRING title&amp;gt; )
Sets the title of the program&amp;rsquo;s window.
The title will only be updated after set_mode() is called, so call set_title() before set_mode().
Parameters STRING title - The new title for the program&amp;rsquo;s window.
Returns INT : true
Example Program icon; Private int map; int screen_width = 320; int screen_height = 200; int screen_depth = 8; int iconsize = 32; Begin map = new_map(iconsize,iconsize,screen_depth); map_clear(0,map,rgb(0,255,255)); set_icon(0,map); set_title(&amp;quot;&amp;lt;-- Look at the cyan block!</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/set_wav_volume/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/set_wav_volume/</guid><description>Syntax INT set_wav_volume ( &amp;lt;INT waveID&amp;gt; , &amp;lt;INT volume&amp;gt; )
Description Change the reproduction volume of the wav track.
With this function, it is possible to set the volume of the sound effects, etc.
Parameters INT waveID - waveID as returned by load_wav(). INT volume - New volume. (0..128)
Returns (assumed) INT : Error.
-1 - Error: sound inactive. 0 - No error.
Notes This function changes the reproduction volume of the wav track.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/setting_up_bennu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/setting_up_bennu/</guid><description>Up to Tutorialcategories
Setting up Bennu.
category=setting up Bennu resultsfooter = \n%PAGES% articles about setting up Bennu mode=userformat listseparators = ,\n* %TITLE%,, redirects = include noresultsfooter = No pages about setting up Bennu here yet.
(If you require an editor it is recommended to follow instructions for Setting up Bennu with ConTEXT)
Category:tutorialcategories Category:setting up Bennu</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/setting_up_bennu_on_windows/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/setting_up_bennu_on_windows/</guid><description/></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/shift_status/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/shift_status/</guid><description>category:variables category:predefined category:global variables category:mod_key
Up to Global Variables
Definition INT shift_status
Shift_status is defined in the module mod_key and indicates whether a modifier key is being pressed. If more than a modifier key is pressed at the same time shift_status will return the sum.
List Key - Value Right Control - 20 * Left Control - 36 Right Alt - 72 * Left Alt - 136 NUM LOCK - 256 CAPS LOCK - 512 Right Shift - 1025 Left Shift - 1026</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/short/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/short/</guid><description>Definition SHORT or WORD
Shorts or Words are whole numbers ranging from 0 to 2\^16-1 ( 0 to 65535 ). This is because a short or word uses 16 bits (2 bytes) to denote its value.
Category:language Category:datatypes</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/signal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/signal/</guid><description>Definition INT signal ( &amp;lt;INT processID|processTypeID&amp;gt; , &amp;lt;INT signal&amp;gt; )
Allows a process/function or a range of processes/functions of certain processType to be controlled in a limited number of ways, by sending signals.
Parameters INT processID|processTypeID - The ProcessID of the process or the ProcessTypeID of the type of processes to send the signal to. INT signal - The signal that is to be sent to the target process(es).</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/signal_action/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/signal_action/</guid><description>Definition INT signal_action ( [&amp;lt;INT processID|processTypeID&amp;gt; , ] INT signal , INT action )
Sets the reaction of one or more processes when they receive a certain nonforceful-signal. Only existing processes are affected, processes created afterwards are not.
Parameters INT processID|processTypeID - A ProcessID,ProcessTypeID or ALL_PROCESS. INT signal - The code of a nonforceful-signal for which a reaction is to be specified. INT action - The reaction of the process when it receives a signal.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/signal_actions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/signal_actions/</guid><description>Definition Signal actions are modes which indicate how a process should react to a signal.
See signal_action().
List Constant - Value - Meaning S_DFL - 0 - Signal is received and will be reacted upon (default). S_IGN - 1 - Signal is ignored.
Category:constantcategories</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/signals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/signals/</guid><description>Description Signals are used to specify the signal to be sent to a process or all processes of a processType, by passing one of them to the function signal() as the signal parameter. The reaction a process has on an incoming signal can be influenced by signal_action().
List Constant - Value - Description S_KILL - 0 - Kill the process. S_WAKEUP - 1 - Wakeup the process. S_SLEEP - 2 - Put the process to sleep.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/signedness/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/signedness/</guid><description>This applies to variables holding integer values (int, word, byte, etc).
Signedness is a property of variables representing integer numbers. A signed variable can represent both negative values and positive values (and zero of course). An unsigned variable can only represent zero and positive values.
While signed numbers can represent negative numbers, they lose a range of larger numbers which can only be represented with unsigned numbers of the same size (in bits).</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/sin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/sin/</guid><description>Definition FLOAT sin ( &amp;lt;FLOAT angle&amp;gt; )
Returns the sine of the specified angle.
This function performs a sine calculation on a certain angle and returns a value between -1 and 1.
Parameters FLOAT angle - Angle, in thousandths of degrees. i.e. 75000 = 75º
Returns FLOAT : The sine result of the specified angle.
Notes The angle value used in this function should be in thousandths of degrees, as most angles within Bennu are.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/size/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/size/</guid><description>category:variables category:predefined category:local variables category:librender
Up to Local Variables
Definition INT size = 100
Size is a predefined local variable that can be used to stretch or compress a graphic, equally along the horizontal axis and vertical axis. It is defined as a percentage of the original graphic size. The graphics&amp;rsquo;s center will remain at the drawing coordinates when the graphic is drawn.
This variable only has effect for the appearance of a process&amp;rsquo; graphic when its local variables size_x and size_y are both 100.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/size_x/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/size_x/</guid><description>category:variables category:predefined category:local variables category:librender
Up to Local Variables
Definition INT size_x = 100
Size_x is a predefined local variable that can be used to stretch or compress a graphic along its horizontal axis. It is defined as a percentage of the original graphic size. The graphics&amp;rsquo;s center will remain at the drawing coordinates when the graphic is drawn.
When either size_x or size_y of a process are unequal to [code]100[/code], that process&amp;rsquo; size has no effect.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/size_y/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/size_y/</guid><description>category:variables category:predefined category:local variables category:librender
Up to Local Variables
Definition INT size_y = 100
Size_y is a predefined local variable that can be used to stretch or compress a graphic along its vertical axis. It is defined as a percentage of the original graphic size. The graphics&amp;rsquo;s center will remain at the drawing coordinates when the graphic is drawn.
When either size_x or size_y of a process are unequal to [code]100[/code], that process&amp;rsquo; size has no effect.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/sizeof/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/sizeof/</guid><description>Syntax INT sizeof ( {datatype} ) Description Calculates the size of a block of memory. Returns the size in bytes.
Parameters {datatype} - The type, i.e. any valid bennu datatypes. Can also be a user defined types or structs. Returns INT : The size of the data type, in bytes.
Definition The sizeof() operator is used to calculate the size of datatypes. This is important for creating dynamic data structures wich are created with the functions alloc(), calloc() and realloc().</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/smallbro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/smallbro/</guid><description> category:variables category:predefined category:local variables category:internal
Up to Local Variables
Definition INT smallbro
Smallbro is a predefined local variable. Smallbro holds the ProcessID of the process/function that was immediately called after by the father of the current process/function. There are several other local variables which refer to the ProcessID of a related process:
Father Son Bigbro</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/son/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/son/</guid><description> category:variables category:predefined category:local variables category:internal
Up to Local Variables
Definition INT son
Son is a predefined local variable. Son holds the ProcessID of the process/function that was last called by the current process/function. There are several other local variables which refer to the ProcessID of a related process:
Father Bigbro Smallbro</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/songid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/songid/</guid><description>Definition SongID
A SongID is an identifier associated with a certain song loaded by load_song(). The identifier can be used in various other functions, like unload_song() to unload the song.
Category:general</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/sort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/sort/</guid><description>Syntax INT sort ( &amp;lt;VARSPACE array&amp;gt; , [&amp;lt;INT datacount&amp;gt;] )
Description Sorts an array by sorting a certain number of elements, by using the first variable in each element. By default the whole array is sorted.
If the elements contain multiple variables, ksort() can be used to select the variable to be used for sorting. For more advanced sorting, look at quicksort().
Parameters VARSPACE array - The array to be sorted.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/sound_channels/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/sound_channels/</guid><description> category:variables category:predefined category:global variables category:mod_sound
Up to Global Variables
Definition INT sound_channels = 8
Sound_channels is a global variable, holding the number of sound channels, which is set when sound is used for the first time, meaning altering the value of this variable will have no effect after sound has been initialized. This number can range from 1 to 32 and the default is 8.
See also sound_mode sound_freq</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/sound_close/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/sound_close/</guid><description>Definition VOID sound_init ( )
Manually Closes the audio system. This is normally not needed, but may be necessary on some systems with SDL mixer issues. It is used in combination with Sound_init(). (verification needed)
Parameters This function has no parameters.
Returns VOID : This function does not return anything.
See also Sound_init()
Category:functions Category:sound Category:mod_sound</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/sound_freq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/sound_freq/</guid><description> category:variables category:predefined category:global variables category:mod_sound
Up to Global Variables
Definition INT sound_freq = 22050
Sound_freq is a global variable, holding the set sound frequency, which is set when sound is used for the first time, meaning altering the value of this variable will have no effect after sound has been initialized. The higher the frequency, the higher the quality is. Accepted frequencies are:
44100: high quality (recommended) 22050: medium quality (default) 11025: low quality (not recommended) See also sound_mode sound_channels</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/sound_init/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/sound_init/</guid><description>Definition INT sound_init ( )
Manually Initializes the audio system. This is normally not needed, but may be necessary on some systems with SDL mixer issues. (verification needed)
Parameters This function has no parameters.
Returns INT : Status/error.
0 - The audio device is opened. -1 - There&amp;rsquo;s an error, failed to initialize the audio system.
See also Sound_close()
Category:functions Category:sound Category:mod_sound</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/sound_mode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/sound_mode/</guid><description> category:variables category:predefined category:global variables category:mod_sound
Up to Global Variables
Definition INT sound_mode = MODE_STEREO
Sound_mode is a global variable, holding the set sound mode, which is set when sound is used for the first time, meaning altering the value of this variable will have no effect after sound has been initialized. The mode can be changed by assigning a different mode to the variable. Default is MODE_STEREO.
See also graph_mode sound_freq sound_channels</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/sound_modes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/sound_modes/</guid><description>Definition Sound modes are used to set the sound mode, by assigning one of them to the global variable sound_mode. Currently the choice is between monotone sound and stereo sound.
List Constant - Value - Description MODE_MONO - 0 - Use monotone sound. MODE_STEREO - 1 - Use stereo sound.
Category:constantcategories</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/split/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/split/</guid><description>Syntax INT split ( &amp;lt;STRING delimiter&amp;gt; , &amp;lt;STRING str&amp;gt; , &amp;lt;STRING POINTER array&amp;gt; , &amp;lt;INT max_number&amp;gt; )
Description Splits a string in several strings using a regular expression as delimiter.
The first piece will go to array[0], the second to array[1], and so forth, until either there are no more pieces left or max_number pieces are returned into the array. The number of pieces returned this way is returned by the function.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/sqrt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/sqrt/</guid><description>Definition FLOAT sqrt ( &amp;lt;FLOAT value&amp;gt; )
Returns the square root of a certain value.
Parameters FLOAT value - The value of which the square root will be returned.
Returns FLOAT : The square root of value.
Category:functions Category:math Category:mod_math</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/standards/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/standards/</guid><description>You do not have to feel obligated, but please try to keep your article according to following standards, so that we can get a homogenic look. The standards are quite natural and will appear logical when followed. Different sections contain different information; below are three general section which are mostly used.
Also look at these:
Standards:function Standards:variable Standards:names Note that in practice you don&amp;rsquo;t need to look at these standards.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/standards_function/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/standards_function/</guid><description> REDIRECT Standards:function</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/standards_variable/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/standards_variable/</guid><description>Up to Standards
Click here to get the template for this standard.
Click here to get an example of this standard.
Don&#39;t forget to add it to a category, like &amp;quot;local variables&amp;quot;, or &amp;quot;predefined variables&amp;quot;, or combinations. Always add it to the category &amp;quot;variables&amp;quot;: [[category:variables]] When internally linking to variables, just put &amp;quot;[[]]&amp;quot; around the name, like: [[father]] Definition VariableType VariableName
VariableName is for yadayada.
The main usage and functionality of the variable.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/start_scroll/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/start_scroll/</guid><description>Definition INT Start_scroll ( &amp;lt;INT scrollnumber&amp;gt; , &amp;lt;INT fileID&amp;gt; , &amp;lt;INT graphID&amp;gt; , &amp;lt;INT backgroundgraphID&amp;gt; , &amp;lt;INT regionnumber&amp;gt; , &amp;lt;INT lockindicator&amp;gt; , [ &amp;lt;INT destination fileID &amp;gt;, &amp;lt;INT destination graphID &amp;gt; ] )
This creates a scroll window in which it will perform a view against a background graphic. That is, by using a graphic bigger than the display window, a part of this graphic can be shown and shifted in any direction.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/stop_scroll/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/stop_scroll/</guid><description>Definition INT Stop_scroll ( &amp;lt;INT scrollnumber&amp;gt;)
This functions stops an active scroll window. There can be up to 10 (0-9) scroll windows active. When the scroll is stopped, all the processes in it will no longer be displayed. This function is usefull for switching the game&amp;rsquo;s state from active gameplay to a loading screen state or similair situations. Another use is, when there are multiple scroll regions active, and the game changes from split screen to single screen.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/stop_song/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/stop_song/</guid><description>Definition INT stop_song ( )
Stops a song loaded with load_song() and played with play_song().
Parameters This function has no parameters.
Returns INT : Status
0 - The song is stopped.
Category:functions Category:sound Category:mod_sound</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/stop_wav/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/stop_wav/</guid><description>Definition INT stop_wav ( INT )
Stops a the playback of sound of the indicated wave sound channel.
Parameters &amp;rsquo; INT&amp;rsquo; channel: the sound channel.
Returns INT : Status
-1 - There is an error.
Category:functions Category:sound Category:mod_sound</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/strcasecmp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/strcasecmp/</guid><description>Definition INT strcasecmp( &amp;lt;STRING str1&amp;gt; , &amp;lt;STRING str2&amp;gt; )
Compares two strings case-insensitive and returns the result.
Parameters STRING str1 - The first string. STRING str2 - The second string, to compare with the first string.
Returns INT: difference
0 - The strings are equal. &amp;gt;0 - The ASCII value of the first differing characters is higher for str1. &amp;lt;0 - The ASCII value of the first differing characters is higher for str2.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/string/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/string/</guid><description>Definition STRING
Strings are a sort of character array, combining characters to form text. Because the length of a string is dynamic, adding them is done easily. Single and double quotes can be used to create strings.
Example Program strings; Private String name; String surname; Begin name = &amp;quot;Yo&amp;quot;; surname = &amp;quot;Momma&amp;quot;; say(name + &amp;quot; &amp;quot; + surname + &amp;quot; has entered.&amp;quot;); say(&#39;User logged on: &amp;quot;&#39; + name + &amp;quot; &amp;quot; + surname + &#39;&amp;quot;&#39;); Repeat frame; Until(key(_ESC)) End Used in example: say(), key()</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/strrev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/strrev/</guid><description>Definition STRING strrev ( &amp;lt;STRING str&amp;gt; )
Returns a reversed version of a certain string, meaning the characters are in reversed order.
Parameters STRING str - The non reversed string.
Returns STRING : The reversed string.
Category:functions Category:strings Category:mod_string</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/struct/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/struct/</guid><description>Definition Struct {struct name} {Members} End Structs are datatypes able to contain variables of all datatypes.
To address a member of a struct, use the . operator: {structname}.{membername}. Like all datatypes, one can have a whole range of them, as displayed in the example (also see Array).
There are two ways to fill a struct on declaration:
Per member Afterwards, like Arrays. See the examples on how to do it.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/subroutine/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/subroutine/</guid><description>Definition A subroutine is a program segment that can be called and used by any other bit of the program. So basically, if there&amp;rsquo;s something that you want to do quite a lot in your program, then you can write a subroutine for it and then just call this subroutine every time you want to to that.
In PixTudio this is achieved by the use of functions and processes</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/substr/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/substr/</guid><description>Syntax INT substr ( &amp;lt;STRING str&amp;gt; , &amp;lt;INT startposition&amp;gt; , [&amp;lt;INT characters&amp;gt;] )
Description Returns a subsection of a certain string.
Parameters STRING str - The string of which a subsection will be returned. INT startposition - The position of the first character to be in the subsection. [INT characters] - The number of characters the subsection will hold. Negative values are special; see Notes.
Returns STRING : The subsection.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/switch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/switch/</guid><description>Syntax Switch ( &amp;lt;value&amp;gt; ) ( Case &amp;lt;value&amp;gt; : [ &amp;lt;code&amp;gt; ] End ) [ Default: [ &amp;lt;code&amp;gt; ] End ] End
Description A switch is used to control the flow of a program by means of comparing a value to other values and executing the code associated with the correct value.
switch ( &amp;lt;value&amp;gt; ) case &amp;lt;value1&amp;gt;: // code1 end case &amp;lt;value2&amp;gt;: // code2 end default: // code3 end end When the switch is reached it will compare value with the values in the cases, going from top to bottom.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/system_file/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/system_file/</guid><description>Description The system file is like a regular file, but it contains on the fly created graphics. These graphics are for example created by map_new(), map_clone() or write_in_map().
The system file can be accessed using 0 as the fileID. While this file can also be a file loaded from disc, the graphics in that file all have a graphID below 1000. Graphics created on the fly have graphID&amp;rsquo;s 1000 or above.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/tan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/tan/</guid><description>Definition FLOAT tan ( &amp;lt;FLOAT angle&amp;gt; )
Returns the tangent of a certain angle.
This function performs a tangent calculation on a certain angle and returns a value.
Parameters FLOAT angle - Angle, in thousandths of degrees. i.e. 75000 = 75º
Returns FLOAT : The tangent result of the specified angle.
Notes The angle value used in this function should be in thousandths of degrees, as most angles within Bennu are.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/templates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/templates/</guid><description>Templates: namespace=Template mode=userformat listseparators = ,\n* %TITLE%,,</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/text/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/text/</guid><description>category:general category:texts
Definition A text is a text written on screen with texts functions, like write() or write_int(). A text is addressed using the associated TextID.
There are two kinds of texts:
Static text is any text written with write(); it is static, because the content of the text cannot be changed after writing, but the text can be moved and deleted. Dynamic text is any text written with write_xxx() functions; it is dynamic because the content of the text always reflects the current value of the variable specified.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/text_flags/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/text_flags/</guid><description>category:predefined category:libtext
Up to Global Variables
Definition INT text_flags = 0
Text_flags is a global variable. When a dynamic text is created (write(), etc), its flags value will equal the value of text_flags at the moment of creation. The default value is 0.
See also text_z TextID Category:variables Category:global variables</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/text_height/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/text_height/</guid><description>Definition INT text_height ( &amp;lt;INT fontID&amp;gt; , &amp;lt;STRING text&amp;gt; )
Calculates the height in pixels of the specified text in the specified font.
Parameters INT FontID - FontID of the font for which the height of the text will be the calculated. STRING text - The text of which the height will be calculated.
Returns INT : The height in pixels of the text in the font.
0 - Invalid or no text; invalid font.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/text_width/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/text_width/</guid><description>Definition INT text_width ( &amp;lt;INT fontID&amp;gt; , &amp;lt;STRING text&amp;gt; )
Calculates the width in pixels of the specified text in the specified font.
Parameters INT FontID - FontID of the font for which the width of the text will be the calculated. STRING text - The text of which the width will be calculated.
Returns INT : The width in pixels of the text in the font.
0 - Invalid or no text; invalid font.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/text_z/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/text_z/</guid><description>category:predefined category:libtext
Up to Global Variables
Definition INT text_z = -256
Text_z is a global variable. When a dynamic text is created (write(), etc), its z value will equal the value of text_z at the moment of creation. The default value is -256.
See also z text_flags TextID Category:variables Category:global variables</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/textid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/textid/</guid><description>category:general category:texts
Definition TextID
TextID is an identifier associated with a certain text. It is returned by various text functions, like write(), write_int(), write_string(), write_float() and move_text().
When a dynamic text is created, it has the color last set by set_text_color(). By default this is white (rgb(255,255,255)). Its Z value is equal to text_z at the moment of creation, which is -256 by default.
To move the dynamic text associated with a TextID, use move_text().</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/time/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/time/</guid><description>Syntax INT time ( )
Description Returns the current time, in seconds from January 1st, 1970.
This function is mostly useful for the function ftime(), to display time and date in a particular format. It is also useful in rand_seed(), to have &amp;lsquo;more randomness&amp;rsquo;.
Returns INT : The current time, in seconds from January 1st, 1970.
Example import &amp;quot;mod_time&amp;quot; import &amp;quot;mod_timer&amp;quot; import &amp;quot;mod_text&amp;quot; import &amp;quot;mod_key&amp;quot; Process Main(); Private String timestring; // The string holding the formatted time Begin write_string(0,0,0,0,&amp;amp;timestring); // Display the timestring timer = 100; // Make it so it updates the timestring immediately Repeat if(timer&amp;gt;100) // Update the timestring every 1 second timer = 0; timestring = ftime(&amp;quot;%d-%m-%Y %H:%M:%S&amp;quot;,time()); end frame; Until(key(_esc)) End Used in example: write_string(), ftime(), key(), timer</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/timer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/timer/</guid><description>category:variables category:predefined category:global variables category:time category:mod_timers
Up to Global Variables
Definition INT[9] timer
Timer is a global variable, holding ten integers. Each frame a certain value is added to all of them. This value is the difference in time between the start of the last frame and the current frame, in 1&amp;frasl;100 seconds.
So when all the timers are never altered, their values will be 1234 when the program has been running for about 12.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/tinyxml.dll/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/tinyxml.dll/</guid><description>Up to Modules
Description Description for TinyXML module. Work in progress
How to use Category:modules Category:3rd party Category:TinyXML</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/todo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/todo/</guid><description>Fixing existing pages Lot of things to do, but luckily they are pretty easy.
Things to be done:
Every reference to &amp;ldquo;Fenix&amp;rdquo; needs to be adjusted and altered to &amp;ldquo;Bennu&amp;rdquo;. Code must be adjusted to import modules. Function, locals, globals, constants, etc in modules need to have their module navbox at the bottom of the page, like: {{Moduledocbox | module = Mod_math }} The old style using a chapter Definition needs to be separated in Syntax and Description.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/trim/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/trim/</guid><description>Definition STRING trim ( &amp;lt;STRING str&amp;gt; )
Returns a copy of str without leading or ending whitespace (spaces, tabs, linefeeds, carriage returns).
Parameters STRING str - The string to trim.
Returns STRING: trimmed string
Example import &amp;quot;mod_string&amp;quot; import &amp;quot;mod_say&amp;quot; Const _ABC_ = &amp;quot; ABC &amp;quot;; End Process Main() Private string ABC; Begin ABC = trim(_ABC_); say(&#39;_ABC_ = &amp;quot;&#39; + _ABC_ + &#39;&amp;quot;&#39;); say(&#39;ABC = &amp;quot;&#39; + ABC + &#39;&amp;quot;&#39;); End Used in example: say(), trim()</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/ttf_changelog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/ttf_changelog/</guid><description>Up to TTF.DLL
Changelog of TTF.DLL.
Category:changelog Category:ttfdll Category:dll</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/tutorialcategories/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/tutorialcategories/</guid><description>Up to Index
List of Tutorials
Tutorials about Bennu categorized. They range from beginner to advanced users.
Not many on here as of yet, add if you please!
category=tutorialcategories mode=userformat listseparators = ,\n* %TITLE%,, redirects = include</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/tutorials/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/tutorials/</guid><description>Up to Index
Tutorial Categories
List of tutorials about Bennu. They range from beginner to advanced users.
Not many on here as of yet - Wiki users add if you please!
category=tutorials mode=userformat listseparators = ,\n* %TITLE%,, redirects = include noresultsheader = No tutorials here yet. resultsfooter = \n%PAGES% tutorials</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/type/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/type/</guid><description>Datatype declaration Definition Type {name} {variables} End Creates a new datatype. It&amp;rsquo;s handled as if it were a struct, so the declared variables are members of the struct.
While it&amp;rsquo;s a convention to use a _ as first character in the name of a datatype, it&amp;rsquo;s not mandatory.
When used as an argument in a function or process, the parameter is not a copy, but the variable itself, as shown in the first example, and any change made to the parameter is also changed in the argument.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/ucase/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/ucase/</guid><description>Definition STRING ucase ( &amp;lt;STRING str&amp;gt; )
Returns a string identical to a certain string, with the exception that all lowercase characters are replaced by their uppercase counterparts.
Parameters STRING str - The string in &amp;ldquo;normal&amp;rdquo;-form.
Returns STRING : The string in &amp;ldquo;uppercase&amp;rdquo;-form.
Category:functions Category:strings Category:mod_string</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/unload_song/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/unload_song/</guid><description>Definition INT unload_song ( &amp;lt;INT SongID&amp;gt; )
Frees the memory occupied by the song file, previously loaded with load_song().
Parameters INT SongID - The SongID of the song to unload.
Returns INT : Error.
-1 - Error: sound inactive; invalid songID. 0 - No error.
Notes Instead of an INT a POINTER may also be used in the SongID argument.
Category:functions Category:sound Category:mod_sound</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/unload_wav/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/unload_wav/</guid><description>Definition INT unload_wav ( &amp;lt;INT WaveID&amp;gt; )
Frees the memory occupied by the wave file, previously loaded with load_wav().
Parameters INT WaveID - The WaveID of the sound to unload.
Returns INT : Error.
-1 - Error: sound inactive; invalid waveID. 0 - No error.
Notes Instead of an INT a POINTER may also be used in the WaveID argument.
Category:functions Category:sound Category:mod_sound</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/value/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/value/</guid><description> A value can be in a container, like a variable or constant. It can also be returned by a process or function.
See Also Constant Variable</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/variable/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/variable/</guid><description>A variable is a container containing a value. This value can vary, hence the name variable, as opposed to a constant of which the value cannot be changed. A variable can be of any datatype and can contain a value according to its datatype. For example, an integer has whole numbers between -2\^31 and +2\^31-1 (e.g. 23) , a float has a floating point number (e.g. 2.674) and a string has a series of characters (e.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/variable_example/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/variable_example/</guid><description> :category:variables
Definition VariableType VariableName
VariableName is for variable variabilities.
Notes Don&amp;rsquo;t set it to -1 or your pc will explode.
Example VariableName = 100;</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/variablecategories/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/variablecategories/</guid><description>Up to Index
List of Variables
Predefined variable categories category=predefinedvariablecategories mode=userformat listseparators = ,\n* %TITLE%,, redirects = include</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/variables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/variables/</guid><description>Up to Index
Variable Categories
List of all predefined variables.
Global variables category=global variables mode=userformat listseparators = ,\n* %TITLE%,, redirects = include replaceintitle = /\\? /,_
Local variables category=local variables mode=userformat listseparators = ,\n* %TITLE%,, redirects = include replaceintitle = /\\? /,_</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/varspace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/varspace/</guid><description>Definition VARSPACE
A varspace is a datatype of any datatype. When a function, like sort() or fread(), has a parameter of type varspace, it means it needs a variable of any type.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/void/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/void/</guid><description>Definition VOID
PixTudio doesn&amp;rsquo;t have voids as such. But when we look at for example the function free(), we see that you can pass it a void pointer. This means, that you can pass it a pointer of whatever type you want; an int pointer, word pointer or even a pointer pointer. So in this case, void means &amp;ldquo;any&amp;rdquo;.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/waveid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/waveid/</guid><description>Definition WaveID
A WaveID is an identifier associated with a certain wave-sound loaded by load_wav(). The identifier can be used in various other functions, like unload_wav() to unload the wave-sound.
Category:general</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/what_is_pixtudio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/what_is_pixtudio/</guid><description>PixTudio is an Open Source 2D game engine and scripting language that originated as a fork of BennuGD. The project puts an emphasis on mobile gaming but it perfectly suitable for 2D game creation for the desktop, too. The scripting language is easy to understand and makes use of co-routines, called processes.
The game engine is, also, highly portable and should compile directly in Windows, Linux, OS X, Android &amp;amp; iOS but past versions of the code where compiled for multiple console systems (including Nintendo&amp;rsquo;s Wii).</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/window_status/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/window_status/</guid><description>category:variables category:predefined category:global variables category:libwm
Up to Global Variables
Definition INT window_status
window_status is a predefined global variable, holding whether or not the Bennu window is visible. For example the window is not visible when it is minimized.
Value - Description false - The Bennu window is not visible. true - The Bennu window is visible.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/write/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/write/</guid><description>Definition INT write ( &amp;lt;INT fontID&amp;gt; , &amp;lt;INT x&amp;gt; , &amp;lt;INT y&amp;gt; , [&amp;lt;INT z&amp;gt;] , &amp;lt;INT alignment&amp;gt; , &amp;lt;STRING text&amp;gt;)
Puts a dynamic text with a certain font on certain coordinates on the screen with a certain alignment.
Parameters INT fontID - The FontID of the font to be used for the text. INT x - The X coordinate of the text. INT y - The Y coordinate of the text.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/write_float/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/write_float/</guid><description>Definition INT write_float ( &amp;lt;INT fontID&amp;gt; , &amp;lt;INT x&amp;gt; , &amp;lt;INT y&amp;gt; , [&amp;lt;INT z&amp;gt;] , &amp;lt;INT alignment&amp;gt; , &amp;lt;FLOAT POINTER var&amp;gt; )
Writes a floating point variable to the screen, which will be automatically updated when the value of the variable changes. The floating point variable will remain on the screen until deleted with delete_text().
Parameters INT fontID - The FontID of the font to be used for the text.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/write_in_map/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/write_in_map/</guid><description>Definition INT write_in_map ( &amp;lt;INT fontID&amp;gt; , &amp;lt;STRING text&amp;gt; , &amp;lt;INT alignment&amp;gt; )
Creates a new graphic in memory with the given text on it (without borders around the text) and puts it in the system file.
Parameters INT fontID - The FontID of the font to be used for the text. STRING text - The text to be used. INT alignment - The type of alignment.
Returns INT : GraphID</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/write_int/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/write_int/</guid><description>Definition INT write_int ( &amp;lt;INT fontID&amp;gt; , &amp;lt;INT x&amp;gt; , &amp;lt;INT y&amp;gt; , [&amp;lt;INT z&amp;gt;] , &amp;lt;INT alignment&amp;gt; , &amp;lt;INT POINTER var&amp;gt; )
Writes an integer to the screen, which will be automatically updated when the value of the integer changes. The integer will remain on the screen until deleted with delete_text().
Parameters INT fontID - The FontID of the font to be used for the text. INT x - The X coordinate of the text.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/write_string/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/write_string/</guid><description>Syntax INT write_string ( &amp;lt;INT fontID&amp;gt; , &amp;lt;INT x&amp;gt; , &amp;lt;INT y&amp;gt; , &amp;lt;INT alignment&amp;gt; , &amp;lt;STRING POINTER var&amp;gt; )
Description Writes a string to the screen, which will be automatically updated when the value of the string changes. The string will remain on the screen until deleted with delete_text().
Parameters INT fontID - The FontID of the font to be used for the text. INT x - The X coordinate of the text.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/write_var/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/write_var/</guid><description>Syntax INT write_var ( &amp;lt;INT fontID&amp;gt; , &amp;lt;INT x&amp;gt; , &amp;lt;INT y&amp;gt; , [&amp;lt;INT z&amp;gt;] , &amp;lt;INT alignment&amp;gt; , &amp;lt;VARSPACE var&amp;gt; )
Description Writes a variable of any kind to the screen, which will be automatically updated when the value of the variable changes. The variable will remain on the screen until deleted with delete_text().
Parameters INT fontID - The FontID of the font to be used for the text.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/x/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/x/</guid><description> variables](category:local_variables &amp;ldquo;wikilink&amp;rdquo;) category:librender This is about the local variable. Did you mean the scan code _X?
). Did you mean the scan code _X?*
Up to Local Variables
Definition INT x = 0
X is a predefined local variable that defines the vertical position of the process graph in the screen.
See also y z</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/xadvance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/xadvance/</guid><description>Definition INT xadvance ( &amp;lt;INT angle&amp;gt; , &amp;lt;INT distance&amp;gt; )
Moves a process a certain distance in a certain direction.
Parameters INT angle - The angle in which to move the process, in thousandths of a degree. INT distance - The distance to move the process, in pixels.
Returns INT : Successrate
true - Success. false - Error.
Example Program example; Global myproc; Begin myproc=proc(); Loop frame; End End Process proc(); Begin x=100; y=100; Loop xadvance(90000,10); //moves the process vertically (90 degrees) 10 pixels frame; End End Category:functions Category:processinteraction Category:mod_grproc</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/xgraph/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/xgraph/</guid><description>category:variables category:predefined category:local variables category:libscroll category:librender
Up to Local Variables
Definition The predefined local variable xgraph is assigned to each process. It is the so called &amp;ldquo;extended&amp;rdquo; graphic, and it allows graphics to be displayed that are controlled by the nearest process Angle. When the xgraph is defined, the normal variable Graph is ignored, and the graphic used for display is determined by the angle.
So when the angle changes, a different graphic is selected from a table (defined as an Array).</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/xput/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/xput/</guid><description>Definition INT xput ( &amp;lt;INT fileID&amp;gt; , &amp;lt;INT GraphID&amp;gt; , &amp;lt;INT x&amp;gt; , &amp;lt;INT y&amp;gt; , &amp;lt;INT angle&amp;gt; , &amp;lt;INT size&amp;gt; , &amp;lt;INT blitflags&amp;gt; , &amp;lt;INT region&amp;gt; )
Draws (blits) a graphic onto the background.
If the advanced parameters aren&amp;rsquo;t needed, put() can be used.
Parameters INT fileID - The fileID of the file that holds the graphics. INT graphID - The graphID of the graphic to draw with. INT x - Where on the background graphic&amp;rsquo;s x-axis to put the graphic.</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/y/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/y/</guid><description> variables](category:local_variables &amp;ldquo;wikilink&amp;rdquo;) category:librender This is about the local variable. Did you mean the scan code _Y?
). Did you mean the scan code _Y?*
Up to Local Variables
Definition INT y = 0
Y is a predefined local variable that defines the horizontal position of the process graph in the screen.
See also x z</description></item><item><title/><link>https://divhub.github.io/pixtudio-website/docs/z/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://divhub.github.io/pixtudio-website/docs/z/</guid><description>variables](category:local_variables &amp;ldquo;wikilink&amp;rdquo;) category:librender This is about the local variable. Did you mean the scan code _Z?
). Did you mean the scan code _Z?*
Up to Local Variables
Definition INT z = 0
Z is a predefined local variable that defines the depth position of the process graph in the screen. This variable affects what process graph will be drawn before other one. A process with higher z will be drawn beneath a process with a lower z.</description></item></channel></rss>